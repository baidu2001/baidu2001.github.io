<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux命令学习和软件安装等</title>
    <url>/2022/09/22/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E5%92%8C%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AD%89/</url>
    <content><![CDATA[<p>自主学习了一天很懒的打字了，大部分就用图片替代吧</p>
<h3 id="VMware安装"><a href="#VMware安装" class="headerlink" title="VMware安装"></a>VMware安装</h3><span id="more"></span>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/3bv.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/vq9g.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4j8q.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/vq8s.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/3bv_1.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/nd1.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/ncf.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4je9.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/nc7.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4je7.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/nc2.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/vtp7.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/nd8.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4jqh.png"></p>
<h3 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h3><h4 id="Linux目录介绍"><a href="#Linux目录介绍" class="headerlink" title="Linux目录介绍"></a>Linux目录介绍</h4><ul>
<li><code>bin 存放二进制可执行文件</code></li>
<li><code>boot存放系统引导时使用的各种文件</code></li>
<li>`dev存放设备文件</li>
<li><code>etc存放系统配置文件</code></li>
<li>`home存放系统用户的文件</li>
<li><code>lib存放程序运行所需的共享库和内核模块</code></li>
<li><code>opt额外安装的可选应用程序包所放置的位置</code></li>
<li>`root超级用户目录</li>
<li><code>sbin存放二进制可执行文件，只有root用户才能访问tmp存放临时文件</code></li>
<li><code>usr存放系统应用程序</code></li>
<li><code>var存放运行时需要改变数据的文件，例如日志文件</code></li>
</ul>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4jro.png"></p>
<h4 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h4><p><img src="https://i.p04e.com/baid/i/2022/09/22/4jnd.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/54n6.png"></p>
<mg src="https://i.p04e.com/baid/i/2022/09/22/1cv9d5.png">

<p><img src="https://i.p04e.com/baid/i/2022/09/22/9i2le1.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/1cv9a2.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/1cv9ph.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/6zbte.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/54nf.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/9i2yg5.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/zwjj.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/zwjr.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/6zc0e.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/1cvct3.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/6zbyc.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/zwlb.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/6zc0z.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/1cvcwh.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/zwhl.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/54nj.png"></p>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p><img src="https://i.p04e.com/baid/i/2022/09/22/zwf7.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/54mm.png"></p>
<h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><p><img src="https://i.p04e.com/baid/i/2022/09/22/4ju0.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">防火墙操作:</span><br><span class="line">查看防火墙状态(systemctl status firewalld、 firewall-cmd --state)</span><br><span class="line"></span><br><span class="line">暂时关闭防火墙(systemctl stop firewalld)</span><br><span class="line"></span><br><span class="line">永久关闭防火墙(systemctl disable firewalld)</span><br><span class="line"></span><br><span class="line">开启防火墙(systemctl start firewalld)</span><br><span class="line"></span><br><span class="line">开放指定端口(firewall-cmd --zone=public --add-port=8080/tcp --permanent)</span><br><span class="line"></span><br><span class="line">关闭指定端口(firewall-cmd --zone=public --remove-port=8080/tcp --permanent)</span><br><span class="line"></span><br><span class="line">立即生效(firewall-cmd --reload)</span><br><span class="line"></span><br><span class="line">查看开放的端口(firewall-cmd --zone=public --list-ports)</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1、 systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</span><br><span class="line"></span><br><span class="line">2、firewall-cmd是Linux中专门用于控制防火墙的命令</span><br><span class="line"></span><br><span class="line">3、为了保证系统安全，服务器的防火墙不建议关闭</span><br></pre></td></tr></table></figure>
<h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><p><img src="https://i.p04e.com/baid/i/2022/09/22/nez.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/nfg.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/vv1m.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/6zmgo.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/zy5i.png"></p>
<h3 id="安装lrzsz"><a href="#安装lrzsz" class="headerlink" title="安装lrzsz"></a>安装lrzsz</h3><p><img src="https://i.p04e.com/baid/i/2022/09/22/vxab.png"></p>
<h3 id="手动部署项目"><a href="#手动部署项目" class="headerlink" title="手动部署项目"></a>手动部署项目</h3><p><img src="https://i.p04e.com/baid/i/2022/09/22/ngn.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4k8s.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/4kcp.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/4k7c.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/1d3qa3.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/w00d.png"></p>
<h3 id="通过shell脚本自动部署项目"><a href="#通过shell脚本自动部署项目" class="headerlink" title="通过shell脚本自动部署项目"></a>通过shell脚本自动部署项目</h3><p><img src="https://i.p04e.com/baid/i/2022/09/22/vyu0.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/nhj.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/nho.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/10453.png"><br><img src="https://i.p04e.com/baid/i/2022/09/22/70t09.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo =================================</span><br><span class="line">echo  自动化部署脚本启动</span><br><span class="line">echo =================================</span><br><span class="line"></span><br><span class="line">echo 停止原来运行中的工程</span><br><span class="line">APP_NAME=helloworld</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Stop Process...&#x27;</span><br><span class="line">    kill -15 $tpid</span><br><span class="line">fi</span><br><span class="line">sleep 2</span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Kill Process!&#x27;</span><br><span class="line">    kill -9 $tpid</span><br><span class="line">else</span><br><span class="line">    echo &#x27;Stop Success!&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo 准备从Git仓库拉取最新代码</span><br><span class="line">cd /usr/local/helloworld</span><br><span class="line"></span><br><span class="line">echo 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line">echo 代码拉取完成</span><br><span class="line"></span><br><span class="line">echo 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=true`</span><br><span class="line"></span><br><span class="line">cd target</span><br><span class="line"></span><br><span class="line">echo 启动项目</span><br><span class="line">nohup java -jar helloworld-1.0-SNAPSHOT.jar &amp;&gt; helloworld.log &amp;</span><br><span class="line">echo 项目启动完成</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/vyxp.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/njj.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/njj_1.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/22/nj1.png"></p>
</mg>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>防火墙命令</tag>
        <tag>Tomcat</tag>
        <tag>Mysql</tag>
        <tag>lrzsz</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看ip地址出错，ens33不显示inet解决</title>
    <url>/2022/09/20/Linux%E6%9F%A5%E7%9C%8Bip%E5%9C%B0%E5%9D%80%E5%87%BA%E9%94%99%EF%BC%8Cens33%E4%B8%8D%E6%98%BE%E7%A4%BAinet%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>问题：在 CentOS7中输入 ip addr 时，没有显示出局域网 IP</p>
<span id="more"></span>
<p>一下午尝试了网上各种的修改方法，还是不可以，这里就不一一赘述了。</p>
<h5 id="有两种解决办法"><a href="#有两种解决办法" class="headerlink" title="有两种解决办法"></a>有两种解决办法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.暂时解决，重新启动虚拟机后ip地址还是会消失</span><br><span class="line"></span><br><span class="line">dhclient ens33  //ens33有时也是32，这里看自己具体的内容</span><br><span class="line"></span><br><span class="line">cd /etc/sysconfig/network-scripts/   </span><br><span class="line">ls</span><br><span class="line">进这个目录下可查看</span><br></pre></td></tr></table></figure>
<p>之后重启后发现ip地址继续隐藏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi/etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">改BOOTPROTO=static</span><br><span class="line">  ONBOOT=yes</span><br><span class="line">  </span><br><span class="line">  之后添加自己的网关掩码等等</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.p04e.com/baid/i/2022/09/20/7khnp.png"></p>
<h5 id="那怎么找到自己的DNS等等呢"><a href="#那怎么找到自己的DNS等等呢" class="headerlink" title="那怎么找到自己的DNS等等呢"></a>那怎么找到自己的DNS等等呢</h5><p><img src="https://i.p04e.com/baid/i/2022/09/20/5lp3.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/20/137wp.png"></p>
<p>以上为ip 掩码 网关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看文件</span><br><span class="line">/var/lib/dhclient/dhclient.leases</span><br></pre></td></tr></table></figure>
<p><img src="https://i.p04e.com/baid/i/2022/09/20/sqk.png"></p>
<p>即为DNS</p>
<p>此时填回ifcfg-ens33，再次 ip addr</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/20/7nc56.png"></p>
<p>出现inet!</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>inet</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从同步故障：Slave_SQL_Running:NO</title>
    <url>/2022/10/03/MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%95%85%E9%9A%9C%EF%BC%9ASlave-SQL-Running-NO/</url>
    <content><![CDATA[<p><img src="https://i.p04e.com/baid/i/2022/10/03/3jdmr.png"></p>
<p>Slave_SQL_Running: No</p>
<p>1.程序可能在slave上进行了写操作</p>
<p>2.也可能是slave机器重起后，事务回滚造成的.</p>
<p>一般是事务回滚造成的：</p>
<p>解决办法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave ;</span><br><span class="line">mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span><br><span class="line">mysql&gt; start slave ;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;------&#x27;,master_user=&#x27;xiaoming&#x27;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.----&#x27;,master_log_pos=---;</span><br></pre></td></tr></table></figure>
<p>——都是自己的</p>
<p><img src="https://i.p04e.com/baid/i/2022/10/03/ifdz.png"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
        <tag>主从复制</tag>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github做出一个属于自己的博客!</title>
    <url>/2022/08/26/hexo-github%E5%81%9A%E5%87%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    博客是按照我自己的方式通过hexo+github搭建出来的，最后的域名是从华为云购买。我会一步步的从初学者的角度向大家讲解，也会解决一些我碰到的问题 ，如果有些问题是在解决不了可以通过我的邮箱联系。</p>
<p><code>这一篇为整体的搭建，问题的解决会在最后</code></p>
<span id="more"></span>
<h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ul>
<li><p>下载<a href="http://nodejs.cn/download/">node.js</a>，node.js是使用和安装hexo。</p>
</li>
<li><p>下载<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">Git</a>,此脚本所有测试都在都在git bash上运行。</p>
</li>
<li><p>并且需要一个github账号</p>
<p>下载的步骤和环境的搭建自行百度就可以，非常简单。</p>
</li>
</ul>
<h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><ol>
<li>装完之后打开终端 win+r，然后cmd。</li>
</ol>
<p>2.输入指令回车查看版本号(新版的Node.js已自带npm，安装Node.js时会一起安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p><img src="/images/01.png"></p>
<p>出现版本号，说明你的电脑上已经有nodejs，npm安装成功</p>
<h4 id="准备hexo"><a href="#准备hexo" class="headerlink" title="准备hexo"></a>准备hexo</h4><p>在命令框里输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">////////////////</span><br><span class="line"></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p><img src="/images/02.png"></p>
<p>出现版本号即为安装成功！</p>
<h3 id="登录github"><a href="#登录github" class="headerlink" title="登录github"></a>登录github</h3><p><code>我们要做的就是利用Github的仓库作为我们hexo的一个服务器，将hexo的内容都装进这个仓库里面,让所有的人都可以访问。</code></p>
<h4 id="建仓"><a href="#建仓" class="headerlink" title="建仓"></a>建仓</h4><p>打开github，点击new新建仓库</p>
<p><img src="/images/03.png"></p>
<p><img src="/images/04.png"></p>
<p><code>注意：仓库的名字是有规定的，为自己的名字+.github.io,从上图也可看出。</code></p>
<p><img src="/images/05.png"></p>
<p> <code>跟着我的点，最后创建</code></p>
<p><img src="/images/06.png"></p>
<p>此时就已经建成功了。</p>
<h3 id="将github与本地进行绑定"><a href="#将github与本地进行绑定" class="headerlink" title="将github与本地进行绑定"></a>将github与本地进行绑定</h3><h4 id="设置密钥"><a href="#设置密钥" class="headerlink" title="设置密钥"></a>设置密钥</h4><p>​    随意进入一个文件中，在空白区域右键，点出Git bash here,输入如下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;  //注意在git里面想要粘贴时，右键Paste,此时输入的邮件地址为绑定的github账号的邮件地址</span><br></pre></td></tr></table></figure>
<p><img src="/images/07.png"></p>
<p><code>此时输入命令后四次回车如图即可，如果出现overwrite时输入 y</code></p>
<p><img src="/images/08.png"></p>
<p>在电脑的这个位置找见.ssh里面以.pub为结尾的文件，以笔记本打开。打开后ctrl  + a  /c</p>
<p>打开github</p>
<p><img src="/images/09.png"></p>
<p>打开Setting</p>
<p><img src="/images/10.png"></p>
<p>打开SSH and GPG keys ，在点绿色的New SSH key</p>
<p><img src="/images/11.png"></p>
<p>可以随便起一个名字，然后将复制的钥匙粘贴进下面的大框。</p>
<p>最后在原来的git命令行输入一下代码，确定是否绑定成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p> <img src="/images/12.png"></p>
<p>过程中有一次问答输入 yes ，最后出现 successfully即可。</p>
<h2 id="建立blog并且发布到Github"><a href="#建立blog并且发布到Github" class="headerlink" title="建立blog并且发布到Github"></a>建立blog并且发布到Github</h2><p>git在国外不稳定所以命令有时候还会有网络问题，多试两次或者选择换国内镜像源也可以。</p>
<p>创建一个自己的blog的空文件夹，进入后右键出git bush here；</p>
<p>输入一下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init       //初始化hexo  如果成功会发现自己的blog下面会多出很多的内容</span><br><span class="line"></span><br><span class="line">hexo s         //静态生成hexo本地的博客页面</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/13.png"></p>
<p>ctrl加点击<a href="http://localhost:4000">http://localhost:4000</a> 即可进入本地的hexo服务器</p>
<p>ctrl + c 即可停止服务器</p>
<p>进入你的blog文件找见下面的 _config.yml文件。打开后进入代码的最下面，将代码改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repository: </span><br><span class="line">  branch: main</span><br><span class="line">//注意冒号后面还有空格</span><br></pre></td></tr></table></figure>
<p><img src="/images/14.png"></p>
<p><img src="/images/15.png"></p>
<p>进入githun中的这个code，点击复制，然后粘贴在上面的 repository后 。</p>
<p>在你的博客文件夹下面点开git命令，输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save  </span><br><span class="line"></span><br><span class="line">hexo g   //生成页面</span><br><span class="line"></span><br><span class="line">hexo d    //上传文件至仓库，需要输入账号密码，在此处可能会出现网络不稳定问题，多试几次</span><br></pre></td></tr></table></figure>
<p><img src="/images/16.png"></p>
<p>这个为github的用户名，输入之后会在让输密码。。。。。。。注意此时不能在输密码，进入上面提到过的github里的setting ,找到左侧的Developer settings,点击开发者设置。</p>
<p><img src="/images/17.png"></p>
<p>点击 Generate new token 创建一个新的令牌。</p>
<p><img src="/images/18.png"></p>
<p>随意取一个名字，并将所有选项选上，点击生成令牌。<img src="/images/19.png"></p>
<p>复制此处的序列号令牌到弹出的提示输入密码框内。</p>
<p><img src="/images/20.png"></p>
<p>即为上传成功！<img src="/images/20.png"></p>
<p>此时仓库的内容就发生了变化。此时通过 <a href="https://你的git名字.github.io/">https://你的git名字.github.io/</a>      即可从网址访问。</p>
<p><img src="/images/21.png"></p>
<p>此时博客的搭建已经差不多了，剩下的时博客的页面主题的更换和域名的绑定</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题的更换与优化和域名的配置</title>
    <url>/2022/08/28/hexo%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9B%B4%E6%8D%A2%E4%B8%8E%E4%BC%98%E5%8C%96%E5%92%8C%E5%9F%9F%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、选择主题"><a href="#一、选择主题" class="headerlink" title="一、选择主题"></a>一、选择主题</h2><p>目前 Hexo 里面应用最多的主题基本就是 Next 主题了，我用的就是Next，另外它支持的插件和功能也极为丰富。</p>
<span id="more"></span>
<h2 id="二、下载主题"><a href="#二、下载主题" class="headerlink" title="二、下载主题"></a>二、下载主题</h2><p>我们可以直接到 Next 主题的 <a href="https://so.csdn.net/so/search?q=GitHub&amp;spm=1001.2101.3001.7020">GitHub</a> Repository 上把这个主题下载下来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/theme-next/hexo-theme-next</span><br></pre></td></tr></table></figure>
<p>命令行进入到blog项目的根目录，执行如下命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。<br>然后需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了</p>
<p>Next 主题内部也提供了一个配置文件，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p>
<h3 id="3-1-样式"><a href="#3-1-样式" class="headerlink" title="3.1 样式"></a>3.1 样式</h3><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>
<h3 id="3-2-favicon"><a href="#3-2-favicon" class="headerlink" title="3.2 favicon"></a>3.2 favicon</h3><p><code>https://realfavicongenerator.net/</code></p>
<p>avicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。<br>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span><br></pre></td></tr></table></figure>
<p>也可以将图标上传至网上通过链接获得</p>
<h4 id="3-2-1-将图片上传至网络"><a href="#3-2-1-将图片上传至网络" class="headerlink" title="3.2.1  将图片上传至网络"></a>3.2.1  将图片上传至网络</h4><p><code>[薄荷图床 首页 -图床外链生成器-亚马逊图片上传-无限流量-全球加速-无限数量-图片转链接-跨境电商图片空间-图片托管 (riyugo.com)](https://riyugo.com/)</code></p>
<p>上传后将路径改为地址即可</p>
<h3 id="3-3-avatar"><a href="#3-3-avatar" class="headerlink" title="3.3 avatar"></a>3.3 avatar</h3><p>将1.png 图片放置到 themes/next/source/images/1.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # In theme directory (source/images): /images/avatar.gif</span><br><span class="line">  # In site directory (source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/avatar.png</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure>
<h3 id="3-4-top"><a href="#3-4-top" class="headerlink" title="3.4 top"></a>3.4 top</h3><p>在浏览网页的时候，想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:	</span><br><span class="line">  enable: true	</span><br><span class="line">  # Back to top in sidebar.	</span><br><span class="line">  sidebar: false	</span><br><span class="line">  # Scroll percent label in b2t button.	</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>
<h3 id="3-5-reading-process"><a href="#3-5-reading-process" class="headerlink" title="3.5 reading_process"></a>3.5 reading_process</h3><p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度 ，修改_config.yml 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reading_progress:	</span><br><span class="line">  enable: true	</span><br><span class="line">  # Available values: top | bottom	</span><br><span class="line">  position: top	</span><br><span class="line">  color: &quot;#222&quot;	</span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure>
<h3 id="3-6-pangu"><a href="#3-6-pangu" class="headerlink" title="3.6 pangu"></a>3.6 pangu</h3><p>希望写中文和英文的时候中间必须要留有间距，一个简单直接的方法就是中间加个空格。</p>
<p>pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pangu: true</span><br></pre></td></tr></table></figure>
<h3 id="3-7-pjax"><a href="#3-7-pjax" class="headerlink" title="3.7 pjax"></a>3.7 pjax</h3><p>pjax 这个技术实际上就是，利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p>
<p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pjax: true</span><br></pre></td></tr></table></figure>
<p>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br></pre></td></tr></table></figure>
<h2 id="四、发布文章"><a href="#四、发布文章" class="headerlink" title="四、发布文章"></a>四、发布文章</h2><h3 id="4-1、增加文章"><a href="#4-1、增加文章" class="headerlink" title="4.1、增加文章"></a>4.1、增加文章</h3><p>需要调用 Hexo 提供的命令即可，比如我们要新建一篇「HelloWorld」的文章，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure>
<h3 id="4-2、个性化设置"><a href="#4-2、个性化设置" class="headerlink" title="4.2、个性化设置"></a>4.2、个性化设置</h3><h4 id="4-2-1-标签页"><a href="#4-2-1-标签页" class="headerlink" title="4.2.1 标签页"></a>4.2.1 标签页</h4><p>按上路径创建 <strong>index.md</strong> </p>
<p><img src="https://s1.plumeta.com/i/2022/08/29/p5vqdl.jpg" alt></p>
<p>里面输入内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:	</span><br><span class="line">  home: / || home	</span><br><span class="line">  #about: /about/ || user	</span><br><span class="line">  tags: /tags/ || tags	</span><br><span class="line">  #categories: /categories/ || th	</span><br><span class="line">  archives: /archives/ || archive	</span><br><span class="line">  #schedule: /schedule/ || calendar	</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap	</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分类页和标签页是一样的。</p>
<h4 id="4-2-2-搜索页"><a href="#4-2-2-搜索页" class="headerlink" title="4.2.2 搜索页"></a>4.2.2 搜索页</h4><p>我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p>
<p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后在项目的 _config.yml 里面添加搜索设置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:	</span><br><span class="line">  path: search.xml	</span><br><span class="line">  field: post	</span><br><span class="line">  format: html	</span><br><span class="line">  limit: 10000</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在主题的 _config.yml 里面修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search	</span><br><span class="line"># Dependencies: https://github.com/wzpan/hexo-generator-search	</span><br><span class="line">local_search:	</span><br><span class="line">  enable: true	</span><br><span class="line">  # If auto, trigger search by changing input.	</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.	</span><br><span class="line">  trigger: auto	</span><br><span class="line">  # Show top n results per article, show all results by setting to -1	</span><br><span class="line">  top_n_per_article: 5	</span><br><span class="line">  # Unescape html strings to the readable one.	</span><br><span class="line">  unescape: false	</span><br><span class="line">  # Preload the search data when the page loads.	</span><br><span class="line">  preload: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-404页面"><a href="#4-2-3-404页面" class="headerlink" title="4.2.3 404页面"></a>4.2.3 404页面</h4><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---	</span><br><span class="line">title: 404 Not Found	</span><br><span class="line">date: 2019-09-22 10:41:27	</span><br><span class="line">---	</span><br><span class="line"> </span><br><span class="line">	</span><br><span class="line">&lt;center&gt;	</span><br><span class="line">对不起，您所访问的页面不存在或者已删除。	</span><br><span class="line">您可以&lt;a href=&quot;   &quot;&gt;点击此处&lt;/a&gt;返回首页。	</span><br><span class="line">&lt;/center&gt;	</span><br><span class="line"> </span><br><span class="line">	</span><br><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;	</span><br><span class="line">    NightTeam	</span><br><span class="line">&lt;/blockquote&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里面的一些相关信息和链接可以替换成自己的。</p>
<h2 id="五、更新部署-amp-域名配置"><a href="#五、更新部署-amp-域名配置" class="headerlink" title="五、更新部署&amp;域名配置"></a>五、更新部署&amp;域名配置</h2><h3 id="5-1-Hexo更新"><a href="#5-1-Hexo更新" class="headerlink" title="5.1 Hexo更新"></a>5.1 Hexo更新</h3><p>通过博客上面的地址输入框进入  cmd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean	</span><br><span class="line">hexo generate	</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="5-2-自定义域名"><a href="#5-2-自定义域名" class="headerlink" title="5.2 自定义域名"></a>5.2 自定义域名</h3><p>我本人是在<a href="https://auth.huaweicloud.com/authui/login.html?service=https%3A%2F%2Fconsole.huaweicloud.com%2Fdns%2F%3FagencyId%3D1fb2d46c8a3e48dbbc4d41fb5b2cf34c%26region%3Dcn-east-3%26locale%3Dzh-cn%26cloud_route_state%3D%2Fdns%2Frecordset%2Fpublic%2Flist%3Fzoneid%3D8aace3b98282c2260182d8bd74236172%26zonename%3Dbaidu2001.top.%26zoneStatus%3DACTIVE#/login">华为云</a>下面买的域名</p>
<p>在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，如图所示</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/02/74zzg.png"></p>
<p>下面有个 custom domain 的选项，输入想自定义的域名地址，然后添加 CNAME 解析就好了。</p>
<p>另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。</p>
<p>另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。<br>我就在 source 目录下新建了一个 CNAME 文件，内容为自己的域名</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/02/10q7p.png"></p>
<p>可以避免了每次部署的时候自定义域名被清除的情况了。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>域名</tag>
        <tag>图片的免费上传</tag>
      </tags>
  </entry>
  <entry>
    <title>java.sql.SQLSyntaxErrorException: Unknown column &#39;is_deleted&#39; in &#39;field list&#39;</title>
    <url>/2022/09/02/java-sql-SQLSyntaxErrorException-Unknown-column-is-deleted-in-field-list/</url>
    <content><![CDATA[<p><img src="https://i.p04e.com/baid/i/2022/09/02/58a7.png"></p>
<p>今天做的是一个分页查询，结果无法显示，回到idea下面查找问题</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">: Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exceptison is org.springframework.jdbc.BadSqlGrammarException: </span><br><span class="line"></span><br><span class="line">### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column &#x27;is_deleted&#x27; in &#x27;field list&#x27;</span><br><span class="line">其实最重要的是后面这句，很明显是sql的问题 ，大概意思就是不知道 is_deleted 在表格中的什么什么</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后我在实体类中找到了这句</span><br><span class="line">    //是否删除</span><br><span class="line">    private Integer isDeleted;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我刚开始以为是驼峰命名法不对，结果改了后还是不对。</p>
<p>之后再数据库中发现这个表中并没有 is_deleted这个字段，是另一个表内的，由于实体类是找的网上资源自己懒的写就弄了一个大乌龙，删除掉以后就好了。</p>
]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>redis软件安装和指令学习</title>
    <url>/2022/09/28/redis%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%92%8C%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h3><h4 id="什么是-Redis"><a href="#什么是-Redis" class="headerlink" title="什么是 Redis ?"></a>什么是 Redis ?</h4><p>Redis是一个基于内存的key-value结构数据库。</p>
<p>基于内存存储，读写性能高</p>
<p>适合存储热点数据（热点商品、资讯、新闻)企业应用广泛</p>
<span id="more"></span>
<h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, andmessage broker，翻译为:Redis是一个开源的内存中的数据结构存储系统，它可以用作:数据库、缓存和消息中间件。官网: <a href="https://redis.io">https://redis.io</a><br>Redis是用C语言开发的一个开源的高性能键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS（(每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化的NoSql数据库。<br>NoSql ( Not only sQL)，不仅仅是SQL，泛指非关系型数据库。NoSql数据库并不是要取代关系型数据库，而是关系型数据库的补充。</p>
<p>关系型数据库(RDBMS)</p>
<ul>
<li>Mysql</li>
<li>oracleDB2</li>
<li>sQLServer</li>
</ul>
<p>非关系型数据库(NoSql)</p>
<ul>
<li>Redis</li>
<li>Mongo </li>
<li>dbMemCached</li>
</ul>
<p>Redis应用场景</p>
<ul>
<li>缓存</li>
<li>任务队列</li>
<li>消息队列</li>
<li>分布式锁</li>
</ul>
<h4 id="Redis下载与安装"><a href="#Redis下载与安装" class="headerlink" title="Redis下载与安装"></a>Redis下载与安装</h4><p>Redis安装包分为windows版和Linux版:</p>
<p>Windows版下载地址:https:l/github.com/microsoftarchive/redis/releases</p>
<p>Linux版下载地址: <a href="https://download.redis.io/releasesl">https://download.redis.io/releasesl</a></p>
<p>在Linux系统安装Redis步骤:</p>
<p>1.将Redis安装包上传到Linux</p>
<p>⒉.解压安装包，命令: tar -zxvf redis-4.0.0.tar.gz-C /usr/local</p>
<p>3.安装Redis的依赖环境gcc，命令: yum install gcc-C++</p>
<p>4.进入/usr/local/redis-4.0.0，进行编译，命令: make</p>
<p>5.进入redis的src目录，进行安装，命令: make install</p>
<h4 id="Redis服务启动与停止"><a href="#Redis服务启动与停止" class="headerlink" title="Redis服务启动与停止"></a>Redis服务启动与停止</h4><p>Linux中redis服务启动，可以使用redis-server，默认端口号为6379</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/redis-server ./redis.conf</span><br><span class="line"></span><br><span class="line">src/redis-cli -p 6379 -a 123456</span><br><span class="line"></span><br><span class="line">//用本地服务器连接</span><br><span class="line">.\redis-cli.exe -h 192.168.81.128 -p 6379 -a 123456</span><br></pre></td></tr></table></figure>
<p>Ctrl+C停止Redis服务</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>介绍</p>
<p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型:</p>
<p>字符串string</p>
<p>哈希hash</p>
<p>列表list</p>
<p>集合set</p>
<p>有序集合sorted set</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/28/12m8f.png"></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="字符串string操作命令"><a href="#字符串string操作命令" class="headerlink" title="字符串string操作命令"></a>字符串string操作命令</h4><ul>
<li>SET key value    设置指定key的值</li>
<li>GET key    获取指定key的值</li>
<li>SETEX key seconds value    设置指定key的值，并将key 的过期时间设为seconds</li>
<li>SETNX key value    只有在key 不存在时设置key 的值</li>
</ul>
<h4 id="哈希hash操作命令"><a href="#哈希hash操作命令" class="headerlink" title="哈希hash操作命令"></a>哈希hash操作命令</h4><p>Redis hash 是一个string类型的field和value 的映射表，hash特别适合用于存储对象，常用命令:</p>
<ul>
<li>HSET key field value    将哈希表key 中的字段field的值设为value</li>
<li>HGET key field    获取存储在哈希表中指定字段的值</li>
<li>HDEL key field    删除存储在哈希表中的指定字段</li>
<li>HKEYS key    获取哈希表中所有字段</li>
<li>HVALS key    获取哈希表中所有值</li>
<li>HGETALL key    获取在哈希表中指定key的所有字段和值</li>
</ul>
<h4 id="列表list操作命令"><a href="#列表list操作命令" class="headerlink" title="列表list操作命令"></a>列表list操作命令</h4><ul>
<li><p>Redis列表是简单的字符串列表，按照插入顺序排序，常用命令:</p>
</li>
<li><p>LPUSH key value1 [value2]    将一个或多个值插入到列表头部</p>
</li>
<li><p>LRANGE key start stop    获取列表指定范围内的元素</p>
</li>
<li><p>RPOP key    移除并获取列表最后一个元素</p>
</li>
<li><p>LLEN key    获取列表长度</p>
</li>
<li><p>BRPOP key1 [key2 ] timeout    移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超</p>
<p>​                                   时或发现可弹出元素为止</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/28/sl9.png"></p>
</li>
</ul>
<h4 id="集合set操作命令"><a href="#集合set操作命令" class="headerlink" title="集合set操作命令"></a>集合set操作命令</h4><p>Redis set 是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令:</p>
<ul>
<li>SADD key member1 [member2]    向集合添加一个或多个成员</li>
<li>SMEMBERS key    返回集合中的所有成员</li>
<li>SCARD key    获取集合的成员数</li>
<li>SINTER key1 [key2]    返回给定所有集合的交集</li>
<li>SUNION key1 [key2]    返回所有给定集合的并集</li>
<li>SDIFF key1 [key2]    返回给定所有集合的差集</li>
<li>SREM key member1[member2]    移除集合中一个或多个成员</li>
</ul>
<p><img src="https://i.p04e.com/baid/i/2022/09/28/1h4x2d.png"></p>
<h4 id="有序集合sorted-set操作命令"><a href="#有序集合sorted-set操作命令" class="headerlink" title="有序集合sorted set操作命令"></a>有序集合sorted set操作命令</h4><p>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类</p>
<p>型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分</p>
<p>数却可以重复。常用命令:</p>
<ul>
<li>ZADD key score1 member1[score2 member2]    向有序集合添加一个或多个成员，或者更新已存在成员的分</li>
<li>数</li>
<li>ZRANGE key start stop [WITHSCORES]    通过索引区间返回有序集合中指定区间内的成员</li>
<li>zINCRBY key increment member    有序集合中对指定成员的分数加上增量increment</li>
<li>ZREM key member [member …]    移除有序集合中的一个或多个成员</li>
</ul>
<p><img src="https://i.p04e.com/baid/i/2022/09/28/7mbae.png"></p>
<h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><ul>
<li>KEYs pattern    查找所有符合给定模式( pattern)的 key</li>
<li>EXISTs key    检查给定key是否存在</li>
<li>TYPE key    返回key所储存的值的类型</li>
<li>TTL key    返回给定key的剩余生存时间(TTL, time to live)，以秒为单位</li>
<li>DEL key    该命令用于在key存在是删除key</li>
</ul>
<h3 id="在Java中操作Redis"><a href="#在Java中操作Redis" class="headerlink" title="在Java中操作Redis"></a>在Java中操作Redis</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Redis 的Java客户端很多，官方推荐的有三种:</p>
<ul>
<li>Jedis</li>
<li>Lettuce</li>
<li>Redisson</li>
</ul>
<p>Spring对Redis客户端进行了整合，提供了Spring Data Redis，在Spring Boot项目中还提供了对应的</p>
<p>Starter，即spring-boot-starter-data-redis</p>
<h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>Jedis的maven坐标:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupld&gt;redis.clients&lt;/groupld&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactld&gt;jedis&lt;lartifactld&gt;</span><br><span class="line"></span><br><span class="line">&lt;version&gt;2.8.O&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ dependency&gt;</span><br></pre></td></tr></table></figure>
<p>使用Jedis操作Redis的步骤:</p>
<ul>
<li>获取连接</li>
<li>执行操作</li>
<li>关闭连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用Jedis操作Redis</span><br><span class="line"> */</span><br><span class="line">public class JedisTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRedis()&#123;</span><br><span class="line">        //1 获取连接</span><br><span class="line">        Jedis jedis = new Jedis(&quot;localhost&quot;,6379);</span><br><span class="line">        </span><br><span class="line">        //2 执行具体的操作</span><br><span class="line">        jedis.set(&quot;username&quot;,&quot;xiaoming&quot;);</span><br><span class="line"></span><br><span class="line">        String value = jedis.get(&quot;username&quot;);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        //jedis.del(&quot;username&quot;);</span><br><span class="line"></span><br><span class="line">        jedis.hset(&quot;myhash&quot;,&quot;addr&quot;,&quot;bj&quot;);</span><br><span class="line">        String hValue = jedis.hget(&quot;myhash&quot;, &quot;addr&quot;);</span><br><span class="line">        System.out.println(hValue);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;);</span><br><span class="line">        for (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //3 关闭连接</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Spring Boot项目中，可以使用Spring Data Redis来简化Redis操作，maven坐标:</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">&lt;groupld&gt;org.springframework.boot&lt;/groupld&gt;</span><br><span class="line">&lt;artifactld&gt;spring-boot-starter-data-redis&lt;/artifactld&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>Spring Data Redis中提供了一个高度封装的类: RedisTemplate，针对jedis客户端中大量ap进行了归类封装,</p>
<p>将同一类型操作封装为operation接口，具体分类如下:</p>
<ul>
<li>valueOperations:简单K-V操作</li>
<li>SetOperations: set类型数据操作</li>
<li>ZSetOperations: zset类型数据操作</li>
<li>HashOperations:针对map类型的数据操作</li>
<li>Listoperations:针对list类型的数据操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: springdataredis_demo</span><br><span class="line">  #Redis相关配置</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    #password: 123456</span><br><span class="line">    database: 0 #操作的是0号数据库</span><br><span class="line">    jedis:</span><br><span class="line">      #Redis连接池配置</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8 #最大连接数</span><br><span class="line">        max-wait: 1ms #连接池最大阻塞等待时间</span><br><span class="line">        max-idle: 4 #连接池中的最大空闲连接</span><br><span class="line">        min-idle: 0 #连接池中的最小空闲连接</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.data.redis.connection.DataType;</span><br><span class="line">import org.springframework.data.redis.core.*;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class SpringDataRedisTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 操作String类型数据</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testString()&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(&quot;city123&quot;,&quot;beijing&quot;);</span><br><span class="line"></span><br><span class="line">        String value = (String) redisTemplate.opsForValue().get(&quot;city123&quot;);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(&quot;key1&quot;,&quot;value1&quot;,10l, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        Boolean aBoolean = redisTemplate.opsForValue().setIfAbsent(&quot;city1234&quot;, &quot;nanjing&quot;);</span><br><span class="line">        System.out.println(aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 操作Hash类型数据</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testHash()&#123;</span><br><span class="line">        HashOperations hashOperations = redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">        //存值</span><br><span class="line">        hashOperations.put(&quot;002&quot;,&quot;name&quot;,&quot;xiaoming&quot;);</span><br><span class="line">        hashOperations.put(&quot;002&quot;,&quot;age&quot;,&quot;20&quot;);</span><br><span class="line">        hashOperations.put(&quot;002&quot;,&quot;address&quot;,&quot;bj&quot;);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        String age = (String) hashOperations.get(&quot;002&quot;, &quot;age&quot;);</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        //获得hash结构中的所有字段</span><br><span class="line">        Set keys = hashOperations.keys(&quot;002&quot;);</span><br><span class="line">        for (Object key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获得hash结构中的所有值</span><br><span class="line">        List values = hashOperations.values(&quot;002&quot;);</span><br><span class="line">        for (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 操作List类型的数据</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testList()&#123;</span><br><span class="line">        ListOperations listOperations = redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">        //存值</span><br><span class="line">        listOperations.leftPush(&quot;mylist&quot;,&quot;a&quot;);</span><br><span class="line">        listOperations.leftPushAll(&quot;mylist&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        List&lt;String&gt; mylist = listOperations.range(&quot;mylist&quot;, 0, -1);</span><br><span class="line">        for (String value : mylist) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //获得列表长度 llen</span><br><span class="line">        Long size = listOperations.size(&quot;mylist&quot;);</span><br><span class="line">        int lSize = size.intValue();</span><br><span class="line">        for (int i = 0; i &lt; lSize; i++) &#123;</span><br><span class="line">            //出队列</span><br><span class="line">            String element = (String) listOperations.rightPop(&quot;mylist&quot;);</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 操作Set类型的数据</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testSet()&#123;</span><br><span class="line">        SetOperations setOperations = redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">        //存值</span><br><span class="line">        setOperations.add(&quot;myset&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        Set&lt;String&gt; myset = setOperations.members(&quot;myset&quot;);</span><br><span class="line">        for (String o : myset) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //删除成员</span><br><span class="line">        setOperations.remove(&quot;myset&quot;,&quot;a&quot;,&quot;b&quot;);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        myset = setOperations.members(&quot;myset&quot;);</span><br><span class="line">        for (String o : myset) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 操作ZSet类型的数据</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testZset()&#123;</span><br><span class="line">        ZSetOperations zSetOperations = redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">        //存值</span><br><span class="line">        zSetOperations.add(&quot;myZset&quot;,&quot;a&quot;,10.0);</span><br><span class="line">        zSetOperations.add(&quot;myZset&quot;,&quot;b&quot;,11.0);</span><br><span class="line">        zSetOperations.add(&quot;myZset&quot;,&quot;c&quot;,12.0);</span><br><span class="line">        zSetOperations.add(&quot;myZset&quot;,&quot;a&quot;,13.0);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        Set&lt;String&gt; myZset = zSetOperations.range(&quot;myZset&quot;, 0, -1);</span><br><span class="line">        for (String s : myZset) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //修改分数</span><br><span class="line">        zSetOperations.incrementScore(&quot;myZset&quot;,&quot;b&quot;,20.0);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        myZset = zSetOperations.range(&quot;myZset&quot;, 0, -1);</span><br><span class="line">        for (String s : myZset) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //删除成员</span><br><span class="line">        zSetOperations.remove(&quot;myZset&quot;,&quot;a&quot;,&quot;b&quot;);</span><br><span class="line"></span><br><span class="line">        //取值</span><br><span class="line">        myZset = zSetOperations.range(&quot;myZset&quot;, 0, -1);</span><br><span class="line">        for (String s : myZset) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通用操作，针对不同的数据类型都可以操作</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testCommon()&#123;</span><br><span class="line">        //获取Redis中所有的key</span><br><span class="line">        Set&lt;String&gt; keys = redisTemplate.keys(&quot;*&quot;);</span><br><span class="line">        for (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断某个key是否存在</span><br><span class="line">        Boolean itcast = redisTemplate.hasKey(&quot;itcast&quot;);</span><br><span class="line">        System.out.println(itcast);</span><br><span class="line"></span><br><span class="line">        //删除指定key</span><br><span class="line">        redisTemplate.delete(&quot;myZset&quot;);</span><br><span class="line"></span><br><span class="line">        //获取指定key对应的value的数据类型</span><br><span class="line">        DataType dataType = redisTemplate.type(&quot;myset&quot;);</span><br><span class="line">        System.out.println(dataType.name());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Reids</tag>
      </tags>
  </entry>
  <entry>
    <title>白都的一封信</title>
    <url>/2022/08/26/%E4%BF%A1/</url>
    <content><![CDATA[<p>已至凌晨却无论如何都睡不着了，心里藏着很多事情。</p>
<span id="more"></span>
<hr>
<p>​    可对于已经发生过的事情，我们无能为力，能做好的只有接下来的事情。</p>
<p>​    <code>小时候经常仰望着星空，渴望着自己成为逆转时空的飞人</code></p>
<p>​    </p>
<hr>
<p>​    <code>黑还是白并不重要</code></p>
<hr>
<p>​    在痛苦开心的过程中会慢慢的触摸到心中真正的所想所愿。那是一种奇妙的感觉，很像是悟道一样的感觉。</p>
<p>​    <code>每天每天每月每月，实现那个梦</code></p>
<hr>
<p>​    生命的所有，都来自于想象力。</p>
<p>所有的可能，所有的道都来自于想象力。</p>
]]></content>
      <tags>
        <tag>念想</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客网站问题解决</title>
    <url>/2022/08/29/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="一、Hexo-Next-实现全局播放背景音乐"><a href="#一、Hexo-Next-实现全局播放背景音乐" class="headerlink" title="一、Hexo + Next 实现全局播放背景音乐"></a>一、Hexo + Next 实现全局播放背景音乐</h2><p>进入网页版的网易云，进入你想选的歌单，按F12键进入开发人员工具，在元素里面 按ctrl + F 进行搜索生成外链，</p>
<span id="more"></span>
<p>记住前面的那一行数字，新开一个网页输入</p>
<p><code>https://music.163.com/#/outchain/0/</code>733122887         并将那行数字加载在 / 的后面。</p>
<p>打开我们主题文件：<code>themes\next\layout\_macro\sidebar.swig</code>找到<code>sidebar-inner</code>，复制下面代码粘贴到此<code>&lt;div&gt;</code>标签后即可。</p>
<ul>
<li>打开<code>themes\next\layout</code>文件夹找到<code>_layout.swig</code></li>
<li>在<code>&lt;\head&gt;</code>标签前添加下面代码，并保存。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;   //粘贴到这里</span><br><span class="line">    </span><br><span class="line">  &lt;!--pjax：防止跳转页面音乐暂停--&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">&lt;/head&gt; </span><br></pre></td></tr></table></figure>
<ul>
<li>在主题的配置文件中找到<code>pajx</code>，将它设置为<code>true</code>，并保存。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>
<h2 id="二、部署hexo时遇到报错ERROR-Deployer-not-found-git"><a href="#二、部署hexo时遇到报错ERROR-Deployer-not-found-git" class="headerlink" title="二、部署hexo时遇到报错ERROR Deployer not found: git"></a>二、部署hexo时遇到报错ERROR Deployer not found: git</h2><p>这是因为没有安装<code>hexo-deployer-git</code>插件,在<strong>站点目录</strong>下输入下面的命令安装插件就好了。执行下面这行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="三、使用命令npm-install-g-hexo-cli-安装Hexo报错bash-hexo-command-not-found问题解决"><a href="#三、使用命令npm-install-g-hexo-cli-安装Hexo报错bash-hexo-command-not-found问题解决" class="headerlink" title="三、使用命令npm install -g hexo-cli 安装Hexo报错bash: hexo: command not found问题解决"></a>三、使用命令npm install -g hexo-cli 安装Hexo报错bash: hexo: command not found问题解决</h2><p>选择一个磁盘，简历一个文件夹，取名为blog</p>
<p>然后按照下面的指令一步步输入</p>
<p><strong>在命令的前面加上npx。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">npx hexo server</span><br></pre></td></tr></table></figure>
<p>最后解释一下，为啥要在前面加上npx。</p>
<p>在大牛<a href="http://www.ruanyifeng.com/blog/2019/02/npx.html">阮一峰的网络日志</a>中，他是这么描述的：“<strong>npx 想要解决的主要问题，就是调用项目内部安装的模块</strong>”，所以可以理解为在命令行下调用，可以让项目内部安装的模块用起来更方便，npx运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。</p>
<p>如果还是不可以就手动加载路径</p>
<p>注意你的博客目录下应该有两个 <code>node_modules</code> 文件夹，要添加到 Path 里面的是与 _config.yml 在同一个目录的 node_modules 文件夹！</p>
<p>环境变量添加好了之后重新打开 git 即可运行 hexo 命令，如果此时仍然无法执行 hexo 命令，那就只能拿出终极绝招了，运行命令 <code>npm install hexo-cli -g</code> 重新安装 hexo 即可！</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台删除套餐</title>
    <url>/2022/09/14/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E5%88%A0%E9%99%A4%E5%A5%97%E9%A4%90/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>在套餐管理列表页面点击删除按钮，可以删除对应的套餐信息。也可以通过复选框选择多个套餐，点击批量删除按钮一次删除多个套餐。注意，对于状态为售卖中的套餐不能删除，需要先停售，然后才能删除。</p>
<span id="more"></span>
<h3 id="二、代码开发-梳理交互过程"><a href="#二、代码开发-梳理交互过程" class="headerlink" title="二、代码开发-梳理交互过程"></a>二、代码开发-梳理交互过程</h3><p>在开发代码之前，需要梳理一下删除套餐时前端页面和服务端的交互过程:</p>
<p>1、删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/15/2lii.png"></p>
<p>2、删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/15/i6q6.png"></p>
<p>开发删除套餐功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<p>观察删除单个套餐和批量删除套餐的请求信息可以发现，两种请求的地址和请求方式都是相同的，不同的则是传递的id个数，所以在服务端可以提供一个方法来统一处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.dto.SetmealDto;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface SetmealService extends IService&lt;Setmeal&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 新增套餐，同时需要保存套餐和菜品的关系</span><br><span class="line">     * @param setmealDto</span><br><span class="line">     */</span><br><span class="line">    public void saveWithDish(SetmealDto setmealDto);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除套餐，同时需要删除套餐和菜品的关联数据</span><br><span class="line">     * @param ids</span><br><span class="line">     */</span><br><span class="line">    public void removeWithDish(List&lt;Long&gt; ids);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span><br><span class="line"> * @param ids</span><br><span class="line"> */</span><br><span class="line">@Transactional</span><br><span class="line">public void removeWithDish(List&lt;Long&gt; ids) &#123;</span><br><span class="line">    //select count(*) from setmeal where id in (1,2,3) and status = 1</span><br><span class="line">    //查询套餐状态，确定是否可用删除</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = new LambdaQueryWrapper();</span><br><span class="line">    queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,1);</span><br><span class="line"></span><br><span class="line">    int count = this.count(queryWrapper);</span><br><span class="line">    if(count &gt; 0)&#123;</span><br><span class="line">        //如果不能删除，抛出一个业务异常</span><br><span class="line">        throw new CustomException(&quot;套餐正在售卖中，不能删除&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果可以删除，先删除套餐表中的数据---setmeal</span><br><span class="line">    this.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    //delete from setmeal_dish where setmeal_id in (1,2,3)</span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">    //删除关系表中的数据----setmeal_dish</span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 删除套餐</span><br><span class="line"> * @param ids</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@DeleteMapping</span><br><span class="line">public R&lt;String&gt; delete(@RequestParam List&lt;Long&gt; ids)&#123;</span><br><span class="line">    log.info(&quot;ids:&#123;&#125;&quot;,ids);</span><br><span class="line"></span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line"></span><br><span class="line">    return R.success(&quot;套餐数据删除成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>删除套餐</tag>
        <tag>mybatis plus</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台修改菜品</title>
    <url>/2022/09/12/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%93%81/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>在菜品管理列表页面点击修改按钮，跳转到修改菜品页面，在修改页面回显菜品相关信息并进行修改，最后点击确定按钮完成修改操作</p>
<span id="more"></span>
<h3 id="二、修改菜品"><a href="#二、修改菜品" class="headerlink" title="二、修改菜品"></a>二、修改菜品</h3><h4 id="代码开发-梳理交互过程"><a href="#代码开发-梳理交互过程" class="headerlink" title="代码开发-梳理交互过程"></a>代码开发-梳理交互过程</h4><p>在开发代码之前，需要梳理一下修改菜品时前端页面( add.html)和服务端的交互过程:</p>
<p>1、页面发送ajax请求，请求服务端获取分类数据，用于菜品分类下拉框中数据展示</p>
<p>2、页面发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</p>
<p>3、页面发送请求，请求服务端进行图片下载，用于页图片回显</p>
<p>4、点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</p>
<p><code>开发修改菜品功能，其实就是在服务端编写代码去处理前端页面发送的这4次请求即可。</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line"></span><br><span class="line">public interface DishService extends IService&lt;Dish&gt; &#123;</span><br><span class="line"></span><br><span class="line">    //新增菜品，同时插入菜品对应的口味数据，需要同时操作两张表： dish,dish_flavor</span><br><span class="line">    public void saveWithFlavor(DishDto dishDto);</span><br><span class="line"></span><br><span class="line">    //根据id来查询菜品信息和对应的口味信息</span><br><span class="line">    public DishDto getByIdwithFlavor(Long id);</span><br><span class="line"></span><br><span class="line">    //更新菜品信息，同时更新对应的口味信息</span><br><span class="line">    public void updateWithFlaovr(DishDto dishDto);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.entity.DishFlavor;</span><br><span class="line">import com.itheima.reggie.mapper.DishMapper;</span><br><span class="line">import com.itheima.reggie.service.DishFlavorService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishServiceImpl extends ServiceImpl&lt;DishMapper,Dish&gt; implements DishService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增菜品，同时保存对应的口味数据</span><br><span class="line">     * @param dishDto</span><br><span class="line">     */</span><br><span class="line">    @Transactional</span><br><span class="line">    public void saveWithFlavor(DishDto dishDto) &#123;</span><br><span class="line">        //保存菜品的基本信息到菜品表dish</span><br><span class="line">        this.save(dishDto);</span><br><span class="line"></span><br><span class="line">        Long dishId = dishDto.getId();//菜品id</span><br><span class="line"></span><br><span class="line">        //菜品口味</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishId);</span><br><span class="line">            return item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        //保存菜品口味数据到菜品口味表dish_flavor</span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询菜品信息和对应的口味信息</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public DishDto getByIdwithFlavor(Long id) &#123;</span><br><span class="line">        //查询菜品基本信息，从dish表查询</span><br><span class="line">        Dish dish = this.getById(id);</span><br><span class="line"></span><br><span class="line">        DishDto dishDto = new DishDto();</span><br><span class="line">        BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">        //查询当前菜品对应的口味信息，从dish_flavor表查询</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">        return dishDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Transactional</span><br><span class="line">    public void updateWithFlaovr(DishDto dishDto) &#123;</span><br><span class="line">        //更新dish表基本信息</span><br><span class="line">        this.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">        //清理当前菜品对应口味数据---dish_flavor表的delete操作</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = new LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        //添加当前提交过来的口味数据---dish_flavor表的insert操作</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">        flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishDto.getId());</span><br><span class="line">            return item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import com.itheima.reggie.service.DishFlavorService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/dish&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DishService dishService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增菜品</span><br><span class="line">     * @param dishDto</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody DishDto dishDto) &#123;</span><br><span class="line"></span><br><span class="line">        log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dishService.saveWithFlavor(dishDto);</span><br><span class="line">        return R.success(&quot;新增菜品成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 菜品信息分页</span><br><span class="line">     * @param page</span><br><span class="line">     * @param pageSize</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/page&quot;)</span><br><span class="line">    public R&lt;Page&gt; page(int page, int pageSize, String name) &#123;</span><br><span class="line"></span><br><span class="line">        //构造分页构造器</span><br><span class="line">        Page&lt;Dish&gt; pageInfo = new Page&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = new Page&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //条件构造器</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //添加过滤条件</span><br><span class="line">        queryWrapper.like(name != null,Dish::getName, name);</span><br><span class="line"></span><br><span class="line">        //添加排序条件</span><br><span class="line">        queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        //执行分页查询</span><br><span class="line">        dishService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">        //对象拷贝</span><br><span class="line">        BeanUtils.copyProperties(pageInfo,dishDtoPage,&quot;records&quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">        List&lt;DishDto&gt; list = records.stream().map((item) -&gt;  &#123;</span><br><span class="line">            DishDto dishDto = new DishDto();</span><br><span class="line"></span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">            Long categoryId = item.getCategoryId();</span><br><span class="line"></span><br><span class="line">            //根据id查询分类对象</span><br><span class="line">            Category category = categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">            if (category != null) &#123;</span><br><span class="line">                String categoryName = category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return R.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public R&lt;DishDto&gt; get(@PathVariable Long id) &#123;</span><br><span class="line"></span><br><span class="line">        DishDto dishDto = dishService.getByIdwithFlavor(id);</span><br><span class="line"></span><br><span class="line">        return R.success(dishDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改菜品</span><br><span class="line">     * @param dishDto</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PutMapping</span><br><span class="line">    public R&lt;String&gt; update(@RequestBody DishDto dishDto) &#123;</span><br><span class="line"></span><br><span class="line">        log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dishService.updateWithFlaovr(dishDto);</span><br><span class="line"></span><br><span class="line">        return R.success(&quot;修改菜品成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询对应的菜品数据</span><br><span class="line">     * @param dish</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/list&quot;)</span><br><span class="line">    public R&lt;List&lt;Dish&gt;&gt; list(Dish dish) &#123;</span><br><span class="line"></span><br><span class="line">        //构造查询条件</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != null , Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">        //查询状态为1</span><br><span class="line">        queryWrapper.eq(Dish::getStatus,1);</span><br><span class="line">        //添加一个排序条件</span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">        return R.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>修改菜品</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台套餐信息分页查询</title>
    <url>/2022/09/14/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E5%A5%97%E9%A4%90%E4%BF%A1%E6%81%AF%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<span id="more"></span>
<h3 id="二、代码开发-梳理交互过程"><a href="#二、代码开发-梳理交互过程" class="headerlink" title="二、代码开发-梳理交互过程"></a>二、代码开发-梳理交互过程</h3><p>在开发代码之前，需要梳理一下套餐分页查询时前端页面和服务端的交互过程:</p>
<p>1、页面(backend/page/combo/list.html)发送ajax请求，将分页查询参数(page. pageSize、</p>
<p>name)提交到服务端，获取分页数据</p>
<p>2、页面发送请求，请求服务端进行图片下载，用于页面图片展示</p>
<p>开发套餐信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *套餐分页查询</span><br><span class="line">     * @param page</span><br><span class="line">     * @param pageSize</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/page&quot;)</span><br><span class="line">    public R&lt;Page&gt; page(int page, int pageSize, String name) &#123;</span><br><span class="line">        //分页构造器对象</span><br><span class="line">        Page&lt;Setmeal&gt; pageInfo = new Page&lt;&gt;(page, pageSize);</span><br><span class="line">        Page&lt;SetmealDto&gt; dtoPage = new Page&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //添加查询条件，根据name进行like模糊查询</span><br><span class="line">        queryWrapper.like(name != null, Setmeal::getName, name);</span><br><span class="line">        //添加排序条件，根据更新时间降序排列</span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        //对象拷贝</span><br><span class="line">        BeanUtils.copyProperties(pageInfo, dtoPage,&quot;records&quot;);</span><br><span class="line">        List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">            SetmealDto setmealDto = new SetmealDto();</span><br><span class="line">            //对象拷贝</span><br><span class="line">            BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">            //分类id</span><br><span class="line">            Long categoryId = item.getCategoryId();</span><br><span class="line">            //根据分类id查询分类对象</span><br><span class="line">            Category category = categoryService.getById(categoryId);</span><br><span class="line">            if (category != null) &#123;</span><br><span class="line">                //分类名称</span><br><span class="line">                String categoryName = category.getName();</span><br><span class="line">                setmealDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            return setmealDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dtoPage.setRecords(list);</span><br><span class="line">        return R.success(dtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>套餐信息分页查询</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台文件上传下载</title>
    <url>/2022/09/09/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="一、文件上传介绍"><a href="#一、文件上传介绍" class="headerlink" title="一、文件上传介绍"></a>一、文件上传介绍</h3><p>文件上传，也称为upload，是指将本地图片、视频、音频等文件上传到服务器上，可以供其他用户浏览或下载的过程。文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p>
<span id="more"></span>
<p>文件上传时，对页面的form表单有如下要求:</p>
<ul>
<li><p>method=”post”              采用post方式提交数据</p>
</li>
<li><p>enctype=”multipart/form-data”            采用multipart格式上传文件</p>
</li>
<li><p>type=”file”        使用input的file控件上传</p>
</li>
</ul>
<p>  举例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot;action=&quot; /common/upload&quot; enctype=&quot;multipart/form-data&quot;&gt;&lt;input name=&quot;myFile&quot; type=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>目前一些前端组件库也提供了相应的上传组件，但是底层原理还是基于form表单的文件上传。例如ElementUI中提供的upload上传组件:</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/09/13n.png"></p>
<p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件:</p>
<ul>
<li>commons-fileupload</li>
<li>commons-io</li>
</ul>
<p>Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个MultipartFile类型的参数即可接收上传的文件，例如:</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/09/1oku.png"></p>
<p>文件下载，也称为download，是指将文件从服务器传输到本地计算机的过程。</p>
<p>通过浏览器进行文件下载，通常有两种表现形式:</p>
<p>以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录直接在浏览器中打开</p>
<p>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程。</p>
<p>文件上传，页面端可以使用ElementUI提供的上传组件。</p>
<p>可以直接使用资料中提供的上传页面，位置:资料/文件上传下载页面/upload.html</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/09/3h39j.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件上传和下载</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/common&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class CommonController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;reggie.path&#125;&quot;)</span><br><span class="line">    private String basePath;</span><br><span class="line">    /**</span><br><span class="line">     * 文件上传</span><br><span class="line">     * @param file</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/upload&quot;)</span><br><span class="line">    public R&lt;String&gt; upload (MultipartFile file) &#123;</span><br><span class="line">        //file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件将被删除</span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        //获得原始文件名</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        String suffix = originalFilename.substring((originalFilename.lastIndexOf(&quot;.&quot;)));</span><br><span class="line"></span><br><span class="line">        //使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span><br><span class="line">        String fileName = UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        //创建一个目录对象</span><br><span class="line">        File dir = new File(basePath);</span><br><span class="line">        //判断目录是否存在</span><br><span class="line">        if (!dir.exists()) &#123;</span><br><span class="line">            //目录不存在需要创建</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            file.transferTo(new File(basePath + fileName));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="二、文件上传下载"><a href="#二、文件上传下载" class="headerlink" title="二、文件上传下载"></a>二、文件上传下载</h3><p><code>文件下载代码实现</code></p>
<p>文件下载，页面端可以使用<img>标签展示下载的图片</p>
<p><img v-if="imageUrl" :src="imageUr1" class="avatar"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">handleAvatarSuccess (response，file，fileList) &#123;</span><br><span class="line">this. imageUrl =`/common/download?name=$ &#123;response.data&#125;`</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件下载</span><br><span class="line"> * @param name</span><br><span class="line"> * @param response</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/download&quot;)</span><br><span class="line">public void downLoad(String name, HttpServletResponse response) &#123;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        //输入流，通过输入流读取文件内容</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = new FileInputStream(new File(basePath + name));</span><br><span class="line"></span><br><span class="line">        //通过输出流将文件写回浏览器，在浏览器展示图片</span><br><span class="line"></span><br><span class="line">        ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        response.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line"></span><br><span class="line">        int len = 0;</span><br><span class="line">        byte[] bytes = new byte[1024];</span><br><span class="line">        while ( (len = fileInputStream.read(bytes)) != -1) &#123;</span><br><span class="line">            outputStream.write(bytes,0,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //关闭资源</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>文件上传下载</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台新增套餐</title>
    <url>/2022/09/13/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%96%B0%E5%A2%9E%E5%A5%97%E9%A4%90/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>套餐就是菜品的集合。</p>
<p>后台系统中可以管理套餐信息，通过新增套餐功能来添加一个新的套餐，在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片，在移动端会按照套餐分类来展示对应的套餐。</p>
<span id="more"></span>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表，还需要向setmeal_dish表插入套餐和菜品关联数据。</p>
<p>所以在新增套餐时，涉及到两个表:</p>
<p>setmeal    套餐表</p>
<p>setmeal_dish套餐菜品关系表</p>
<h3 id="二、代码开发-准备工作"><a href="#二、代码开发-准备工作" class="headerlink" title="二、代码开发 - 准备工作"></a>二、代码开发 - 准备工作</h3><p>在开发业务功能前,先将需要用到的类和接口基本结构创建好:</p>
<ul>
<li>实体类SetmealDish</li>
<li>DTO SetmealDto</li>
<li>Mapper接口SetmealDishMapper</li>
<li>业务层接口SetmealDishService</li>
<li>业务层实现类SetmealDishServicelmpl</li>
<li>控制层SetmealController</li>
</ul>
<h4 id="梳理交互过程"><a href="#梳理交互过程" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h4><p>在开发代码之前，需要梳理一下新增套餐时前端页面和服务端的交互过程:</p>
<p>1、页面(backend/page/comboladd.html)发送ajax请求，请求服务端获取套餐分类数据并展示到下拉框中2、页面发送ajax请求，请求服务端获取菜品分类数据并展示到添加菜品窗口中</p>
<p>3、页面发送ajax请求，请求服务端，根据菜品分类查询对应的菜品数据并展示到添加菜品窗口中</p>
<p>4、页面发送请求进行图片上传，请求服务端将图片保存到服务器</p>
<p>5、页面发送请求进行图片下载，将上传的图片进行回显</p>
<p>6、点击保存按钮，发送ajax请求，将套餐相关数据以json形式提交到服务端</p>
<p>开发新增套餐功能，其实就是在服务端编写代码去处理前端页面发送的这6次请求即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据条件查询对应的菜品数据</span><br><span class="line"> * @param dish</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">public R&lt;List&lt;Dish&gt;&gt; list(Dish dish) &#123;</span><br><span class="line"></span><br><span class="line">    //构造查询条件</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != null , Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    //查询状态为1</span><br><span class="line">    queryWrapper.eq(Dish::getStatus,1);</span><br><span class="line">    //添加一个排序条件</span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    return R.success(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.dto.SetmealDto;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import com.itheima.reggie.service.SetmealDishService;</span><br><span class="line">import com.itheima.reggie.service.SetmealService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 套餐管理</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/setmeal&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class SetmealController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealDishService setmealDishService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增套餐</span><br><span class="line">     * @param setmealDto</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody SetmealDto setmealDto)&#123;</span><br><span class="line">        log.info(&quot;套餐信息：&#123;&#125;&quot;,setmealDto);</span><br><span class="line"></span><br><span class="line">        setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">        return R.success(&quot;新增套餐成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.dto.SetmealDto;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line"></span><br><span class="line">public interface SetmealService extends IService&lt;Setmeal&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 新增套餐，同时需要保存套餐和菜品的关系</span><br><span class="line">     * @param setmealDto</span><br><span class="line">     */</span><br><span class="line">    public void saveWithDish(SetmealDto setmealDto);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.dto.SetmealDto;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line">import com.itheima.reggie.entity.SetmealDish;</span><br><span class="line">import com.itheima.reggie.mapper.SetmealMapper;</span><br><span class="line">import com.itheima.reggie.service.SetmealDishService;</span><br><span class="line">import com.itheima.reggie.service.SetmealService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class SetmealServiceImpl extends ServiceImpl&lt;SetmealMapper, Setmeal&gt; implements SetmealService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealDishService setmealDishService;</span><br><span class="line">    /**</span><br><span class="line">     * 新增套餐，同时需要保存套餐和菜品的关系</span><br><span class="line">     * @param setmealDto</span><br><span class="line">     */</span><br><span class="line">    @Transactional</span><br><span class="line">    public void saveWithDish(SetmealDto setmealDto) &#123;</span><br><span class="line">        //保存套餐的基本信息，执行insert操作</span><br><span class="line">        this.save(setmealDto);</span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setSetmealId(setmealDto.getId());</span><br><span class="line">            return item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        //保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span><br><span class="line">        setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>新增套餐</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台新增菜品</title>
    <url>/2022/09/10/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%93%81/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>后台系统中可以管理菜品信息，通过新增功能来添加一个新的菜品，在添加菜品时需要选择当前菜品所属的菜品分类，并且需要上传菜品图片，在移动端会按照菜品分类来展示对应的菜品信息。</p>
<span id="more"></span>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>新增菜品，其实就是将新增页面录入的菜品信息插入到dish表，如果添加了口味做法，还需要向dish_flavor表插入数据.所以在新增菜品时，涉及到两个表:</p>
<ul>
<li>dish    菜品表</li>
<li>dish_flavor菜品口味表</li>
</ul>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好︰</p>
<ul>
<li>实体类DishFlavor</li>
<li>Mapper接口DishFlavorMapper</li>
<li>业务层接口DishFlavorService</li>
<li>业务层实现类DishFlavorServicelmpl控制层DishController</li>
</ul>
<h3 id="二、代码开发-梳理交互过程"><a href="#二、代码开发-梳理交互过程" class="headerlink" title="二、代码开发-梳理交互过程"></a>二、代码开发-梳理交互过程</h3><p>在开发代码之前，需要梳理一下新增菜品时前端页面和服务端的交互过程:</p>
<p>代码开发-梳理交互过程<br>在开发代码之前，需要梳理一下新增菜品时前端页面和服务端的交互过程:</p>
<p> 1、页面(backend/page/food/add.html)发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</p>
<p>2、页面发送请求进行图片上传，请求服务端将图片保存到服务器<br>3、页面发送请求进行图片下载，将上传的图片进行回显<br>4、点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</p>
<p><code>开发新增菜品功能，其实就是在服务端编写代码去处理前端页面发送的这4次请求即可。</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询分类数据</span><br><span class="line">     * @param category</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/list&quot;)</span><br><span class="line">    public R&lt;List&lt;Category&gt;&gt; list(Category category) &#123;</span><br><span class="line">        //条件构造器</span><br><span class="line">LambdaQueryWrapper&lt;Category&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //添加条件</span><br><span class="line">queryWrapper.eq(category.getType() != null, Category::getType, category.getType());</span><br><span class="line">        //添加排序条件</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">        return R.success(list);</span><br></pre></td></tr></table></figure>
<h4 id="导入DTO"><a href="#导入DTO" class="headerlink" title="导入DTO"></a>导入DTO</h4><p>导入DishDto，用于封装页面提交的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class DishDto extends Dish &#123;</span><br><span class="line">private List&lt;DishFlavor&gt; flavors = new ArrayList&lt;&gt; () ;</span><br><span class="line">private String categoryName;</span><br><span class="line">private Integer copies;</span><br></pre></td></tr></table></figure>
<p><code>注意事项</code><br><code>DTO，全称为Data Transfer Object，即数据传输对象，一般用于展示层与服务层之同的数据传输。</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.dto;</span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.entity.DishFlavor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class DishDto extends Dish &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;DishFlavor&gt; flavors = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private String categoryName;</span><br><span class="line"></span><br><span class="line">    private Integer copies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.service.DishFlavorService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/dish&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DishService dishService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody DishDto dishDto) &#123;</span><br><span class="line"></span><br><span class="line">        log.info(dishDto.toString());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.entity.DishFlavor;</span><br><span class="line">import com.itheima.reggie.mapper.DishMapper;</span><br><span class="line">import com.itheima.reggie.service.DishFlavorService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishServiceImpl extends ServiceImpl&lt;DishMapper,Dish&gt; implements DishService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增菜品，同时保存对应的口味数据</span><br><span class="line">     * @param dishDto</span><br><span class="line">     */</span><br><span class="line">    @Transactional</span><br><span class="line">    public void saveWithFlavor(DishDto dishDto) &#123;</span><br><span class="line">        //保存菜品的基本信息到菜品表dish</span><br><span class="line">        this.save(dishDto);</span><br><span class="line"></span><br><span class="line">        Long dishId = dishDto.getId();//菜品id</span><br><span class="line"></span><br><span class="line">        //菜品口味</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishId);</span><br><span class="line">            return item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        //保存菜品口味数据到菜品口味表dish_flavor</span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询菜品信息和对应的口味信息</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public DishDto getByIdWithFlavor(Long id) &#123;</span><br><span class="line">        //查询菜品基本信息，从dish表查询</span><br><span class="line">        Dish dish = this.getById(id);</span><br><span class="line"></span><br><span class="line">        DishDto dishDto = new DishDto();</span><br><span class="line">        BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">        //查询当前菜品对应的口味信息，从dish_flavor表查询</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">        return dishDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Transactional</span><br><span class="line">    public void updateWithFlavor(DishDto dishDto) &#123;</span><br><span class="line">        //更新dish表基本信息</span><br><span class="line">        this.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">        //清理当前菜品对应口味数据---dish_flavor表的delete操作</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = new LambdaQueryWrapper();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        //添加当前提交过来的口味数据---dish_flavor表的insert操作</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">        flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishDto.getId());</span><br><span class="line">            return item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.service.DishFlavorService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/dish&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DishService dishService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody DishDto dishDto) &#123;</span><br><span class="line"></span><br><span class="line">        log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dishService.saveWithFlavor(dishDto);</span><br><span class="line">        return R.success(&quot;新增菜品成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@ServletComponentScan</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class ReggieApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(&quot;项目启动成功...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>新增菜品</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台短信发送</title>
    <url>/2022/09/14/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<h3 id="一、短信服务介绍"><a href="#一、短信服务介绍" class="headerlink" title="一、短信服务介绍"></a>一、短信服务介绍</h3><p>目前市面上有很多第三方提供的短信服务，这些第三方短信服务会和各个运营商（移动、联通、电信）对接，我们只需要注册成为会员并且按照提供的开发文档进行调用就可以发送短信。需要说明的是，这些短信服务一般都是收费服务。</p>
<span id="more"></span>
<p>常用短信服务:</p>
<ul>
<li>阿里云</li>
<li>华为云</li>
<li>腾讯云</li>
<li>京东</li>
<li>梦网</li>
<li>乐信</li>
</ul>
<h4 id="阿里云短信服务-介绍"><a href="#阿里云短信服务-介绍" class="headerlink" title="阿里云短信服务-介绍"></a>阿里云短信服务-介绍</h4><p>阿里云短信服务（Short Message Service)是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信;国内验证短信秒级触达，到达率最高可达99%;国际/港澳台短信覆盖200多个国家和地区，安全稳定，广受出海企业选用。</p>
<p>应用场景:</p>
<ul>
<li>验证码</li>
<li>短信通知</li>
<li>推广短信</li>
</ul>
<h4 id="阿里云短信服务-注册账号"><a href="#阿里云短信服务-注册账号" class="headerlink" title="阿里云短信服务-注册账号"></a>阿里云短信服务-注册账号</h4><p>阿里云官网: https:// www.aliyun.com/</p>
<p>点击官网首页注册按钮，跳转到如下注册页面:</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/18/uub.png"></p>
<h4 id="阿里云短信服务-设置短信签名"><a href="#阿里云短信服务-设置短信签名" class="headerlink" title="阿里云短信服务-设置短信签名"></a>阿里云短信服务-设置短信签名</h4><p>注册成功后，点击登录按钮进行登录。登录后进入短信服务管理页面，选择国内消息菜单:</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/18/n3tp.png"></p>
<p>短信签名是短信发送者的署名，表示发送方的身份。</p>
<h4 id="阿里云短信服务-设置短信模板"><a href="#阿里云短信服务-设置短信模板" class="headerlink" title="阿里云短信服务-设置短信模板"></a>阿里云短信服务-设置短信模板</h4><p>切换到【模板管理】标签页:</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/18/y3t7.png"></p>
<h4 id="阿里云短信服务-设置AccessKey"><a href="#阿里云短信服务-设置AccessKey" class="headerlink" title="阿里云短信服务-设置AccessKey"></a>阿里云短信服务-设置AccessKey</h4><p>光标移动到用户头像上，在弹出的窗口中点击【AccessKey管理】∶</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/18/2r.png"></p>
<p>选择子用户。</p>
<p>使用阿里云短信服务发送短信，可以参照官方提供的<a href="https://help.aliyun.com/product/44282.html?spm=5176.25163407.help.dexternal.51a7bb6e9O0uQU">文档</a>即可。</p>
<p>具体开发步骤:</p>
<p>1、导入maven坐标</p>
<p>2、调用API</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/18/9m94.png"></p>
<h3 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h3><p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能。<br>心</p>
<p>手机验证码登录的优点:</p>
<ul>
<li>方便快捷，无需注册，直接登录</li>
<li>使用短信验证码作为登录凭证，无需记忆密码</li>
<li>安全<br>登录流程:<br>输入手机号&gt;获取验证码&gt;输入验证码&gt;点击登录&gt;登录成功<br><code>注意:通过手机验证码登录，手机号是区分不同用户的标识。</code></li>
</ul>
<h4 id="三、代码开发-梳理交互过程"><a href="#三、代码开发-梳理交互过程" class="headerlink" title="三、代码开发-梳理交互过程"></a>三、代码开发-梳理交互过程</h4><p>在开发代码之前，需要梳理一下登录时前端页面和服务端的交互过程:</p>
<p>1、在登录页面(front/page/login.html)输入手机号，点击【获取验证码】按钮，页面发送ajax请求，在服务端调用短信服务API给指定手机号发送验证码短信</p>
<p>2、在登录页面输入验证码，点击【登录】按钮，发送ajax请求，在服务端处理登录请求</p>
<p>开发手机验证码登录功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:实体类User（</p>
<p>Mapper接口UserMapper</p>
<p>业务层接口UserService</p>
<p>业务层实现类UserServicelmpl控制层Usercontroller</p>
<p>工具类SMSutils、ValidateCodeutils</p>
<h4 id="代码开发-修改LoginCheckFilter"><a href="#代码开发-修改LoginCheckFilter" class="headerlink" title="代码开发-修改LoginCheckFilter"></a>代码开发-修改LoginCheckFilter</h4><p>前面我们已经完成了LoginCheckFilter过滤器的开发，此过滤器用于检查用户的登录状态。我们在进行手机验证码登录时，发送的请求需要在此过滤器处理时直接放行。</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/18/d0i.png"></p>
<p>在LoginCheckFilter过滤器中扩展逻辑，判断移动端用户登录状态:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//4-1、判断登录状态，如果已登录，则直接放行</span><br><span class="line">        if(request.getSession().getAttribute(&quot;employee&quot;) != null)&#123;</span><br><span class="line">            log.info(&quot;用户已登录，用户id为：&#123;&#125;&quot;,request.getSession().getAttribute(&quot;employee&quot;));</span><br><span class="line"></span><br><span class="line">            Long empId = (Long) request.getSession().getAttribute(&quot;employee&quot;);</span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line"></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //4-2、判断登录状态，如果已登录，则直接放行</span><br><span class="line">        if(request.getSession().getAttribute(&quot;user&quot;) != null)&#123;</span><br><span class="line">            log.info(&quot;用户已登录，用户id为：&#123;&#125;&quot;,request.getSession().getAttribute(&quot;user&quot;));</span><br><span class="line"></span><br><span class="line">            Long userId = (Long) request.getSession().getAttribute(&quot;user&quot;);</span><br><span class="line">            BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(&quot;用户未登录&quot;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.entity.User;</span><br><span class="line">import com.itheima.reggie.service.UserService;</span><br><span class="line">import com.itheima.reggie.utils.ValidateCodeUtils;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送手机短信验证码</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/sendMsg&quot;)</span><br><span class="line">    public R&lt;String&gt; sendMsg(@RequestBody User user, HttpSession session)&#123;</span><br><span class="line">        //获取手机号</span><br><span class="line">        String phone = user.getPhone();</span><br><span class="line"></span><br><span class="line">        if(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">            //生成随机的4位验证码</span><br><span class="line">            String code = ValidateCodeUtils.generateValidateCode(4).toString();</span><br><span class="line">            log.info(&quot;code=&#123;&#125;&quot;,code);</span><br><span class="line"></span><br><span class="line">            //调用阿里云提供的短信服务API完成发送短信</span><br><span class="line">            //SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span><br><span class="line"></span><br><span class="line">            //需要将生成的验证码保存到Session</span><br><span class="line">            session.setAttribute(phone,code);</span><br><span class="line"></span><br><span class="line">            return R.success(&quot;手机验证码短信发送成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return R.error(&quot;短信发送失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 移动端用户登录</span><br><span class="line">     * @param map</span><br><span class="line">     * @param session</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public R&lt;User&gt; login(@RequestBody Map map, HttpSession session)&#123;</span><br><span class="line">        log.info(map.toString());</span><br><span class="line"></span><br><span class="line">        //获取手机号</span><br><span class="line">        String phone = map.get(&quot;phone&quot;).toString();</span><br><span class="line"></span><br><span class="line">        //获取验证码</span><br><span class="line">        String code = map.get(&quot;code&quot;).toString();</span><br><span class="line"></span><br><span class="line">        //从Session中获取保存的验证码</span><br><span class="line">        Object codeInSession = session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">        //进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span><br><span class="line">        if(codeInSession != null &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">            //如果能够比对成功，说明登录成功</span><br><span class="line"></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(User::getPhone,phone);</span><br><span class="line"></span><br><span class="line">            User user = userService.getOne(queryWrapper);</span><br><span class="line">            if(user == null)&#123;</span><br><span class="line">                //判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span><br><span class="line">                user = new User();</span><br><span class="line">                user.setPhone(phone);</span><br><span class="line">                user.setStatus(1);</span><br><span class="line">                userService.save(user);</span><br><span class="line">            &#125;</span><br><span class="line">            session.setAttribute(&quot;user&quot;,user.getId());</span><br><span class="line">            return R.success(user);</span><br><span class="line">        &#125;</span><br><span class="line">        return R.error(&quot;登录失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>短信发送</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台用户下单</title>
    <url>/2022/09/19/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>移动端用户将菜品或者套餐加入购物车后，可以点击购物车中的去结算按钮，页面跳转到订单确认页面，点<br>击去支付按钮则完成下单操作。</p>
<span id="more"></span>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>用户下单业务对应的数据表为orders表和order_detail表:</p>
<ul>
<li>orders:订单表</li>
<li>order_detail:订单明细表</li>
</ul>
<h3 id="二、代码开发-梳理交互过程"><a href="#二、代码开发-梳理交互过程" class="headerlink" title="二、代码开发-梳理交互过程"></a>二、代码开发-梳理交互过程</h3><p>在开发代码之前，需要梳理一下用户下单操作时前端页面和服务端的交互过程:</p>
<p>1、在购物车中点击按钮，页面跳转到订单确认页面</p>
<p>2、在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的默认地址</p>
<p>3、在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的购物车数据</p>
<p>4、在订单确认页面点击去支付按钮，发送ajax请求，请求服务端完成下单操作</p>
<p>开发用户下单功能，其实就是在服务端编写代码去处理前端页面发送的请求即可。</p>
<h4 id="代码开发-准备工作"><a href="#代码开发-准备工作" class="headerlink" title="代码开发-准备工作"></a>代码开发-准备工作</h4><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:</p>
<ul>
<li>实体类Orders、OrderDetail </li>
<li>Mapper接口OrderMapper、OrderDetailMapper</li>
<li>业务层接口OrderService.OrderDetailService</li>
<li>业务层实现类QrderServicelmpl、OrderDetailServicelmpl</li>
<li>控制层OrderController、OrderDetailController</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.entity.Orders;</span><br><span class="line">import com.itheima.reggie.service.OrderService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 订单</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/order&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户下单</span><br><span class="line">     * @param orders</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/submit&quot;)</span><br><span class="line">    public R&lt;String&gt; submit(@RequestBody Orders orders)&#123;</span><br><span class="line">        log.info(&quot;订单数据：&#123;&#125;&quot;,orders);</span><br><span class="line">        orderService.submit(orders);</span><br><span class="line">        return R.success(&quot;下单成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.entity.Orders;</span><br><span class="line"></span><br><span class="line">public interface OrderService extends IService&lt;Orders&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户下单</span><br><span class="line">     * @param orders</span><br><span class="line">     */</span><br><span class="line">    public void submit(Orders orders);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.core.toolkit.IdWorker;</span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.common.BaseContext;</span><br><span class="line">import com.itheima.reggie.common.CustomException;</span><br><span class="line">import com.itheima.reggie.entity.*;</span><br><span class="line">import com.itheima.reggie.mapper.OrderMapper;</span><br><span class="line">import com.itheima.reggie.service.*;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderServiceImpl extends ServiceImpl&lt;OrderMapper, Orders&gt; implements OrderService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderDetailService orderDetailService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户下单</span><br><span class="line">     * @param orders</span><br><span class="line">     */</span><br><span class="line">    @Transactional</span><br><span class="line">    public void submit(Orders orders) &#123;</span><br><span class="line">        //获得当前用户id</span><br><span class="line">        Long userId = BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        //查询当前用户的购物车数据</span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">        if(shoppingCarts == null || shoppingCarts.size() == 0)&#123;</span><br><span class="line">            throw new CustomException(&quot;购物车为空，不能下单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //查询用户数据</span><br><span class="line">        User user = userService.getById(userId);</span><br><span class="line"></span><br><span class="line">        //查询地址数据</span><br><span class="line">        Long addressBookId = orders.getAddressBookId();</span><br><span class="line">        AddressBook addressBook = addressBookService.getById(addressBookId);</span><br><span class="line">        if(addressBook == null)&#123;</span><br><span class="line">            throw new CustomException(&quot;用户地址信息有误，不能下单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long orderId = IdWorker.getId();//订单号</span><br><span class="line"></span><br><span class="line">        AtomicInteger amount = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">            OrderDetail orderDetail = new OrderDetail();</span><br><span class="line">            orderDetail.setOrderId(orderId);</span><br><span class="line">            orderDetail.setNumber(item.getNumber());</span><br><span class="line">            orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">            orderDetail.setDishId(item.getDishId());</span><br><span class="line">            orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">            orderDetail.setName(item.getName());</span><br><span class="line">            orderDetail.setImage(item.getImage());</span><br><span class="line">            orderDetail.setAmount(item.getAmount());</span><br><span class="line">            amount.addAndGet(item.getAmount().multiply(new BigDecimal(item.getNumber())).intValue());</span><br><span class="line">            return orderDetail;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        orders.setId(orderId);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">        orders.setStatus(2);</span><br><span class="line">        orders.setAmount(new BigDecimal(amount.get()));//总金额</span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line">        orders.setNumber(String.valueOf(orderId));</span><br><span class="line">        orders.setUserName(user.getName());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setAddress((addressBook.getProvinceName() == null ? &quot;&quot; : addressBook.getProvinceName())</span><br><span class="line">                + (addressBook.getCityName() == null ? &quot;&quot; : addressBook.getCityName())</span><br><span class="line">                + (addressBook.getDistrictName() == null ? &quot;&quot; : addressBook.getDistrictName())</span><br><span class="line">                + (addressBook.getDetail() == null ? &quot;&quot; : addressBook.getDetail()));</span><br><span class="line">        //向订单表插入数据，一条数据</span><br><span class="line">        this.save(orders);</span><br><span class="line"></span><br><span class="line">        //向订单明细表插入数据，多条数据</span><br><span class="line">        orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">        //清空购物车数据</span><br><span class="line">        shoppingCartService.remove(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>用户下单</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台菜品信息分页查询</title>
    <url>/2022/09/11/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E8%8F%9C%E5%93%81%E4%BF%A1%E6%81%AF%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>系统中的菜品数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<span id="more"></span>
<h3 id="二、代码开发"><a href="#二、代码开发" class="headerlink" title="二、代码开发"></a>二、代码开发</h3><h4 id="梳理交互过程"><a href="#梳理交互过程" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h4><p>在开发代码之前，需要梳理一下菜品分页查询时前端页面和服务端的交互过程:</p>
<p>1、页面(backend/page/food/list.html)发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
<p>2、页面发送请求，请求服务端进行图片下载，用于页面图片展示</p>
<p>开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.dto.DishDto;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import com.itheima.reggie.service.DishFlavorService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.BeanUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/dish&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DishService dishService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody DishDto dishDto) &#123;</span><br><span class="line"></span><br><span class="line">        log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dishService.saveWithFlavor(dishDto);</span><br><span class="line">        return R.success(&quot;新增菜品成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 菜品信息分页</span><br><span class="line">     * @param page</span><br><span class="line">     * @param pageSize</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/page&quot;)</span><br><span class="line">    public R&lt;Page&gt; page(int page, int pageSize, String name) &#123;</span><br><span class="line"></span><br><span class="line">        //构造分页构造器</span><br><span class="line">        Page&lt;Dish&gt; pageInfo = new Page&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = new Page&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //条件构造器</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        //添加过滤条件</span><br><span class="line">        queryWrapper.like(name != null,Dish::getName, name);</span><br><span class="line"></span><br><span class="line">        //添加排序条件</span><br><span class="line">        queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        //执行分页查询</span><br><span class="line">        dishService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">        //对象拷贝</span><br><span class="line">        BeanUtils.copyProperties(pageInfo,dishDtoPage,&quot;records&quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">        List&lt;DishDto&gt; list = records.stream().map((item) -&gt;  &#123;</span><br><span class="line">            DishDto dishDto = new DishDto();</span><br><span class="line"></span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">            Long categoryId = item.getCategoryId();</span><br><span class="line"></span><br><span class="line">            //根据id查询分类对象</span><br><span class="line">            Category category = categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">            if (category != null) &#123;</span><br><span class="line">                String categoryName = category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return R.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>菜品信息分页查询</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台菜品展示</title>
    <url>/2022/09/19/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E8%8F%9C%E5%93%81%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<h3 id="一、菜品展示"><a href="#一、菜品展示" class="headerlink" title="一、菜品展示"></a>一、菜品展示</h3><p>用户登录成功后跳转到系统首页，在首页需要根据分类来展示菜品和套餐。如果菜品设置了口味信息，需要展示<code>选择规格</code>按钮，否则显示<code>+</code>按钮。</p>
<span id="more"></span>
<h3 id="二、代码开发-梳理交互过程"><a href="#二、代码开发-梳理交互过程" class="headerlink" title="二、代码开发-梳理交互过程"></a>二、代码开发-梳理交互过程</h3><p>在开发代码之前，需要梳理一下前端页面和服务端的交互过程:</p>
<p>在开发代码之前，需要梳理一下前端页面和服务端的交互过程:<br>1、页面(front/index.html)发送ajax请求，获取分类数据（菜品分类和套餐分类)</p>
<p>2、页面发送ajax请求，获取第一个分类下的菜品或者套餐</p>
<p>开发菜品展示功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<p>注意:首页加载完成后，还发送了一次ajax请求用于加载购物车数据，此处可以将这次请求的地址暂时修改一下，从静态json文件获取数据，等后续开发购物车功能时再修改回来，如下:</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/19/3puk7.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据条件查询对应的菜品数据</span><br><span class="line">     * @param dish</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    /*@GetMapping(&quot;/list&quot;)</span><br><span class="line">    public R&lt;List&lt;Dish&gt;&gt; list(Dish dish)&#123;</span><br><span class="line">        //构造查询条件</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != null ,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">        //添加条件，查询状态为1（起售状态）的菜品</span><br><span class="line">        queryWrapper.eq(Dish::getStatus,1);</span><br><span class="line"></span><br><span class="line">        //添加排序条件</span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        return R.success(list);</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/list&quot;)</span><br><span class="line">    public R&lt;List&lt;DishDto&gt;&gt; list(Dish dish)&#123;</span><br><span class="line">        //构造查询条件</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != null ,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">        //添加条件，查询状态为1（起售状态）的菜品</span><br><span class="line">        queryWrapper.eq(Dish::getStatus,1);</span><br><span class="line"></span><br><span class="line">        //添加排序条件</span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">            DishDto dishDto = new DishDto();</span><br><span class="line"></span><br><span class="line">            BeanUtils.copyProperties(item,dishDto);</span><br><span class="line"></span><br><span class="line">            Long categoryId = item.getCategoryId();//分类id</span><br><span class="line">            //根据id查询分类对象</span><br><span class="line">            Category category = categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">            if(category != null)&#123;</span><br><span class="line">                String categoryName = category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //当前菜品的id</span><br><span class="line">            Long dishId = item.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">            lambdaQueryWrapper.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">            //SQL:select * from dish_flavor where dish_id = ?</span><br><span class="line">            List&lt;DishFlavor&gt; dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">            dishDto.setFlavors(dishFlavorList);</span><br><span class="line">            return dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        return R.success(dishDtoList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据条件查询分类数据</span><br><span class="line"> * @param category</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">public R&lt;List&lt;Category&gt;&gt; list(Category category) &#123;</span><br><span class="line">    //条件构造器</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    //添加条件</span><br><span class="line">    queryWrapper.eq(category.getType() != null, Category::getType, category.getType());</span><br><span class="line">    //添加排序条件</span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">    return R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询套餐数据</span><br><span class="line">     * @param setmeal</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/list&quot;)</span><br><span class="line">    public R&lt;List&lt;Setmeal&gt;&gt; list(Setmeal setmeal)&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(setmeal.getCategoryId() != null,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">        queryWrapper.eq(setmeal.getStatus() != null,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        return R.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>菜品展示</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖管理平台购物车</title>
    <url>/2022/09/19/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    <content><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><p>移动端用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车;对于套餐来说，可以直接点击将当前套餐加入购物车。在购物车中可以修改菜品和套餐的数量，也可以清空购物车。</p>
<span id="more"></span>
<h3 id="二、代码开发-梳理交互过程"><a href="#二、代码开发-梳理交互过程" class="headerlink" title="二、代码开发-梳理交互过程"></a>二、代码开发-梳理交互过程</h3><p>在开发代码之前，需要梳理一下购物车操作时前端页面和服务端的交互过程:</p>
<p>1、点击加入购物或者按钮+，页面发送ajax请求，请求服务端，将菜品或者套餐添加到购物车</p>
<p>2、点击购物车图标，页面发送ajax请求，请求服务端查询购物车中的菜品和套餐</p>
<p>3、点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</p>
<p>开发购物车功能，其实就是在服务端编写代码去处理前端页面发送的这3次请求即可。</p>
<h4 id="代码开发-准备工作"><a href="#代码开发-准备工作" class="headerlink" title="代码开发-准备工作"></a>代码开发-准备工作</h4><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:</p>
<ul>
<li>实体类ShoppingCart(直接从课程资料中导入即可)</li>
<li>Mapper接口ShoppingCartMapper</li>
<li>业务层接口ShoppingCartservice</li>
<li>业务层实现类ShoppingCartServicelmpl控制层 ShoppingcartController</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.itheima.reggie.common.BaseContext;</span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.entity.ShoppingCart;</span><br><span class="line">import com.itheima.reggie.service.ShoppingCartService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 购物车</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/shoppingCart&quot;)</span><br><span class="line">public class ShoppingCartController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加购物车</span><br><span class="line">     * @param shoppingCart</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public R&lt;ShoppingCart&gt; add(@RequestBody ShoppingCart shoppingCart)&#123;</span><br><span class="line">        log.info(&quot;购物车数据:&#123;&#125;&quot;,shoppingCart);</span><br><span class="line"></span><br><span class="line">        //设置用户id，指定当前是哪个用户的购物车数据</span><br><span class="line">        Long currentId = BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">        Long dishId = shoppingCart.getDishId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line"></span><br><span class="line">        if(dishId != null)&#123;</span><br><span class="line">            //添加到购物车的是菜品</span><br><span class="line">            queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //添加到购物车的是套餐</span><br><span class="line">            queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //查询当前菜品或者套餐是否在购物车中</span><br><span class="line">        //SQL:select * from shopping_cart where user_id = ? and dish_id/setmeal_id = ?</span><br><span class="line">        ShoppingCart cartServiceOne = shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        if(cartServiceOne != null)&#123;</span><br><span class="line">            //如果已经存在，就在原来数量基础上加一</span><br><span class="line">            Integer number = cartServiceOne.getNumber();</span><br><span class="line">            cartServiceOne.setNumber(number + 1);</span><br><span class="line">            shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //如果不存在，则添加到购物车，数量默认就是一</span><br><span class="line">            shoppingCart.setNumber(1);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartService.save(shoppingCart);</span><br><span class="line">            cartServiceOne = shoppingCart;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return R.success(cartServiceOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查看购物车</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/list&quot;)</span><br><span class="line">    public R&lt;List&lt;ShoppingCart&gt;&gt; list()&#123;</span><br><span class="line">        log.info(&quot;查看购物车...&quot;);</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        return R.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 清空购物车</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @DeleteMapping(&quot;/clean&quot;)</span><br><span class="line">    public R&lt;String&gt; clean()&#123;</span><br><span class="line">        //SQL:delete from shopping_cart where user_id = ?</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        shoppingCartService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        return R.success(&quot;清空购物车成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>购物车</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖项目优化之使用git管理代码</title>
    <url>/2022/09/20/%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E4%B9%8B%E4%BD%BF%E7%94%A8git%E7%AE%A1%E7%90%86%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="一、配置ssh公钥"><a href="#一、配置ssh公钥" class="headerlink" title="一、配置ssh公钥"></a>一、配置ssh公钥</h3><p>在原来项目的基础上做出优化，先将代码移至gitee好管理代码。</p>
<span id="more"></span>
<h4 id="先配置好ssh公钥"><a href="#先配置好ssh公钥" class="headerlink" title="先配置好ssh公钥"></a>先配置好ssh公钥</h4><ul>
<li>在GitBash界面按照如下命令生成公匙</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>按照提示完成三次回车，即可生成 ssh key。</p>
</li>
<li><p>通过查看 ~/.ssh/id_rsa.pub文件内容，获取到你的 public key。</p>
</li>
<li><p>复制id_rsa.pub文件中中生成的sshkey</p>
</li>
<li><p>在 [个人用户] -&gt; [设置] -&gt; [安全设置] -&gt; [ssh公匙] 页面添加sshkey</p>
</li>
<li><p>将复制的sshkey添加到公匙输入框中，设置标题，确定即可添加公匙</p>
<h4 id="验证ssh公匙"><a href="#验证ssh公匙" class="headerlink" title="验证ssh公匙"></a>验证ssh公匙</h4><p>输入<code>ssh -T git@gitee.com</code></p>
<p>首次使用需要确认并添加主机到本机SSH可信列表。<br> 若返回 Hi XXX! You’ve successfully authenticated, but Gitee.com does not provide shell access. 内容，则证明添加成功。</p>
</li>
</ul>
<h3 id="二、使用gitee管理代码"><a href="#二、使用gitee管理代码" class="headerlink" title="二、使用gitee管理代码"></a>二、使用gitee管理代码</h3><p><img src="https://i.p04e.com/baid/i/2022/09/20/l2.png"></p>
<p><img src="https://i.p04e.com/baid/i/2022/09/20/5kl7.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/sxj.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/t41.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在根目录下添加.gitgnore文件，因为不是所有的文件都需要上传到gitee</span><br><span class="line">.git</span><br><span class="line">logs</span><br><span class="line">rebel.xml</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">log.path_IS_UNDEFINED</span><br><span class="line">.DS_Store</span><br><span class="line">offline_user.md</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">nbproject/private/</span><br><span class="line">build/</span><br><span class="line">nbbuild/</span><br><span class="line">dist/</span><br><span class="line">nbdist/</span><br><span class="line">.nb-gradle/</span><br><span class="line">generatorConfig.xml</span><br><span class="line"></span><br><span class="line">### nacos ###</span><br><span class="line">third-party/nacos/derby.log</span><br><span class="line">third-party/nacos/data/</span><br><span class="line">third-party/nacos/work/</span><br><span class="line"></span><br><span class="line">file/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.p04e.com/baid/i/2022/09/20/aqjg.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/7w1.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/1j7t.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/23809.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/7w9.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/1j9d.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/7w3.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/237q6.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/ar6a.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/1jaq.png"><br><img src="https://i.p04e.com/baid/i/2022/09/20/ar1g.png"></p>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>使用git管理代码</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖项目优化之环境搭建</title>
    <url>/2022/09/20/%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>外卖管理平台新增分类代码开发</title>
    <url>/2022/09/02/%E5%A4%96%E5%8D%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E6%96%B0%E5%A2%9E%E5%88%86%E7%B1%BB%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="一、新增分类"><a href="#一、新增分类" class="headerlink" title="一、新增分类"></a>一、新增分类</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p>
<span id="more"></span>
<p>1、页面(backend/page/category/list.html)发送ajax请求，将新增分类窗口输入的数据以json形式提交到服务端</p>
<p>2、服务端Controller接收页面提交的数据并调用Service将数据进行保存</p>
<p>3、Service调用Mapper操作数据库，保存数据</p>
<p>可以先将大概的框架写出，后面在完善</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 分类</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class Category implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //类型 1 菜品分类 2 套餐分类</span><br><span class="line">    private Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //分类名称</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //顺序</span><br><span class="line">    private Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建时间</span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //更新时间</span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建人</span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //修改人</span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface CategoryMapper extends BaseMapper&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line"></span><br><span class="line">public interface CategoryService extends IService&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import com.itheima.reggie.mapper.CategoryMapper;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class CategoryServiceImpl extends ServiceImpl&lt;CategoryMapper, Category&gt; implements CategoryService &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/category&quot;)</span><br><span class="line">public class CategoryController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryService categoryService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到新增菜品分类和新增套餐分类请求的服务端地址和提交的json数据结构相同，所以服务端只需要提供一个方法统一处理即可：</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/02/5955.png"></p>
<h3 id="二、分类信息分页查询"><a href="#二、分类信息分页查询" class="headerlink" title="二、分类信息分页查询"></a>二、分类信息分页查询</h3><h4 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h4><p>系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<h4 id="2、代码开发"><a href="#2、代码开发" class="headerlink" title="2、代码开发"></a>2、代码开发</h4><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p>
<p>1、页面发送ajax请求，将分页查询参数(page.pageSize)提交到服务端</p>
<p>2、服务端Controller接收页面提交的数据并调用Service查询数据</p>
<p>3、Service调用Mapper操作数据库，查询分页数据</p>
<p>4、Controller将查询到的分页数据响应给页面</p>
<p>5、页面接收到分页数据并通过Elementul的Table组件展示到页面上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 分类管理</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/category&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class CategoryController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增分类</span><br><span class="line">     * @param category</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody Category category)&#123;</span><br><span class="line">        log.info(&quot;category:&#123;&#125;&quot;,category);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        return R.success(&quot;新增分类成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分页查询</span><br><span class="line">     * @param page</span><br><span class="line">     * @param pageSize</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/page&quot;)</span><br><span class="line">    public R&lt;Page&gt; page(int page,int pageSize)&#123;</span><br><span class="line">        //分页构造器</span><br><span class="line">        Page&lt;Category&gt; pageInfo = new Page&lt;&gt;(page,pageSize);</span><br><span class="line">        //条件构造器</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //添加排序条件，根据sort进行排序</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line"></span><br><span class="line">        //分页查询</span><br><span class="line">        categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">        return R.success(pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后就可以显示出来了。</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/02/5cgu.png"></p>
<h3 id="三、删除分类"><a href="#三、删除分类" class="headerlink" title="三、删除分类"></a>三、删除分类</h3><h4 id="1、需求分析-1"><a href="#1、需求分析-1" class="headerlink" title="1、需求分析"></a>1、需求分析</h4><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<h4 id="2、代码开发-1"><a href="#2、代码开发-1" class="headerlink" title="2、代码开发"></a>2、代码开发</h4><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p>
<p>1、页面发送ajax请求，将参数(id)提交到服务端</p>
<p>2、服务端Controller接收页面提交的数据并调用Service删除数据</p>
<p>3、Service调用Mapper操作数据库</p>
<p><img src="https://i.p04e.com/baid/i/2022/09/03/ycuv.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据id删除分类</span><br><span class="line"> * @param id</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@DeleteMapping</span><br><span class="line">public R&lt;String&gt; delete(Long id) &#123;</span><br><span class="line">    log.info(&quot;删除分类，id为：&#123;&#125;&quot;,id);</span><br><span class="line"></span><br><span class="line">    categoryService.removeById(id);</span><br><span class="line">    return R.success(&quot;分类信息删除成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、功能完善"><a href="#3、功能完善" class="headerlink" title="3、功能完善"></a>3、功能完善</h4><p>前面我们已经实现了根据id删除分类的功能，但是并没有检查删除的分类是否关联了菜品或者套餐，所以我们需要进行功能完善。</p>
<p>要完善分类删除功能，需要先准备基础的类和接口:1、实体类Dish和Setmeal (从课程资料中复制即可)</p>
<p>2、Mapper接口DishMapper和SetmealMapper</p>
<p>3、Service接口DishService和SetmealService</p>
<p>4、Service实现类DishServicelmpl和SetmealServicelmpl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 菜品</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class Dish implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //菜品名称</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //菜品分类id</span><br><span class="line">    private Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //菜品价格</span><br><span class="line">    private BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //商品码</span><br><span class="line">    private String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //图片</span><br><span class="line">    private String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //描述信息</span><br><span class="line">    private String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //0 停售 1 起售</span><br><span class="line">    private Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //顺序</span><br><span class="line">    private Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //是否删除</span><br><span class="line">    private Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.entity;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 套餐</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class Setmeal implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //分类id</span><br><span class="line">    private Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //套餐名称</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //套餐价格</span><br><span class="line">    private BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //状态 0:停用 1:启用</span><br><span class="line">    private Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //编码</span><br><span class="line">    private String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //描述信息</span><br><span class="line">    private String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //图片</span><br><span class="line">    private String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT)</span><br><span class="line">    private Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    private Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //是否删除</span><br><span class="line">    private Integer isDeleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface DishMapper extends BaseMapper&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface SetmealMapper extends BaseMapper&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line"></span><br><span class="line">public interface DishService extends IService&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line"></span><br><span class="line">public interface SetmealService extends IService&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.mapper.DishMapper;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class DishServiceImpl extends ServiceImpl&lt;DishMapper, Dish&gt; implements DishService &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line">import com.itheima.reggie.mapper.SetmealMapper;</span><br><span class="line">import com.itheima.reggie.service.SetmealService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class SetmealServiceImpl extends ServiceImpl&lt;SetmealMapper, Setmeal&gt; implements SetmealService &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line">import com.itheima.reggie.common.R;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 分类管理</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/category&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class CategoryController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增分类</span><br><span class="line">     * @param category</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody Category category)&#123;</span><br><span class="line">        log.info(&quot;category:&#123;&#125;&quot;,category);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        return R.success(&quot;新增分类成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分页查询</span><br><span class="line">     * @param page</span><br><span class="line">     * @param pageSize</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/page&quot;)</span><br><span class="line">    public R&lt;Page&gt; page(int page,int pageSize)&#123;</span><br><span class="line">        //分页构造器</span><br><span class="line">        Page&lt;Category&gt; pageInfo = new Page&lt;&gt;(page,pageSize);</span><br><span class="line">        //条件构造器</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //添加排序条件，根据sort进行排序</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line"></span><br><span class="line">        //分页查询</span><br><span class="line">        categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">        return R.success(pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id删除分类</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @DeleteMapping</span><br><span class="line">    public R&lt;String&gt; delete(Long id) &#123;</span><br><span class="line">        log.info(&quot;删除分类，id为：&#123;&#125;&quot;,id);</span><br><span class="line"></span><br><span class="line">        //categoryService.removeById(id);</span><br><span class="line">        categoryService.remove(id);</span><br><span class="line">        return R.success(&quot;分类信息删除成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">import com.itheima.reggie.common.CustomException;</span><br><span class="line">import com.itheima.reggie.entity.Category;</span><br><span class="line">import com.itheima.reggie.entity.Dish;</span><br><span class="line">import com.itheima.reggie.entity.Setmeal;</span><br><span class="line">import com.itheima.reggie.mapper.CategoryMapper;</span><br><span class="line">import com.itheima.reggie.service.CategoryService;</span><br><span class="line">import com.itheima.reggie.service.DishService;</span><br><span class="line">import com.itheima.reggie.service.SetmealService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class CategoryServiceImpl extends ServiceImpl&lt;CategoryMapper, Category&gt; implements CategoryService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DishService dishService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id删除分类,删除之前需要进行判断</span><br><span class="line">     * @param id</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void remove(Long id) &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //添加查询条件，根据分类id进行查询</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId, id);</span><br><span class="line">        int count1 = dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        //查询当前分类是否关联了菜品，如果已经关联，抛出一个业务异常</span><br><span class="line">        if (count1 &gt; 0) &#123;</span><br><span class="line">            //已经关联菜品，抛出一个业务异常</span><br><span class="line">            throw new CustomException(&quot;当前分类下关联了分类菜品，不能删除&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //查询当前分类是否关联了套餐，如果已经关联，抛出一个业务异常</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        int count2 = setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        if (count2 &gt; 0) &#123;</span><br><span class="line">            //已经关联套餐，抛出一个业务异常</span><br><span class="line">            throw new CustomException(&quot;当前分类下关联了套餐，不能删除&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //正常删除分类</span><br><span class="line">        super.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 自定义业务异常</span><br><span class="line"> */</span><br><span class="line">public class CustomException extends RuntimeException&#123;</span><br><span class="line">    public CustomException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLIntegrityConstraintViolationException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全局异常处理</span><br><span class="line"> */</span><br><span class="line">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span><br><span class="line">@ResponseBody</span><br><span class="line">@Slf4j</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 异常处理方法</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span><br><span class="line">    public R&lt;String&gt; exceptionHandler(SQLIntegrityConstraintViolationException ex)&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        if(ex.getMessage().contains(&quot;Duplicate entry&quot;))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(&quot; &quot;);</span><br><span class="line">            String msg = split[2] + &quot;已存在&quot;;</span><br><span class="line">            return R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return R.error(&quot;未知错误&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 异常处理方法</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @ExceptionHandler(CustomException.class)</span><br><span class="line">    public R&lt;String&gt; exceptionHandler(CustomException ex)&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        return R.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="四、修改分类"><a href="#四、修改分类" class="headerlink" title="四、修改分类"></a>四、修改分类</h3><h4 id="1、需求分析-2"><a href="#1、需求分析-2" class="headerlink" title="1、需求分析"></a>1、需求分析</h4><p>在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作</p>
<h4 id="2、代码开发-2"><a href="#2、代码开发-2" class="headerlink" title="2、代码开发"></a>2、代码开发</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据id修改分类信息</span><br><span class="line"> * @param category</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PutMapping</span><br><span class="line">public R&lt;String&gt; update(@RequestBody Category category)&#123;</span><br><span class="line">    log.info(&quot;修改分类信息：&#123;&#125;&quot;,category);</span><br><span class="line"></span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line"></span><br><span class="line">    return R.success(&quot;修改分类信息成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>springboot - 外卖平台</tag>
        <tag>项目开发</tag>
        <tag>mybatis plus</tag>
        <tag>新增分类</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker实用篇</title>
    <url>/2022/11/22/Docker%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Docker实用篇"><a href="#Docker实用篇" class="headerlink" title="Docker实用篇"></a>Docker实用篇</h1><span id="more"></span>
<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li>
</ul>
<h3 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li>依赖关系复杂，容易出现兼容性问题</li>
<li>开发、测试、生产环境有差异</li>
</ul>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731141907366.png" alt="image-20210731141907366"></p>
<p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p>
<h3 id="1-1-2-Docker解决依赖兼容问题"><a href="#1-1-2-Docker解决依赖兼容问题" class="headerlink" title="1.1.2.Docker解决依赖兼容问题"></a>1.1.2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p>
<p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p>
<ul>
<li>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</li>
<li>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</li>
</ul>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731142219735.png" alt="image-20210731142219735"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p>
<p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<h3 id="1-1-3-Docker解决操作系统环境差异"><a href="#1-1-3-Docker解决操作系统环境差异" class="headerlink" title="1.1.3.Docker解决操作系统环境差异"></a>1.1.3.Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731143401460.png" alt="image-20210731143401460"></p>
<p>结构包括：</p>
<ul>
<li>计算机硬件：例如CPU、内存、磁盘等</li>
<li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li>
<li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li>
</ul>
<p>应用于计算机交互的流程如下：</p>
<p>1）应用调用操作系统应用（函数库），实现各种功能</p>
<p>2）系统函数库是对内核指令集的封装，会调用内核指令</p>
<p>3）内核指令操作计算机硬件</p>
<p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731144304990.png" alt="image-20210731144304990"></p>
<p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731144458680.png" alt="image-20210731144458680"></p>
<p>Docker如何解决不同系统环境的问题？</p>
<ul>
<li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li>
<li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li>
</ul>
<p>如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731144820638.png" alt="image-20210731144820638"></p>
<h3 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li>
</ul>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<ul>
<li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li>
</ul>
<p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p>
<ul>
<li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li>
<li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li>
<li>启动、移除都可以通过一行命令完成，方便快捷</li>
</ul>
<h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p>
<p>两者有什么差异呢？</p>
<p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731145914960.png" alt="image-20210731145914960"></p>
<p>对比来看：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731152243765.png" alt="image-20210731152243765"></p>
<p>小结：</p>
<p>Docker和虚拟机的差异：</p>
<ul>
<li>docker是一个系统进程；虚拟机是在操作系统中的操作系统</li>
<li>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li>
</ul>
<h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h3><p>Docker中有几个重要的概念：</p>
<p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731153059464.png" alt="image-20210731153059464"></p>
<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p>
<h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p>
<ul>
<li>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</li>
<li>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</li>
</ul>
<p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731153743354.png" alt="image-20210731153743354"></p>
<h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3.Docker架构"></a>1.3.3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li>
<li>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li>
</ul>
<p>如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731154257653.png" alt="image-20210731154257653"></p>
<h3 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h3><p>镜像：</p>
<ul>
<li>将应用程序及其依赖、环境、配置打包在一起</li>
</ul>
<p>容器：</p>
<ul>
<li>镜像运行起来就是容器，一个镜像可以运行多个容器</li>
</ul>
<p>Docker结构：</p>
<ul>
<li>服务端：接收命令或远程请求，操作镜像或容器</li>
<li>客户端：发送命令或者请求到Docker服务端</li>
</ul>
<p>DockerHub：</p>
<ul>
<li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li>
</ul>
<h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考课前资料中的文档：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731155002425.png" alt="image-20210731155002425"></p>
<h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="2-1-1-镜像名称"><a href="#2-1-1-镜像名称" class="headerlink" title="2.1.1.镜像名称"></a>2.1.1.镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]。</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<p>如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731155141362.png" alt="image-20210731155141362"></p>
<p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p>
<h3 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h3><p>常见的镜像操作命令如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731155649535.png" alt="image-20210731155649535"></p>
<h3 id="2-1-3-案例1-拉取、查看镜像"><a href="#2-1-3-案例1-拉取、查看镜像" class="headerlink" title="2.1.3.案例1-拉取、查看镜像"></a>2.1.3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p>
<p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731155844368.png" alt="image-20210731155844368"></p>
<p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731155856199.png" alt="image-20210731155856199"></p>
<p>3）通过命令：docker images 查看拉取到的镜像</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731155903037.png" alt="image-20210731155903037"></p>
<h3 id="2-1-4-案例2-保存、导入镜像"><a href="#2-1-4-案例2-保存、导入镜像" class="headerlink" title="2.1.4.案例2-保存、导入镜像"></a>2.1.4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p>
<p>1）利用docker xx —help命令查看docker save和docker load的语法</p>
<p>例如，查看save命令用法，可以输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731161104732.png" alt="image-20210731161104732"></p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>
<p>2）使用docker save导出镜像到磁盘 </p>
<p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>
<p>结果如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731161354344.png" alt="image-20210731161354344"></p>
<p>3）使用docker load加载镜像</p>
<p>先删除本地的nginx镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure>
<p>然后运行命令，加载本地文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731161746245.png" alt="image-20210731161746245"></p>
<h3 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5.练习"></a>2.1.5.练习</h3><p>需求：去DockerHub搜索并拉取一个Redis镜像</p>
<p>目标：</p>
<p>1）去DockerHub搜索Redis镜像</p>
<p>2）查看Redis镜像的名称和版本</p>
<p>3）利用docker pull命令拉取镜像</p>
<p>4）利用docker save命令将 redis:latest打包为一个redis.tar包</p>
<p>5）利用docker rmi 删除本地的redis:latest</p>
<p>6）利用docker load 重新加载 redis.tar文件</p>
<h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h3><p>容器操作的命令如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731161950495.png" alt="image-20210731161950495"></p>
<p>容器保护三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU等资源</li>
</ul>
<p>其中：</p>
<ul>
<li>docker run：创建并运行一个容器，处于运行状态</li>
<li>docker pause：让一个运行的容器暂停</li>
<li>docker unpause：让一个容器从暂停状态恢复运行</li>
<li>docker stop：停止一个运行的容器</li>
<li>docker start：让一个停止的容器再次运行</li>
<li>docker rm：删除一个容器</li>
</ul>
<h3 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>
<p>命令解读：</p>
<ul>
<li>docker run ：创建并运行一个容器</li>
<li>—name : 给容器起一个名字，比如叫做mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li>-d：后台运行容器</li>
<li>nginx：镜像名称，例如nginx</li>
</ul>
<p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p>
<p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731163255863.png" alt="image-20210731163255863"></p>
<h3 id="2-2-3-案例-进入容器，修改文件"><a href="#2-2-3-案例-进入容器，修改文件" class="headerlink" title="2.2.3.案例-进入容器，修改文件"></a>2.2.3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p>
<p><strong>提示</strong>：进入容器要用到docker exec命令。</p>
<p><strong>步骤</strong>：</p>
<p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure>
<p>命令解读：</p>
<ul>
<li>docker exec ：进入容器内部，执行一个命令</li>
<li>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li>
<li>mn ：要进入的容器的名称</li>
<li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li>
</ul>
<p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p>
<p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731164159811.png" alt="image-20210731164159811"></p>
<p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p>
<p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p>
<p>我们执行命令，进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure>
<p> 查看目录下文件：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731164455818.png" alt="image-20210731164455818"></p>
<p>3）修改index.html的内容</p>
<p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>
<p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731164717604.png" alt="image-20210731164717604"></p>
<h3 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h3><p>docker run命令的常见参数有哪些？</p>
<ul>
<li>—name：指定容器名称</li>
<li>-p：指定端口映射</li>
<li>-d：让容器后台运行</li>
</ul>
<p>查看容器日志的命令：</p>
<ul>
<li>docker logs</li>
<li>添加 -f 参数可以持续查看日志</li>
</ul>
<p>查看容器状态：</p>
<ul>
<li>docker ps</li>
<li>docker ps -a 查看所有容器，包括已经停止的</li>
</ul>
<h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p>
<p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731172440275.png" alt="image-20210731172440275"></p>
<p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p>
<h3 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731173541846.png" alt="image-20210731173541846"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p>
<p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p>
<h3 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure>
<p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p>
<ul>
<li>create 创建一个volume</li>
<li>inspect 显示一个或多个volume的信息</li>
<li>ls 列出所有的volume</li>
<li>prune 删除未使用的volume</li>
<li>rm 删除一个或多个指定的volume</li>
</ul>
<h3 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>① 创建数据卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure>
<p>② 查看所有数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731173746910.png" alt="image-20210731173746910"></p>
<p>③ 查看数据卷详细信息卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731173809877.png" alt="image-20210731173809877"></p>
<p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p>
<p><strong>小结</strong>：</p>
<p>数据卷的作用：</p>
<ul>
<li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li>
</ul>
<p>数据卷操作：</p>
<ul>
<li>docker volume create：创建数据卷</li>
<li>docker volume ls：查看所有数据卷</li>
<li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li>
<li>docker volume rm：删除指定数据卷</li>
<li>docker volume prune：删除所有未使用的数据卷</li>
</ul>
<h3 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure>
<p>这里的-v就是挂载数据卷的命令：</p>
<ul>
<li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li>
</ul>
<h3 id="2-3-5-案例-给nginx挂载数据卷"><a href="#2-3-5-案例-给nginx挂载数据卷" class="headerlink" title="2.3.5.案例-给nginx挂载数据卷"></a>2.3.5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p>
<p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p>
<p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p>
<p>步骤：</p>
<p>① 创建容器并挂载数据卷到容器内的HTML目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>
<p>② 进入html数据卷所在位置，并修改HTML内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>
<h3 id="2-3-6-案例-给MySQL挂载本地目录"><a href="#2-3-6-案例-给MySQL挂载本地目录" class="headerlink" title="2.3.6.案例-给MySQL挂载本地目录"></a>2.3.6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p>
<ul>
<li>带数据卷模式：宿主机目录 —&gt; 数据卷 —-&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 —-&gt; 容器内目录</li>
</ul>
<p>如图：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731175155453.png" alt="image-20210731175155453"></p>
<p><strong>语法</strong>：</p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li>-v [宿主机目录]:[容器内目录]</li>
<li>-v [宿主机文件]:[容器内文件]</li>
</ul>
<p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p>
<p>实现思路如下：</p>
<p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p>
<p>2）创建目录/tmp/mysql/data</p>
<p>3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf</p>
<p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p>
<p>① 挂载/tmp/mysql/data到mysql容器内数据存储目录</p>
<p>② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p>
<p>③ 设置MySQL密码</p>
<h3 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p>
<ul>
<li>-v volume名称:容器内目录</li>
<li>-v 宿主机文件:容器内文</li>
<li>-v 宿主机目录:容器内目录</li>
</ul>
<p>数据卷挂载与目录直接挂载的</p>
<ul>
<li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
<h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731175806273.png" alt="image-20210731175806273"></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而描述上述信息的文件就是Dockerfile文件。</p>
<p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731180321133.png" alt="image-20210731180321133"></p>
<p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<h2 id="3-3-构建Java项目"><a href="#3-3-构建Java项目" class="headerlink" title="3.3.构建Java项目"></a>3.3.构建Java项目</h2><h3 id="3-3-1-基于Ubuntu构建Java项目"><a href="#3-3-1-基于Ubuntu构建Java项目" class="headerlink" title="3.3.1.基于Ubuntu构建Java项目"></a>3.3.1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p>
<ul>
<li><p>步骤1：新建一个空文件夹docker-demo</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801101207444.png" alt="image-20210801101207444"></p>
</li>
<li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801101314816.png" alt="image-20210801101314816"></p>
</li>
<li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801101410200.png" alt="image-20210801101410200"></p>
</li>
<li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801101455590.png" alt="image-20210801101455590"></p>
<p>其中的内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤5：进入docker-demo</p>
<p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p>
</li>
<li><p>步骤6：运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>最后访问 <a href="http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p>
<h3 id="3-3-2-基于java8构建Java项目"><a href="#3-3-2-基于java8构建Java项目" class="headerlink" title="3.3.2.基于java8构建Java项目"></a>3.3.2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p>
<p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p>
<p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p>
<p>实现思路如下：</p>
<ul>
<li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p>
</li>
<li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p>
</li>
<li><p>③ 编写Dockerfile文件：</p>
<ul>
<li><p>a ）基于java:8-alpine作为基础镜像</p>
</li>
<li><p>b ）将app.jar拷贝到镜像中</p>
</li>
<li><p>c ）暴露端口</p>
</li>
<li><p>d ）编写入口ENTRYPOINT</p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>④ 使用docker build命令构建镜像</p>
</li>
<li><p>⑤ 使用docker run创建容器并运行</p>
</li>
</ul>
<h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4.小结"></a>3.4.小结</h2><p>小结：</p>
<ol>
<li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li>
<li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li>
<li>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</li>
</ol>
<h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731180921742.png" alt="image-20210731180921742"></p>
<h2 id="4-1-初识DockerCompose"><a href="#4-1-初识DockerCompose" class="headerlink" title="4.1.初识DockerCompose"></a>4.1.初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的Compose文件就描述一个项目，其中包含两个容器：</p>
<ul>
<li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li>
<li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li>
</ul>
<p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>
<p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p>
<h2 id="4-2-安装DockerCompose"><a href="#4-2-安装DockerCompose" class="headerlink" title="4.2.安装DockerCompose"></a>4.2.安装DockerCompose</h2><p>参考课前资料</p>
<h2 id="4-3-部署微服务集群"><a href="#4-3-部署微服务集群" class="headerlink" title="4.3.部署微服务集群"></a>4.3.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p>
<p><strong>实现思路</strong>：</p>
<p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p>
<p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p>
<p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p>
<p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p>
<p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p>
<h3 id="4-3-1-compose文件"><a href="#4-3-1-compose文件" class="headerlink" title="4.3.1.compose文件"></a>4.3.1.compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210731181341330.png" alt="image-20210731181341330"></p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，其中包含5个service服务：</p>
<ul>
<li><code>nacos</code>：作为注册中心和配置中心<ul>
<li><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MODE: standalone</code>：单点模式启动</li>
</ul>
</li>
<li><code>ports</code>：端口映射，这里暴露了8848端口</li>
</ul>
</li>
<li><code>mysql</code>：数据库<ul>
<li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li>
</ul>
</li>
<li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li>
</ul>
</li>
<li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li>
</ul>
<p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801095205034.png" alt="image-20210801095205034"></p>
<p>查看微服务目录，可以看到都包含Dockerfile文件：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801095320586.png" alt="image-20210801095320586"></p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-修改微服务配置"><a href="#4-3-2-修改微服务配置" class="headerlink" title="4.3.2.修改微服务配置"></a>4.3.2.修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p>
<p>如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-3-打包"><a href="#4-3-3-打包" class="headerlink" title="4.3.3.打包"></a>4.3.3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p>
<p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打包后：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801095951030.png" alt="image-20210801095951030"></p>
<h3 id="4-3-4-拷贝jar包到部署目录"><a href="#4-3-4-拷贝jar包到部署目录" class="headerlink" title="4.3.4.拷贝jar包到部署目录"></a>4.3.4.拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p>
<p>user-service：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801100201253.png" alt="image-20210801100201253"></p>
<p>order-service：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801100231495.png" alt="image-20210801100231495"></p>
<p>gateway：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801100308102.png" alt="image-20210801100308102"></p>
<h3 id="4-3-5-部署"><a href="#4-3-5-部署" class="headerlink" title="4.3.5.部署"></a>4.3.5.部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p>
<p>上传到任意目录：</p>
<p><img src="/D:/private%20blog/blog/source/images/assets/image-20210801100955653.png" alt="image-20210801100955653"></p>
<p>部署：</p>
<p>进入cloud-demo目录，然后运行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h1 id="5-Docker镜像仓库"><a href="#5-Docker镜像仓库" class="headerlink" title="5.Docker镜像仓库"></a>5.Docker镜像仓库</h1><h2 id="5-1-搭建私有镜像仓库"><a href="#5-1-搭建私有镜像仓库" class="headerlink" title="5.1.搭建私有镜像仓库"></a>5.1.搭建私有镜像仓库</h2><p>参考课前资料《CentOS7安装Docker.md》</p>
<h2 id="5-2-推送、拉取镜像"><a href="#5-2-推送、拉取镜像" class="headerlink" title="5.2.推送、拉取镜像"></a>5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p>
<p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>
<p>② 推送镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>
<p>③ 拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>镜像仓库</tag>
        <tag>数据卷</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/10/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ELK搜索高级课程"><a href="#ELK搜索高级课程" class="headerlink" title="ELK搜索高级课程"></a>ELK搜索高级课程</h1><h1 id="1．-课程简介"><a href="#1．-课程简介" class="headerlink" title="1． 课程简介"></a>1． 课程简介</h1><h2 id="1-1-课程内容"><a href="#1-1-课程内容" class="headerlink" title="1.1 课程内容"></a>1.1 课程内容</h2><p>ELK是包含但不限于Elasticsearch（简称es）、Logstash、Kibana 三个开源软件的组成的一个整体。这三个软件合成ELK。是用于数据抽取（Logstash）、搜索分析（Elasticsearch）、数据展现（Kibana）的一整套解决方案，所以也称作ELK stack。</p>
<p>本课程从分别对三个组件经行详细介绍，尤其是Elasticsearch，因为它是elk的核心。本课程从es底层对文档、索引、搜索、聚合、集群经行介绍，从搜索和聚合分析实例来展现es的魅力。Logstash从内部如何采集数据到指定地方来展现它数据采集的功能。Kibana则从数据绘图展现数据可视化的功能。</p>
<h2 id="1-2-面向人员"><a href="#1-2-面向人员" class="headerlink" title="1.2 面向人员"></a>1.2 面向人员</h2><ul>
<li>java工程师：深入研究es,使得java工程师向搜索工程师迈进。</li>
<li>运维工程师：搭建整体elk集群。不需写代码，仅需配置，即可收集服务器指标、日志文件、数据库数据，并在前端华丽展现。</li>
<li>数据分析人员：不需写代码，仅需配置kibana图表，即可完成数据可视化工作，得到想要的数据图表。</li>
<li>大厂架构师：完成数据中台的搭建。对公司数据流的处理得心应手，对接本公司大数据业务。</li>
</ul>
<h2 id="1-3-课程优势"><a href="#1-3-课程优势" class="headerlink" title="1.3 课程优势"></a>1.3 课程优势</h2><ul>
<li><p>基于最新的elk7.3版本讲解。最新api。包含sql功能。</p>
</li>
<li><p>理论和实际代码相辅相成。理论结合画图讲解。代码与spring boot结合。</p>
</li>
<li><p>包含实际运维部署理论与实践。</p>
</li>
<li><p>Elk整体流程项目，包含数据采集。</p>
</li>
</ul>
<h2 id="1-4-学习路径"><a href="#1-4-学习路径" class="headerlink" title="1.4 学习路径"></a>1.4 学习路径</h2><p>参照目录，按照介绍，es入门，文档、映射、索引、分词器、搜索、聚合。logstash、kibana。集群部署。项目实战。</p>
<p>每个知识点先学概念，在学rest api,最后java代码上手。</p>
<h1 id="2．-Elastic-Stack简介"><a href="#2．-Elastic-Stack简介" class="headerlink" title="2． Elastic Stack简介"></a>2． Elastic Stack简介</h1><h2 id="2-1简介"><a href="#2-1简介" class="headerlink" title="2.1简介"></a>2.1简介</h2><p>ELK是一个免费开源的日志分析架构技术栈总称，官网<a href="https://www.elastic.co/cn。包含三大基础组件，分别是Elasticsearch、Logstash、Kibana。但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据搜索、分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。下面是ELK架构：">https://www.elastic.co/cn。包含三大基础组件，分别是Elasticsearch、Logstash、Kibana。但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据搜索、分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。下面是ELK架构：</a></p>
<p><img src="/img/1567691051440.png" alt="1567691051440"></p>
<p>随着elk的发展，又有新成员Beats、elastic cloud的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。</p>
<p><img src="/img/1567691098941.png" alt="1567691098941"></p>
<h2 id="2-2特色"><a href="#2-2特色" class="headerlink" title="2.2特色"></a>2.2特色</h2><ul>
<li><p>处理方式灵活：elasticsearch是目前最流行的准实时全文检索引擎，具有高速检索大数据的能力。</p>
</li>
<li><p>配置简单：安装elk的每个组件，仅需配置每个组件的一个配置文件即可。修改处不多，因为大量参数已经默认配在系统中，修改想要修改的选项即可。</p>
</li>
<li><p>接口简单：采用json形式RESTFUL API接受数据并响应，无关语言。</p>
</li>
<li><p>性能高效：elasticsearch基于优秀的全文搜索技术Lucene，采用倒排索引，可以轻易地在百亿级别数据量下，搜索出想要的内容，并且是秒级响应。</p>
</li>
<li><p>灵活扩展：elasticsearch和logstash都可以根据集群规模线性拓展，elasticsearch内部自动实现集群协作。</p>
</li>
<li><p>数据展现华丽：kibana作为前端展现工具，图表华丽，配置简单。</p>
</li>
</ul>
<h2 id="2-3组件介绍"><a href="#2-3组件介绍" class="headerlink" title="2.3组件介绍"></a>2.3组件介绍</h2><p><strong>Elasticsearch</strong></p>
<p>Elasticsearch 是使用java开发，基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p>
<p><strong>Logstash</strong></p>
<p>Logstash 基于java开发，是一个数据抽取转化工具。一般工作方式为c/s架构，client端安装在需要收集信息的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch或其他组件上去。 </p>
<p><strong>Kibana</strong></p>
<p>Kibana 基于nodejs，也是一个开源和免费的可视化工具。Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以汇总、分析和搜索重要数据日志。</p>
<p><strong>Beats</strong></p>
<p>Beats 平台集合了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。</p>
<p>Beats由如下组成:</p>
<p>​    Packetbeat：轻量型网络数据采集器，用于深挖网线上传输的数据，了解应用程序动态。Packetbeat 是一款轻量型网络数据包分析器，能够将数据发送至 Logstash 或 Elasticsearch。其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议。</p>
<p>​    Filebeat：轻量型日志采集器。当您要面对成百上千、甚至成千上万的服务器、虚拟机和容器生成的日志时，请告别 SSH 吧。Filebeat 将为您提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。</p>
<p>​    Metricbeat ：轻量型指标采集器。Metricbeat 能够以一种轻量型的方式，输送各种系统和服务统计数据，从 CPU 到内存，从 Redis 到 Nginx，不一而足。可定期获取外部系统的监控指标信息，其可以监控、收集 Apache http、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务。</p>
<p>​    Winlogbeat：轻量型 Windows 事件日志采集器。用于密切监控基于 Windows 的基础设施上发生的事件。Winlogbeat 能够以一种轻量型的方式，将 Windows 事件日志实时地流式传输至 Elasticsearch 和 Logstash。</p>
<p>​    Auditbeat：轻量型审计日志采集器。收集您 Linux 审计框架的数据，监控文件完整性。Auditbeat 实时采集这些事件，然后发送到 Elastic Stack 其他部分做进一步分析。</p>
<p>​    Heartbeat：面向运行状态监测的轻量型采集器。通过主动探测来监测服务的可用性。通过给定 URL 列表，Heartbeat 仅仅询问：网站运行正常吗？Heartbeat 会将此信息和响应时间发送至 Elastic 的其他部分，以进行进一步分析。</p>
<p>​    Functionbeat：面向云端数据的无服务器采集器。在作为一项功能部署在云服务提供商的功能即服务 (FaaS) 平台上后，Functionbeat 即能收集、传送并监测来自您的云服务的相关数据。</p>
<p><strong>Elastic cloud</strong></p>
<p>基于 Elasticsearch 的软件即服务(SaaS)解决方案。通过 Elastic 的官方合作伙伴使用托管的 Elasticsearch 服务。</p>
<p><img src="/img/1567691213668.png" alt="1567691213668"></p>
<h1 id="3．-Elasticsearch是什么"><a href="#3．-Elasticsearch是什么" class="headerlink" title="3． Elasticsearch是什么"></a>3． Elasticsearch是什么</h1><h2 id="3-1搜索是什么"><a href="#3-1搜索是什么" class="headerlink" title="3.1搜索是什么"></a>3.1搜索是什么</h2><p>概念：用户输入想要的关键词，返回含有该关键词的所有信息。</p>
<p>场景：</p>
<p>​    1互联网搜索：谷歌、百度、各种新闻首页</p>
<p>​    2 站内搜索（垂直搜索）：企业OA查询订单、人员、部门，电商网站内部搜索商品（淘宝、京东）场景。</p>
<h2 id="3-2-数据库做搜索弊端"><a href="#3-2-数据库做搜索弊端" class="headerlink" title="3.2 数据库做搜索弊端"></a>3.2 数据库做搜索弊端</h2><h3 id="3-2-1站内搜索（垂直搜索）：数据量小，简单搜索，可以使用数据库。"><a href="#3-2-1站内搜索（垂直搜索）：数据量小，简单搜索，可以使用数据库。" class="headerlink" title="3.2.1站内搜索（垂直搜索）：数据量小，简单搜索，可以使用数据库。"></a>3.2.1站内搜索（垂直搜索）：数据量小，简单搜索，可以使用数据库。</h3><p>问题出现：</p>
<p>l  存储问题。电商网站商品上亿条时，涉及到单表数据过大必须拆分表，数据库磁盘占用过大必须分库（mycat）。</p>
<p>l  性能问题：解决上面问题后，查询“笔记本电脑”等关键词时，上亿条数据的商品名字段逐行扫描，性能跟不上。</p>
<p>l  不能分词。如搜索“笔记本电脑”，只能搜索完全和关键词一样的数据，那么数据量小时，搜索“笔记电脑”，“电脑”数据要不要给用户。</p>
<h3 id="3-2-2互联网搜索，肯定不会使用数据库搜索。数据量太大。PB级。"><a href="#3-2-2互联网搜索，肯定不会使用数据库搜索。数据量太大。PB级。" class="headerlink" title="3.2.2互联网搜索，肯定不会使用数据库搜索。数据量太大。PB级。"></a>3.2.2互联网搜索，肯定不会使用数据库搜索。数据量太大。PB级。</h3><h2 id="3-3全文检索、倒排索引和Lucene"><a href="#3-3全文检索、倒排索引和Lucene" class="headerlink" title="3.3全文检索、倒排索引和Lucene"></a>3.3全文检索、倒排索引和Lucene</h2><h4 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a><strong>全文检索</strong></h4><p>倒排索引。数据存储时，经行分词建立term索引库。见画图。</p>
<p>倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。带有倒排索引的文件我们称为倒排<a href="https://baike.baidu.com/item/索引文件">索引文件</a>，简称<a href="https://baike.baidu.com/item/倒排文件/4137688">倒排文件</a>(inverted file)。</p>
<h4 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h4><p>就是一个jar包，里面封装了全文检索的引擎、搜索的算法代码。开发时，引入lucen的jar包，通过api开发搜索相关业务。底层会在磁盘建立索引库。</p>
<h2 id="3-4-什么是Elasticsearch"><a href="#3-4-什么是Elasticsearch" class="headerlink" title="3.4 什么是Elasticsearch"></a>3.4 什么是Elasticsearch</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="/img/1567696557762.png" alt="1567696557762"></p>
<p>官网：<a href="https://www.elastic.co/cn/products/elasticsearch">https://www.elastic.co/cn/products/elasticsearch</a></p>
<p><img src="/img/1567696574236.png" alt="1567696574236"></p>
<h4 id="Elasticsearch的功能"><a href="#Elasticsearch的功能" class="headerlink" title="Elasticsearch的功能"></a>Elasticsearch的功能</h4><ul>
<li>分布式的搜索引擎和数据分析引擎</li>
</ul>
<p>搜索：互联网搜索、电商网站站内搜索、OA系统查询</p>
<p>数据分析：电商网站查询近一周哪些品类的图书销售前十；新闻网站，最近3天阅读量最高的十个关键词，舆情分析。</p>
<ul>
<li>全文检索，结构化检索，数据分析</li>
</ul>
<p>全文检索：搜索商品名称包含java的图书select * from books where book_name like “%java%”。</p>
<p>结构化检索：搜索商品分类为spring的图书都有哪些，select * from books where category_id=’spring’</p>
<p>数据分析：分析每一个分类下有多少种图书，select category_id,count(*) from books group by category_id</p>
<ul>
<li>对海量数据进行近实时的处理</li>
</ul>
<p>分布式：ES自动可以将海量数据分散到多台服务器上去存储和检索,经行并行查询，提高搜索效率。相对的，Lucene是单机应用。</p>
<p>近实时：数据库上亿条数据查询，搜索一次耗时几个小时，是批处理（batch-processing）。而es只需秒级即可查询海量数据，所以叫近实时。秒级。</p>
<h4 id="Elasticsearch的使用场景"><a href="#Elasticsearch的使用场景" class="headerlink" title="Elasticsearch的使用场景"></a>Elasticsearch的使用场景</h4><p>国外：</p>
<ul>
<li><p>维基百科，类似百度百科，“网络七层协议”的维基百科，全文检索，高亮，搜索推荐</p>
</li>
<li><p>Stack Overflow（国外的程序讨论论坛），相当于程序员的贴吧。遇到it问题去上面发帖，热心网友下面回帖解答。</p>
</li>
<li><p>GitHub（开源代码管理），搜索上千亿行代码。</p>
</li>
<li><p>电商网站，检索商品</p>
</li>
<li><p>日志数据分析，logstash采集日志，ES进行复杂的数据分析（ELK技术，elasticsearch+logstash+kibana）</p>
</li>
<li><p>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅《java编程思想》的监控，如果价格低于27块钱，就通知我，我就去买。</p>
</li>
<li><p>BI系统，商业智能（Business Intelligence）。大型连锁超市，分析全国网点传回的数据，分析各个商品在什么季节的销售量最好、利润最高。成本管理，店面租金、员工工资、负债等信息进行分析。从而部署下一个阶段的战略目标。</p>
</li>
</ul>
<p>国内：</p>
<ul>
<li><p>百度搜索，第一次查询，使用es。</p>
</li>
<li><p>OA、ERP系统站内搜索。</p>
</li>
</ul>
<h4 id="Elasticsearch的特点"><a href="#Elasticsearch的特点" class="headerlink" title="Elasticsearch的特点"></a>Elasticsearch的特点</h4><ul>
<li><p>可拓展性：大型分布式集群（数百台服务器）技术，处理PB级数据，大公司可以使用。小公司数据量小，也可以部署在单机。大数据领域使用广泛。</p>
</li>
<li><p>技术整合：将全文检索、数据分析、分布式相关技术整合在一起：lucene（全文检索），商用的数据分析软件（BI软件），分布式数据库（mycat）</p>
</li>
<li><p>部署简单：开箱即用，很多默认配置不需关心，解压完成直接运行即可。拓展时，只需多部署几个实例即可，负载均衡、分片迁移集群内部自己实施。</p>
</li>
<li><p>接口简单：使用restful api经行交互，跨语言。</p>
</li>
<li><p>功能强大：Elasticsearch作为传统数据库的一个补充，提供了数据库所不不能提供的很多功能，如全文检索，同义词处理，相关度排名。</p>
</li>
</ul>
<p><img src="/img/1567696692347.png" alt="1567696692347"></p>
<p><img src="/img/1567696700718.png" alt="1567696700718"></p>
<p><img src="/img/1567696712256.png" alt="1567696712256"></p>
<h2 id="3-5-elasticsearch核心概念"><a href="#3-5-elasticsearch核心概念" class="headerlink" title="3.5 elasticsearch核心概念"></a>3.5 elasticsearch核心概念</h2><h3 id="3-5-1-lucene和elasticsearch的关系"><a href="#3-5-1-lucene和elasticsearch的关系" class="headerlink" title="3.5.1 lucene和elasticsearch的关系"></a>3.5.1 lucene和elasticsearch的关系</h3><p>Lucene：最先进、功能最强大的搜索库，直接基于lucene开发，非常复杂，api复杂</p>
<p>Elasticsearch：基于lucene，封装了许多lucene底层功能，提供简单易用的restful api接口和许多语言的客户端，如java的高级客户端（<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-low.html">Java High Level REST Client</a>）和底层客户端（<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-low.html">Java Low Level REST Client</a>）</p>
<p><img src="/img/1567696843304.png" alt="1567696843304"></p>
<p>起源：Shay Banon。2004年失业，陪老婆去伦敦学习厨师。失业在家帮老婆写一个菜谱搜索引擎。封装了lucene的开源项目，compass。找到工作后，做分布式高性能项目，再封装compass，写出了elasticsearch，使得lucene支持分布式。现在是Elasticsearch创始人兼Elastic首席执行官。</p>
<h3 id="3-5-2-elasticsearch的核心概念"><a href="#3-5-2-elasticsearch的核心概念" class="headerlink" title="3.5.2 elasticsearch的核心概念"></a>3.5.2 elasticsearch的核心概念</h3><h4 id="1-NRT（Near-Realtime）：近实时"><a href="#1-NRT（Near-Realtime）：近实时" class="headerlink" title="1 NRT（Near Realtime）：近实时"></a>1 NRT（Near Realtime）：近实时</h4><p>两方面：</p>
<ul>
<li><p>写入数据时，过1秒才会被搜索到，因为内部在分词、录入索引。</p>
</li>
<li><p>es搜索时：搜索和分析数据需要秒级出结果。</p>
</li>
</ul>
<h4 id="2-Cluster：集群"><a href="#2-Cluster：集群" class="headerlink" title="2 Cluster：集群"></a>2 Cluster：集群</h4><p>包含一个或多个启动着es实例的机器群。通常一台机器起一个es实例。同一网络下，集名一样的多个es实例自动组成集群，自动均衡分片等行为。默认集群名为“elasticsearch”。</p>
<h4 id="3-Node：节点"><a href="#3-Node：节点" class="headerlink" title="3 Node：节点"></a>3 Node：节点</h4><p>每个es实例称为一个节点。节点名自动分配，也可以手动配置。</p>
<h4 id="4-Index：索引"><a href="#4-Index：索引" class="headerlink" title="4 Index：索引"></a>4 Index：索引</h4><p>包含一堆有相似结构的文档数据。</p>
<p>索引创建规则：</p>
<ul>
<li><p>仅限小写字母</p>
</li>
<li><p>不能包含\、/、 *、?、”、&lt;、&gt;、|、#以及空格符等特殊符号</p>
</li>
<li><p>从7.0版本开始不再包含冒号</p>
</li>
<li><p>不能以-、_或+开头</p>
</li>
<li><p>不能超过255个字节（注意它是字节，因此多字节字符将计入255个限制）</p>
</li>
</ul>
<h4 id="5-Document：文档"><a href="#5-Document：文档" class="headerlink" title="5  Document：文档"></a>5  Document：文档</h4><p>es中的最小数据单元。一个document就像数据库中的一条记录。通常以json格式显示。多个document存储于一个索引（Index）中。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">book document</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;book_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;book_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java编程思想&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;book_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;从Java的基础语法到最高级特性（深入的[面向对象](https://baike.baidu.com/item/面向对象)概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="6-Field-字段"><a href="#6-Field-字段" class="headerlink" title="6 Field:字段"></a>6 Field:字段</h4><p>就像数据库中的列（Columns），定义每个document应该有的字段。</p>
<h4 id="7-Type：类型"><a href="#7-Type：类型" class="headerlink" title="7 Type：类型"></a>7 Type：类型</h4><p>每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field。</p>
<p><strong>注意</strong>：6.0之前的版本有type（类型）概念，type相当于关系数据库的表，ES官方将在ES9.0版本中彻底删除type。本教程typy都为_doc。</p>
<h4 id="8-shard：分片"><a href="#8-shard：分片" class="headerlink" title="8 shard：分片"></a>8 shard：分片</h4><p>index数据过大时，将index里面的数据，分为多个shard，分布式的存储在各个服务器上面。可以支持海量数据和高并发，提升性能和吞吐量，充分利用多台机器的cpu。</p>
<h4 id="9-replica：副本"><a href="#9-replica：副本" class="headerlink" title="9 replica：副本"></a>9 replica：副本</h4><p>在分布式环境下，任何一台机器都会随时宕机，如果宕机，index的一个分片没有，导致此index不能搜索。所以，为了保证数据的安全，我们会将每个index的分片经行备份，存储在另外的机器上。保证少数机器宕机es集群仍可以搜索。</p>
<p>能正常提供查询和插入的分片我们叫做主分片（primary shard），其余的我们就管他们叫做备份的分片（replica shard）。</p>
<p>es6默认新建索引时，5分片，2副本，也就是一主一备，共10个分片。所以，es集群最小规模为两台。</p>
<h3 id="3-5-3-elasticsearch核心概念-vs-数据库核心概念"><a href="#3-5-3-elasticsearch核心概念-vs-数据库核心概念" class="headerlink" title="3.5.3 elasticsearch核心概念 vs. 数据库核心概念"></a>3.5.3 elasticsearch核心概念 vs. 数据库核心概念</h3><div class="table-container">
<table>
<thead>
<tr>
<th><strong>关系型数据库（比如Mysql）</strong></th>
<th><strong>非关系型数据库（Elasticsearch）</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库Database</td>
<td>索引Index</td>
</tr>
<tr>
<td>表Table</td>
<td>索引Index（原为Type）</td>
</tr>
<tr>
<td>数据行Row</td>
<td>文档Document</td>
</tr>
<tr>
<td>数据列Column</td>
<td>字段Field</td>
</tr>
<tr>
<td>约束 Schema</td>
<td>映射Mapping</td>
</tr>
</tbody>
</table>
</div>
<h1 id="4．-Elasticsearch相关软件安装"><a href="#4．-Elasticsearch相关软件安装" class="headerlink" title="4． Elasticsearch相关软件安装"></a>4． Elasticsearch相关软件安装</h1><h2 id="4-1-Windows安装elasticsearch"><a href="#4-1-Windows安装elasticsearch" class="headerlink" title="4.1.  Windows安装elasticsearch"></a>4.1.  Windows安装elasticsearch</h2><h3 id="1、安装JDK，至少1-8-0-73以上版本，验证：java-version。"><a href="#1、安装JDK，至少1-8-0-73以上版本，验证：java-version。" class="headerlink" title="1、安装JDK，至少1.8.0_73以上版本，验证：java -version。"></a>1、安装JDK，至少1.8.0_73以上版本，验证：java -version。</h3><h3 id="2、下载和解压缩Elasticsearch安装包，查看目录结构。"><a href="#2、下载和解压缩Elasticsearch安装包，查看目录结构。" class="headerlink" title="2、下载和解压缩Elasticsearch安装包，查看目录结构。"></a>2、下载和解压缩Elasticsearch安装包，查看目录结构。</h3><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
<p>bin：脚本目录，包括：启动、停止等可执行脚本</p>
<p>config：配置文件目录</p>
<p>data：索引目录，存放索引文件的地方</p>
<p>logs：日志目录</p>
<p>modules：模块目录，包括了es的功能模块</p>
<p>plugins :插件目录，es支持插件机制</p>
<h3 id="3、配置文件："><a href="#3、配置文件：" class="headerlink" title="3、配置文件："></a>3、配置文件：</h3><p>位置：</p>
<p>ES的配置文件的地址根据安装形式的不同而不同：</p>
<p>使用zip、tar安装，配置文件的地址在安装目录的config下。</p>
<p>使用RPM安装，配置文件在/etc/elasticsearch下。</p>
<p>使用MSI安装，配置文件的地址在安装目录的config下，并且会自动将config目录地址写入环境变量ES_PATH_CONF。</p>
<p><strong>elasticsearch.yml</strong></p>
<p>配置格式是YAML，可以采用如下两种方式：</p>
<p>方式1：层次方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">path:</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">/var/lib/elasticsearch</span></span><br><span class="line">    <span class="attr">logs:</span> <span class="string">/var/log/elasticsearch</span></span><br></pre></td></tr></table></figure>
<p>方式2：属性方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">path.data:</span> <span class="string">/var/lib/elasticsearch</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/var/log/elasticsearch</span></span><br></pre></td></tr></table></figure>
<p>常用的配置项如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> </span><br><span class="line">	<span class="string">配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</span></span><br><span class="line"><span class="attr">node.name:</span></span><br><span class="line">	<span class="string">节点名，通常一台物理服务器就是一个节点，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</span></span><br><span class="line">	<span class="string">一个或多个节点组成一个cluster集群，集群是一个逻辑的概念，节点是物理概念，后边章节会详细介绍。</span></span><br><span class="line"><span class="attr">path.conf:</span> </span><br><span class="line">	<span class="string">设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">path.data:</span></span><br><span class="line">	<span class="string">设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开。</span></span><br><span class="line"><span class="attr">path.logs:</span></span><br><span class="line">	<span class="string">设置日志文件的存储路径，默认是es根目录下的logs文件夹</span></span><br><span class="line"><span class="attr">path.plugins:</span> </span><br><span class="line">	<span class="string">设置插件的存放路径，默认是es根目录下的plugins文件夹</span></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">true</span></span><br><span class="line">	<span class="string">设置为true可以锁住ES使用的内存，避免内存与swap分区交换数据。</span></span><br><span class="line"><span class="attr">network.host:</span> </span><br><span class="line">	<span class="string">设置绑定主机的ip地址，设置为0.0.0.0表示绑定任何ip，允许外网访问，生产环境建议设置为具体的ip。</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line">	<span class="string">设置对外服务的http端口，默认为9200。</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span>  <span class="string">集群结点之间通信端口</span></span><br><span class="line"><span class="attr">node.master:</span> </span><br><span class="line">	<span class="string">指定该节点是否有资格被选举成为master结点，默认是true，如果原来的master宕机会重新选举新的master。</span></span><br><span class="line"><span class="attr">node.data:</span> </span><br><span class="line">	<span class="string">指定该节点是否存储索引数据，默认为true。</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;host1:port&quot;</span>, <span class="string">&quot;host2:port&quot;</span>, <span class="string">&quot;...&quot;</span>]</span><br><span class="line">	<span class="string">设置集群中master节点的初始列表。</span></span><br><span class="line"><span class="attr">discovery.zen.ping.timeout:</span> <span class="string">3s</span></span><br><span class="line">	<span class="string">设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些。</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span></span><br><span class="line">	<span class="string">主结点数量的最少值</span> <span class="string">,此值的公式为：(master_eligible_nodes</span> <span class="string">/</span> <span class="number">2</span><span class="string">)</span> <span class="string">+</span> <span class="number">1</span> <span class="string">，比如：有3个符合要求的主结点，那么这里要设置为2。</span></span><br><span class="line"><span class="attr">node.max_local_storage_nodes:</span> </span><br><span class="line">	<span class="string">单机允许的最大存储结点数，通常单机启动一个结点建议设置为1，开发环境如果单机启动多个节点可设置大于1。</span></span><br></pre></td></tr></table></figure>
<p><strong>jvm.options</strong></p>
<p>设置最小及最大的JVM堆内存大小：</p>
<p>在jvm.options中设置 -Xms和-Xmx：</p>
<p>1） 两个值设置为相等</p>
<p>2） 将Xmx 设置为不超过物理内存的一半。</p>
<p><strong>log4j2.properties</strong></p>
<p>日志文件设置，ES使用log4j，注意日志级别的配置。</p>
<h3 id="4、启动Elasticsearch：bin-elasticsearch-bat，es的特点就是开箱即，无需配置，启动即可。"><a href="#4、启动Elasticsearch：bin-elasticsearch-bat，es的特点就是开箱即，无需配置，启动即可。" class="headerlink" title="4、启动Elasticsearch：bin\elasticsearch.bat，es的特点就是开箱即，无需配置，启动即可。"></a>4、启动Elasticsearch：bin\elasticsearch.bat，es的特点就是开箱即，无需配置，启动即可。</h3><p>注意：es7 windows版本不支持机器学习，所以elasticsearch.yml中添加如下几个参数：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span>  </span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]  </span><br><span class="line"><span class="attr">xpack.ml.enabled:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">/.*/</span></span><br></pre></td></tr></table></figure>
<h3 id="5、检查ES是否启动成功：浏览器访问http-localhost-9200-Pretty"><a href="#5、检查ES是否启动成功：浏览器访问http-localhost-9200-Pretty" class="headerlink" title="5、检查ES是否启动成功：浏览器访问http://localhost:9200/?Pretty"></a>5、检查ES是否启动成功：浏览器访问<a href="http://localhost:9200/?Pretty">http://localhost:9200/?Pretty</a></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HqAKQ_0tQOOm8b6qU-2Qug&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zip&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;de777fa&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-07-24T18:30:11.767338Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>解释：</p>
<p>name: node名称，取自机器的hostname</p>
<p>cluster_name: 集群名称（默认的集群名称就是elasticsearch）</p>
<p>version.number: 7.3.0，es版本号</p>
<p>version.lucene_version:封装的lucene版本号</p>
<h3 id="6、浏览器访问-http-localhost-9200-cluster-health-查询集群状态"><a href="#6、浏览器访问-http-localhost-9200-cluster-health-查询集群状态" class="headerlink" title="6、浏览器访问 http://localhost:9200/_cluster/health 查询集群状态"></a>6、浏览器访问 <a href="http://localhost:9200/_cluster/health">http://localhost:9200/_cluster/health</a> 查询集群状态</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_nodes&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_data_nodes&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;active_primary_shards&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;active_shards&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;relocating_shards&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;initializing_shards&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unassigned_shards&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;delayed_unassigned_shards&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_pending_tasks&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_in_flight_fetch&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;task_max_waiting_in_queue_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;active_shards_percent_as_number&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>解释：</p>
<p>Status：集群状态。Green 所有分片可用。Yellow所有主分片可用。Red主分片不可用，集群不可用。</p>
<h2 id="4-2-Windows安装Kibana"><a href="#4-2-Windows安装Kibana" class="headerlink" title="4.2.  Windows安装Kibana"></a>4.2.  Windows安装Kibana</h2><p>1、kibana是es数据的前端展现，数据分析时，可以方便地看到数据。作为开发人员，可以方便访问es。</p>
<p>2、下载，解压kibana。</p>
<p>3、启动Kibana：bin\kibana.bat</p>
<p>4、浏览器访问 <a href="http://localhost:5601">http://localhost:5601</a> 进入Dev Tools界面。像plsql一样支持代码提示。</p>
<p>5、发送get请求，查看集群状态GET _cluster/health。相当于浏览器访问。</p>
<p>​        <img src="/img/1568622526251.png" alt="1568622526251"></p>
<p>​                                                                    总览</p>
<p>   <img src="/img/1568622589010.png" alt="1568622589010"></p>
<p>​                                                            Dev Tools界面</p>
<p>   <img src="/img/1568622607418.png" alt="1568622607418"></p>
<p>​                                                                监控集群界面</p>
<p>   <img src="/img/1568622619503.png" alt="1568622619503"></p>
<p>​                                                    集群状态（搜索速率、索引速率等）</p>
<h2 id="4-3-Windows安装postman"><a href="#4-3-Windows安装postman" class="headerlink" title="4.3  Windows安装postman"></a>4.3  Windows安装postman</h2><p>是什么：postman是一个模拟http请求的工具。能够非常细致地定制化各种http请求。如get]\post\pu\delete,携带body参数等。</p>
<p>为什么：在没有kibana时，可以使用postman调试。</p>
<p>怎么用：</p>
<p>get <a href="http://localhost:9200/">http://localhost:9200/</a></p>
<p>  <img src="/img/1568622671957.png" alt="1568622671957">                                                </p>
<p>测试一下get方式查询集群状态<a href="http://localhost:9200/_cluster/health">http://localhost:9200/_cluster/health</a></p>
<p>   <img src="/img/1568622683707.png" alt="1568622683707"></p>
<h2 id="4-4-Windows安装head插件"><a href="#4-4-Windows安装head插件" class="headerlink" title="4.4 Windows安装head插件"></a>4.4 Windows安装head插件</h2><p>head插件是ES的一个可视化管理插件，用来监视ES的状态，并通过head客户端和ES服务进行交互，比如创建映射、创建索引等，head的项目地址在<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a> 。</p>
<p>从ES6.0开始，head插件支持使得node.js运行。</p>
<h3 id="1安装node-js"><a href="#1安装node-js" class="headerlink" title="1安装node.js"></a>1安装node.js</h3><h3 id="2下载head并运行"><a href="#2下载head并运行" class="headerlink" title="2下载head并运行"></a>2下载head并运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/mobz/elasticsearch-head.git </span><br><span class="line">cd elasticsearch-head </span><br><span class="line">npm install </span><br><span class="line">npm run start </span><br></pre></td></tr></table></figure>
<p>浏览器打开 <a href="http://localhost:9100/">http://localhost:9100/</a></p>
<h3 id="3运行"><a href="#3运行" class="headerlink" title="3运行"></a>3运行</h3><p><img src="/img/1568627572838.png" alt="1568627572838"></p>
<p>打开浏览器调试工具发现报错：</p>
<p>Origin null is not allowed by Access-Control-Allow-Origin.</p>
<p>原因是：head插件作为客户端要连接ES服务（localhost:9200），此时存在跨域问题，elasticsearch默认不允许跨域访问。</p>
<p>解决方案：</p>
<p>设置elasticsearch允许跨域访问。</p>
<p>在config/elasticsearch.yml 后面增加以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启cors跨域访问支持，默认为false   </span><br><span class="line">http.cors.enabled: true   </span><br><span class="line">#跨域访问允许的域名地址，(允许所有域名)以上使用正则   </span><br><span class="line">http.cors.allow-origin: /.*/</span><br></pre></td></tr></table></figure>
<p>注意：将config/elasticsearch.yml另存为utf-8编码格式。</p>
<p>成功连接ES</p>
<p><img src="/img/1568627617789.png" alt="1568627617789"></p>
<p>注意：kibana\postman\head插件选择自己喜欢的一种使用即可。</p>
<p>本教程使用kibana的dev tool，因为地址栏省略了<a href="http://localhost:9200。">http://localhost:9200。</a></p>
<h1 id="5．-es快速入门"><a href="#5．-es快速入门" class="headerlink" title="5． es快速入门"></a>5． es快速入门</h1><h2 id="5-1．-文档（document）的数据格式"><a href="#5-1．-文档（document）的数据格式" class="headerlink" title="5.1． 文档（document）的数据格式"></a>5.1． 文档（document）的数据格式</h2><p>（1）应用系统的数据结构都是面向对象的，具有复杂的数据结构</p>
<p>（2）对象存储到数据库，需要将关联的复杂对象属性插到另一张表，查询时再拼接起来。</p>
<p>（3）es面向文档，文档中存储的数据结构，与对象一致。所以一个对象可以直接存成一个文档。</p>
<p>（4）es的document用json数据格式来表达。</p>
<p>例如：班级和学生关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String classInfoId;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ClassInfo</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String className;</span><br><span class="line">。。。。。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库中要设计所谓的一对多，多对一的两张表，外键等。查询出来时，还要关联，mybatis写映射文件，很繁琐。</p>
<p>而在es中，一个学生存成文档如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhang&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;classInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;三年二班&quot;</span><span class="punctuation">,</span>     </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2图书网站商品管理案例：背景介绍"><a href="#5-2图书网站商品管理案例：背景介绍" class="headerlink" title="5.2图书网站商品管理案例：背景介绍"></a>5.2图书网站商品管理案例：背景介绍</h2><p>有一个售卖图书的网站，需要为其基于ES构建一个后台系统，提供以下功能：</p>
<p>（1）对商品信息进行CRUD（增删改查）操作</p>
<p>（2）执行简单的结构化查询</p>
<p>（3）可以执行简单的全文检索，以及复杂的phrase（短语）检索</p>
<p>（4）对于全文检索的结果，可以进行高亮显示</p>
<p>（5）对数据进行简单的聚合分析</p>
<h2 id="5-3．-简单的集群管理"><a href="#5-3．-简单的集群管理" class="headerlink" title="5.3． 简单的集群管理"></a>5.3． 简单的集群管理</h2><h3 id="5-3-1快速检查集群的健康状况"><a href="#5-3-1快速检查集群的健康状况" class="headerlink" title="5.3.1快速检查集群的健康状况"></a>5.3.1快速检查集群的健康状况</h3><p>es提供了一套api，叫做cat api，可以查看es中各种各样的数据</p>
<p>GET /_cat/health?v</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1568635460 12:04:20  elasticsearch green           1         1      4   4    0    0        0             0                  -                100.0%</span><br></pre></td></tr></table></figure>
<p>如何快速了解集群的健康状况？green、yellow、red？</p>
<p>green：每个索引的primary shard和replica shard都是active状态的</p>
<p>yellow：每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态</p>
<p>red：不是所有索引的primary shard都是active状态的，部分索引有数据丢失了</p>
<h3 id="5-3-2-快速查看集群中有哪些索引"><a href="#5-3-2-快速查看集群中有哪些索引" class="headerlink" title="5.3.2 快速查看集群中有哪些索引"></a>5.3.2 快速查看集群中有哪些索引</h3><p>GET /_cat/indices?v</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">green  open   .kibana_task_manager            JBMgpucOSzenstLcjA_G4A   1   0          2            0     45.5kb         45.5kb</span><br><span class="line">green  open   .monitoring-kibana-7-2019.09.16 LIskf15DTcS70n4Q6t2bTA   1   0        433            0    218.2kb        218.2kb</span><br><span class="line">green  open   .monitoring-es-7-2019.09.16     RMeUN3tQRjqM8xBgw7Zong   1   0       3470         1724      1.9mb          1.9mb</span><br><span class="line">green  open   .kibana_1                       1cRiyIdATya5xS6qK5pGJw   1   0          4            0     18.2kb         18.2kb</span><br></pre></td></tr></table></figure>
<h3 id="5-3-3-简单的索引操作"><a href="#5-3-3-简单的索引操作" class="headerlink" title="5.3.3 简单的索引操作"></a>5.3.3 简单的索引操作</h3><p>创建索引：PUT /demo_index?pretty</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;demo_index&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>删除索引：DELETE /demo_index?pretty</p>
<h2 id="5-4商品的CRUD操作（document-CRUD操作）"><a href="#5-4商品的CRUD操作（document-CRUD操作）" class="headerlink" title="5.4商品的CRUD操作（document CRUD操作）"></a>5.4商品的CRUD操作（document CRUD操作）</h2><h3 id="5-4-1-新建图书索引"><a href="#5-4-1-新建图书索引" class="headerlink" title="5.4.1 新建图书索引"></a>5.4.1 新建图书索引</h3><p>首先建立图书索引 book</p>
<p>语法：put /index</p>
<p>PUT /book</p>
<p><img src="/img/1568632608676.png" alt="1568632608676"></p>
<h3 id="5-4-2-新增图书-新增文档"><a href="#5-4-2-新增图书-新增文档" class="headerlink" title="5.4.2 新增图书 :新增文档"></a>5.4.2 新增图书 :新增文档</h3><p>语法：PUT /index/type/id</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /book/_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bootstrap开发&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;studymodel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201002&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">38.6</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;2019-08-25 19:11:35&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;bootstrap&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dev&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /book/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java编程思想&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;studymodel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201001&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">68.6</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;2019-08-25 19:11:35&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dev&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PUT /book/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;spring开发基础&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,</span><br><span class="line"><span class="string">&quot;studymodel&quot;</span>: <span class="string">&quot;201001&quot;</span>,</span><br><span class="line"><span class="string">&quot;price&quot;</span>:<span class="number">88.6</span>,</span><br><span class="line"><span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2019-08-24 19:11:35&quot;</span>,</span><br><span class="line"><span class="string">&quot;pic&quot;</span>:<span class="string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>,</span><br><span class="line"><span class="string">&quot;tags&quot;</span>: [ <span class="string">&quot;spring&quot;</span>, <span class="string">&quot;java&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-4-3-查询图书：检索文档"><a href="#5-4-3-查询图书：检索文档" class="headerlink" title="5.4.3 查询图书：检索文档"></a>5.4.3 查询图书：检索文档</h3><p>语法：GET /index/type/id</p>
<p>查看图书:GET /book/_doc/1  就可看到json形式的文档。方便程序解析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;_version&quot; : 4,</span><br><span class="line"></span><br><span class="line">  &quot;_seq_no&quot; : 5,</span><br><span class="line"></span><br><span class="line">  &quot;_primary_term&quot; : 1,</span><br><span class="line"></span><br><span class="line">  &quot;found&quot; : true,</span><br><span class="line"></span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line"></span><br><span class="line">    &quot;name&quot; : &quot;Bootstrap开发&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;description&quot; : &quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;studymodel&quot; : &quot;201002&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;price&quot; : 38.6,</span><br><span class="line"></span><br><span class="line">    &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;tags&quot; : [</span><br><span class="line"></span><br><span class="line">      &quot;bootstrap&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;开发&quot;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为方便查看索引中的数据，kibana可以如下操作</p>
<p>Kibana-discover- Create index pattern- Index pattern填book</p>
<p><img src="/img/1568632860925.png" alt="1568632860925"></p>
<p>下一步，再点击discover就可看到数据。</p>
<p><img src="/img/1568632872820.png" alt="1568632872820"></p>
<p>点击json还可以看到原始数据</p>
<p><img src="/img/1568632881931.png" alt="1568632881931"></p>
<p>为方便查看索引中的数据，head可以如下操作</p>
<p>点击数据浏览，点击book索引。</p>
<p><img src="/img/1568632895254.png" alt="1568632895254"></p>
<h3 id="5-4-4-修改图书：替换操作"><a href="#5-4-4-修改图书：替换操作" class="headerlink" title="5.4.4 修改图书：替换操作"></a>5.4.4 修改图书：替换操作</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /book/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bootstrap开发教程1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;studymodel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201002&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">38.6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;2019-08-25 19:11:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;bootstrap&quot;</span><span class="punctuation">,</span> <span class="string">&quot;开发&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>替换操作是整体覆盖，要带上所有信息。</p>
<h3 id="5-4-5-修改图书：更新文档"><a href="#5-4-5-修改图书：更新文档" class="headerlink" title="5.4.5 修改图书：更新文档"></a>5.4.5 修改图书：更新文档</h3><p>语法：POST  /{index}/type /{id}/_update</p>
<p>或者POST  /{index}/_update/{id}</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /book/_update/<span class="number">1</span>/ </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot; Bootstrap开发教程高级&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-4-6-删除图书：删除文档"><a href="#5-4-6-删除图书：删除文档" class="headerlink" title="5.4.6 删除图书：删除文档"></a>5.4.6 删除图书：删除文档</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /book/_doc/1</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="6．-文档document入门"><a href="#6．-文档document入门" class="headerlink" title="6． 文档document入门"></a>6． 文档document入门</h1><h2 id="6-1．-默认自带字段解析"><a href="#6-1．-默认自带字段解析" class="headerlink" title="6.1． 默认自带字段解析"></a>6.1． 默认自带字段解析</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bootstrap开发教程1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;studymodel&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;201002&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">38.6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-08-25 19:11:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pic&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;bootstrap&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;开发&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-1-1-index"><a href="#6-1-1-index" class="headerlink" title="6.1.1 _index"></a>6.1.1 _index</h3><ul>
<li>含义：此文档属于哪个索引</li>
<li>原则：类似数据放在一个索引中。数据库中表的定义规则。如图书信息放在book索引中，员工信息放在employee索引中。各个索引存储和搜索时互不影响。</li>
<li>定义规则：英文小写。尽量不要使用特殊字符。order user </li>
</ul>
<h3 id="6-1-2-type"><a href="#6-1-2-type" class="headerlink" title="6.1.2 _type"></a>6.1.2 _type</h3><ul>
<li>含义：类别。book java node</li>
<li>注意：以后的es9将彻底删除此字段，所以当前版本在不断弱化type。不需要关注。见到_type都为doc。</li>
</ul>
<h3 id="6-1-3-id"><a href="#6-1-3-id" class="headerlink" title="6.1.3 _id"></a>6.1.3 _id</h3><p>含义：文档的唯一标识。就像表的id主键。结合索引可以标识和定义一个文档。</p>
<p>生成：手动（put /index/_doc/id）、自动</p>
<h3 id="6-1-4-创建索引时，不同数据放到不同索引中"><a href="#6-1-4-创建索引时，不同数据放到不同索引中" class="headerlink" title="6.1.4 创建索引时，不同数据放到不同索引中"></a>6.1.4 创建索引时，不同数据放到不同索引中</h3><h2 id="6-2．-生成文档id"><a href="#6-2．-生成文档id" class="headerlink" title="6.2． 生成文档id"></a>6.2． 生成文档id</h2><h3 id="6-2-1-手动生成id"><a href="#6-2-1-手动生成id" class="headerlink" title="6.2.1 手动生成id"></a>6.2.1 手动生成id</h3><p>场景：数据从其他系统导入时，本身有唯一主键。如数据库中的图书、员工信息等。</p>
<p>用法：put /index/_doc/id</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-2-2-自动生成id"><a href="#6-2-2-自动生成id" class="headerlink" title="6.2.2 自动生成id"></a>6.2.2 自动生成id</h3><p>用法：POST /index/_doc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /test_index/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;x29LOm0BPsY0gSJFYZAl&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>自动id特点：</p>
<p>长度为20个字符，URL安全，base64编码，GUID，分布式生成不冲突 </p>
<h2 id="6-3．-source-字段"><a href="#6-3．-source-字段" class="headerlink" title="6.3． _source 字段"></a>6.3． _source 字段</h2><h3 id="6-3-1-source"><a href="#6-3-1-source" class="headerlink" title="6.3.1 _source"></a>6.3.1 _source</h3><p>含义：插入数据时的所有字段和值。在get获取数据时，在_source字段中原样返回。</p>
<p>GET  /book/_doc/1</p>
<h3 id="6-3-2-定制返回字段"><a href="#6-3-2-定制返回字段" class="headerlink" title="6.3.2 定制返回字段"></a>6.3.2 定制返回字段</h3><p>就像sql不要select *,而要select name,price from book …一样。</p>
<p>GET  /book/_doc/1?__source_includes=name,price    </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">38.6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bootstrap开发教程1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-4．-文档的替换与删除"><a href="#6-4．-文档的替换与删除" class="headerlink" title="6.4． 文档的替换与删除"></a>6.4． 文档的替换与删除</h2><h3 id="6-4-1全量替换"><a href="#6-4-1全量替换" class="headerlink" title="6.4.1全量替换"></a>6.4.1全量替换</h3><p>执行两次，返回结果中版本号（_version）在不断上升。此过程为全量替换。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>实质：旧文档的内容不会立即删除，只是标记为deleted。适当的时机，集群会将这些文档删除。</p>
<h3 id="6-4-2-强制创建"><a href="#6-4-2-强制创建" class="headerlink" title="6.4.2 强制创建"></a>6.4.2 强制创建</h3><p>为防止覆盖原有数据，我们在新增时，设置为强制创建，不会覆盖原有文档。</p>
<p>语法：PUT /index/ _doc/id/_create</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/<span class="number">1</span>/_create</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;root_cause&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;version_conflict_engine_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[2]: version conflict, document already exists (current version [1])&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lqzVqxZLQuCnd6LYtZsMkg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test_index&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;version_conflict_engine_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[2]: version conflict, document already exists (current version [1])&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lqzVqxZLQuCnd6LYtZsMkg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test_index&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">409</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-4-3-删除"><a href="#6-4-3-删除" class="headerlink" title="6.4.3 删除"></a>6.4.3 删除</h3><p>DELETE /index/_doc/id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE  /test_index/_doc/1/</span><br></pre></td></tr></table></figure>
<p>实质：旧文档的内容不会立即删除，只是标记为deleted。适当的时机，集群会将这些文档删除。</p>
<p>lazy delete</p>
<h2 id="6-5．-局部替换-partial-update"><a href="#6-5．-局部替换-partial-update" class="headerlink" title="6.5． 局部替换 partial update"></a>6.5． 局部替换 partial update</h2><p>使用 PUT /index/type/id 为文档全量替换，需要将文档所有数据提交。</p>
<p>partial update局部替换则只修改变动字段。</p>
<p>用法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">post /index/type/id/_update </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="string">&quot;field&quot;</span>：<span class="string">&quot;value&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="图解内部原理"><a href="#图解内部原理" class="headerlink" title="图解内部原理"></a>图解内部原理</h4><p>内部与全量替换是一样的，旧文档标记为删除，新建一个文档。</p>
<p>优点：</p>
<ul>
<li>大大减少网络传输次数和流量，提升性能</li>
<li>减少并发冲突发生的概率。</li>
</ul>
<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>插入文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field1&quot;: &quot;itcst&quot;,</span><br><span class="line">  &quot;test_field2&quot;: &quot;itheima&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改字段1</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /test_index/_doc/<span class="number">5</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test_field2&quot;</span><span class="punctuation">:</span> <span class="string">&quot; itheima 2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-6．-使用脚本更新"><a href="#6-6．-使用脚本更新" class="headerlink" title="6.6． 使用脚本更新"></a>6.6． 使用脚本更新</h2><p>es可以内置脚本执行复杂操作。例如painless脚本。</p>
<p>注意：groovy脚本在es6以后就不支持了。原因是耗内存，不安全远程注入漏洞。</p>
<h3 id="6-6-1内置脚本"><a href="#6-6-1内置脚本" class="headerlink" title="6.6.1内置脚本"></a>6.6.1内置脚本</h3><p>需求1：修改文档6的num字段，+1。</p>
<p>插入数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/<span class="number">6</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>执行脚本操作</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /test_index/_doc/<span class="number">6</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;script&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ctx._source.num+=1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>查询数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_doc/6</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;num&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>需求2：搜索所有文档，将num字段乘以2输出</p>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/7</span><br><span class="line">&#123;</span><br><span class="line">  &quot;num&quot;: 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script_fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my_doubled_field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expression&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc[&#x27;num&#x27;] * multiplier&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;multiplier&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;7&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">          &quot;my_doubled_field&quot; : [</span><br><span class="line">            10.0</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-6-2-外部脚本"><a href="#6-6-2-外部脚本" class="headerlink" title="6.6.2 外部脚本"></a>6.6.2 外部脚本</h3><p>Painless是内置支持的。脚本内容可以通过多种途径传给 es，包括 rest 接口，或者放到 config/scripts目录等，默认开启。</p>
<p>注意：脚本性能低下，且容易发生注入，本教程忽略。</p>
<p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html</a></p>
<h2 id="6-7．-图解es的并发问题"><a href="#6-7．-图解es的并发问题" class="headerlink" title="6.7． 图解es的并发问题"></a>6.7． 图解es的并发问题</h2><p>如同秒杀，多线程情况下，es同样会出现并发冲突问题。</p>
<h2 id="6-8．-图解悲观锁与乐观锁机制"><a href="#6-8．-图解悲观锁与乐观锁机制" class="headerlink" title="6.8． 图解悲观锁与乐观锁机制"></a>6.8． 图解悲观锁与乐观锁机制</h2><p>为控制并发问题，我们通常采用锁机制。分为悲观锁和乐观锁两种机制。</p>
<p>悲观锁：很悲观，所有情况都上锁。此时只有一个线程可以操作数据。具体例子为数据库中的行级锁、表级锁、读锁、写锁等。</p>
<p>特点：优点是方便，直接加锁，对程序透明。缺点是效率低。</p>
<p>乐观锁：很乐观，对数据本身不加锁。提交数据时，通过一种机制验证是否存在冲突，如es中通过版本号验证。</p>
<p>特点：优点是并发能力高。缺点是操作繁琐，在提交数据时，可能反复重试多次。</p>
<h2 id="6-9．-图解es内部基于-version乐观锁控制"><a href="#6-9．-图解es内部基于-version乐观锁控制" class="headerlink" title="6.9． 图解es内部基于_version乐观锁控制"></a>6.9． 图解es内部基于_version乐观锁控制</h2><h4 id="实验基于-version的版本控制"><a href="#实验基于-version的版本控制" class="headerlink" title="实验基于_version的版本控制"></a>实验基于_version的版本控制</h4><p>es对于文档的增删改都是基于版本号。</p>
<p>1新增多次文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回版本号递增</p>
<p>2删除此文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /test_index/_doc/3</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /test_index/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">  &quot;_version&quot; : 6,</span><br><span class="line">  &quot;result&quot; : &quot;deleted&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 7,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3再新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到版本号依然递增，验证延迟删除策略。</p>
<p>如果删除一条数据立马删除的话，所有分片和副本都要立马删除，对es集群压力太大。</p>
<h4 id="图解es内部并发控制"><a href="#图解es内部并发控制" class="headerlink" title="图解es内部并发控制"></a>图解es内部并发控制</h4><p>es内部主从同步时，是多线程异步。乐观锁机制。</p>
<h2 id="6-10．-演示客户端程序基于-version并发操作流程"><a href="#6-10．-演示客户端程序基于-version并发操作流程" class="headerlink" title="6.10． 演示客户端程序基于_version并发操作流程"></a>6.10． 演示客户端程序基于_version并发操作流程</h2><p>java python客户端更新的机制。</p>
<h4 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/<span class="number">5</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;itcast&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>返回： </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="客户端1修改。带版本号1。"><a href="#客户端1修改。带版本号1。" class="headerlink" title="客户端1修改。带版本号1。"></a>客户端1修改。带版本号1。</h4><p>首先获取数据的当前版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_doc/5</span><br></pre></td></tr></table></figure>
<p>更新文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/5?version=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast1&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test_index/_doc/5?if_seq_no=21&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="客户端2并发修改。带版本号1。"><a href="#客户端2并发修改。带版本号1。" class="headerlink" title="客户端2并发修改。带版本号1。"></a>客户端2并发修改。带版本号1。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/5?version=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast2&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test_index/_doc/5?if_seq_no=21&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错。</p>
<h4 id="客户端2重新查询。得到最新版本为2。seq-no-22"><a href="#客户端2重新查询。得到最新版本为2。seq-no-22" class="headerlink" title="客户端2重新查询。得到最新版本为2。seq_no=22"></a>客户端2重新查询。得到最新版本为2。seq_no=22</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_doc/4</span><br></pre></td></tr></table></figure>
<h4 id="客户端2并发修改。带版本号2。"><a href="#客户端2并发修改。带版本号2。" class="headerlink" title="客户端2并发修改。带版本号2。"></a>客户端2并发修改。带版本号2。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/4?version=2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast2&quot;</span><br><span class="line">&#125;</span><br><span class="line">es7</span><br><span class="line">PUT /test_index/_doc/5?if_seq_no=22&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改成功。</p>
<h2 id="6-11．-演示自己手动控制版本号-external-version"><a href="#6-11．-演示自己手动控制版本号-external-version" class="headerlink" title="6.11． 演示自己手动控制版本号 external version"></a>6.11． 演示自己手动控制版本号 external version</h2><p>背景：已有数据是在数据库中，有自己手动维护的版本号的情况下，可以使用external version控制。hbase。</p>
<p>要求：修改时external version要大于当前文档的_version</p>
<p>对比：基于_version时，修改的文档version等于当前文档的版本号。</p>
<p>使用?version=1&amp;version_type=external</p>
<h4 id="新建文档-1"><a href="#新建文档-1" class="headerlink" title="新建文档"></a>新建文档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新文档：</p>
<h4 id="客户端1修改文档"><a href="#客户端1修改文档" class="headerlink" title="客户端1修改文档"></a>客户端1修改文档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/4?version=2&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="客户端2同时修改"><a href="#客户端2同时修改" class="headerlink" title="客户端2同时修改"></a>客户端2同时修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/4?version=2&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;[4]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;,</span><br><span class="line">        &quot;index_uuid&quot;: &quot;-rqYZ2EcSPqL6pu8Gi35jw&quot;,</span><br><span class="line">        &quot;shard&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;[4]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;,</span><br><span class="line">    &quot;index_uuid&quot;: &quot;-rqYZ2EcSPqL6pu8Gi35jw&quot;,</span><br><span class="line">    &quot;shard&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 409</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="客户端2重新查询数据"><a href="#客户端2重新查询数据" class="headerlink" title="客户端2重新查询数据"></a>客户端2重新查询数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_doc/4</span><br></pre></td></tr></table></figure>
<h4 id="客户端2重新修改数据"><a href="#客户端2重新修改数据" class="headerlink" title="客户端2重新修改数据"></a>客户端2重新修改数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/4?version=3&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_field&quot;: &quot;itcast2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-12．更新时-retry-on-conflict-参数"><a href="#6-12．更新时-retry-on-conflict-参数" class="headerlink" title="6.12．更新时 retry_on_conflict 参数"></a>6.12．更新时 retry_on_conflict 参数</h2><h4 id="retry-on-conflict"><a href="#retry-on-conflict" class="headerlink" title="retry_on_conflict"></a>retry_on_conflict</h4><p>指定重试次数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test_index/_doc/5/_update?retry_on_conflict=3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;test_field&quot;: &quot;itcast1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="与-version结合使用"><a href="#与-version结合使用" class="headerlink" title="与 _version结合使用"></a>与 _version结合使用</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /test_index/_doc/<span class="number">5</span>/_update?retry_on_conflict=<span class="number">3</span>&amp;version=<span class="number">22</span>&amp;version_type=external</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;itcast1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-13．-批量查询-mget"><a href="#6-13．-批量查询-mget" class="headerlink" title="6.13． 批量查询 mget"></a>6.13． 批量查询 mget</h2><p>单条查询 GET  /test_index/_doc/1，如果查询多个id的文档一条一条查询，网络开销太大。</p>
<h4 id="mget-批量查询："><a href="#mget-批量查询：" class="headerlink" title="mget 批量查询："></a>mget 批量查询：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_type&quot; :  &quot;_doc&quot;,</span><br><span class="line">         &quot;_id&quot; :    1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_type&quot; :  &quot;_doc&quot;,</span><br><span class="line">         &quot;_id&quot; :    7</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">      &quot;_version&quot; : 6,</span><br><span class="line">      &quot;_seq_no&quot; : 12,</span><br><span class="line">      &quot;_primary_term&quot; : 1,</span><br><span class="line">      &quot;found&quot; : true,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;test_field&quot; : &quot;test12333123321321&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">      &quot;_version&quot; : 6,</span><br><span class="line">      &quot;_seq_no&quot; : 18,</span><br><span class="line">      &quot;_primary_term&quot; : 1,</span><br><span class="line">      &quot;found&quot; : true,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;test_field&quot; : &quot;test3213&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提示去掉type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_id&quot; :    2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span><br><span class="line">         &quot;_id&quot; :    3</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="同一索引下批量查询："><a href="#同一索引下批量查询：" class="headerlink" title="同一索引下批量查询："></a>同一索引下批量查询：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; :    2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; :    3</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第三种写法：搜索写法"><a href="#第三种写法：搜索写法" class="headerlink" title="第三种写法：搜索写法"></a>第三种写法：搜索写法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post /test_index/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;ids&quot; : &#123;</span><br><span class="line">            &quot;values&quot; : [&quot;1&quot;, &quot;7&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-14．-批量增删改-bulk"><a href="#6-14．-批量增删改-bulk" class="headerlink" title="6.14． 批量增删改 bulk"></a>6.14． 批量增删改 bulk</h2><p>Bulk 操作解释将文档的增删改查一些列操作，通过一次请求全都做完。减少网络传输次数。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;&quot;action&quot;: &#123;&quot;metadata&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;data&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>如下操作，删除5，新增14，修改2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; &quot;delete&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;5&quot; &#125;&#125; </span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;14&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;test_field&quot;: &quot;test14&quot; &#125;</span><br><span class="line">&#123; &quot;update&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;2&quot;&#125; &#125;</span><br><span class="line">&#123; &quot;doc&quot; : &#123;&quot;test_field&quot; : &quot;bulk test&quot;&#125; &#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>1功能：</p>
<ul>
<li>delete：删除一个文档，只要1个json串就可以了</li>
<li>create：相当于强制创建  PUT /index/type/id/_create </li>
<li>index：普通的put操作，可以是创建文档，也可以是全量替换文档</li>
<li>update：执行的是局部更新partial update操作</li>
</ul>
<p>2格式：每个json不能换行。相邻json必须换行。</p>
<p>3隔离：每个操作互不影响。操作失败的行会返回其失败信息。</p>
<p>4实际用法：bulk请求一次不要太大，否则一下积压到内存中，性能会下降。所以，一次请求几千个操作、大小在几M正好。</p>
<h2 id="6-15．-文档概念学习总结"><a href="#6-15．-文档概念学习总结" class="headerlink" title="6.15． 文档概念学习总结"></a>6.15． 文档概念学习总结</h2><p><strong>章节回顾</strong></p>
<p>1文档的增删改查</p>
<p>2文档字段解析</p>
<p>3内部锁机制</p>
<p>4批量查询修改</p>
<p><strong>es是什么</strong></p>
<p>一个分布式的文档数据存储系统distributed document store。es看做一个分布式nosql数据库。如redis\mongoDB\hbase。</p>
<p>文档数据：es可以存储和操作json文档类型的数据，而且这也是es的核心数据结构。<br>        存储系统：es可以对json文档类型的数据进行存储，查询，创建，更新，删除，等等操作。</p>
<p><strong>应用场景</strong></p>
<ul>
<li>大数据。es的分布式特点，水平扩容承载大数据。</li>
<li>数据结构灵活。列随时变化。使用关系型数据库将会建立大量的关联表，增加系统复杂度。</li>
<li>数据操作简单。就是查询，不涉及事务。</li>
</ul>
<p><strong>举例</strong></p>
<p>电商页面、传统论坛页面等。面向的对象比较复杂，但是作为终端，没有太复杂的功能（事务），只涉及简单的增删改查crud。</p>
<p>这个时候选用ES这种NoSQL型的数据存储，比传统的复杂的事务强大的关系型数据库，更加合适一些。无论是性能，还是吞吐量，可能都会更好。</p>
<h1 id="7．-Java-api-实现文档管理"><a href="#7．-Java-api-实现文档管理" class="headerlink" title="7． Java api 实现文档管理"></a>7． Java api 实现文档管理</h1><h2 id="7-1-es技术特点"><a href="#7-1-es技术特点" class="headerlink" title="7.1 es技术特点"></a>7.1 es技术特点</h2><p>1es技术比较特殊，不像其他分布式、大数据课程，haddop、spark、hbase。es代码层面很好写，难的是概念的理解。</p>
<p>2es最重要的是他的rest api。跨语言的。在真实生产中，探查数据、分析数据，使用rest更方便。</p>
<p>3本课程将会大量讲解内部原理及rest api。java代码会在重要的api后学习。</p>
<h2 id="7-2-java-客户端简单获取数据"><a href="#7-2-java-客户端简单获取数据" class="headerlink" title="7.2 java 客户端简单获取数据"></a>7.2 java 客户端简单获取数据</h2><p>java api 文档 <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-overview.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-overview.html</a></p>
<p>low : 偏向底层。</p>
<p>high：高级封装。足够。</p>
<p>1导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2代码</p>
<p>步骤 </p>
<p>​    1 获取连接客户端</p>
<p>​    2构建请求</p>
<p>​    3执行</p>
<p>​    4获取结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取连接客户端</span></span><br><span class="line"><span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">        RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"><span class="comment">//构建请求</span></span><br><span class="line"><span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">// 获取结果</span></span><br><span class="line"><span class="keyword">if</span> (getResponse.isExists()) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">version</span> <span class="operator">=</span> getResponse.getVersion();</span><br><span class="line">    <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> getResponse.getSourceAsString();<span class="comment">//检索文档(String形式)</span></span><br><span class="line">    System.out.println(sourceAsString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-3-结合spring-boot-test测试文档查询"><a href="#7-3-结合spring-boot-test测试文档查询" class="headerlink" title="7.3 结合spring-boot-test测试文档查询"></a>7.3 结合spring-boot-test测试文档查询</h2><p>0为什么使用spring boot test</p>
<ul>
<li>​    当今趋势</li>
<li>​    方便开发</li>
<li>​    创建连接交由spring容器，避免每次请求的网络开销。</li>
</ul>
<p>1导包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2配置 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-search</span></span><br><span class="line"><span class="attr">heima:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">hostlist:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200</span> <span class="comment">#多个结点中间用逗号分隔</span></span><br></pre></td></tr></table></figure>
<p>3代码</p>
<p>主类</p>
<p>配置类</p>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//查询文档</span></span><br><span class="line">       <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//构建请求</span></span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;test_post&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//========================可选参数 start======================</span></span><br><span class="line">        <span class="comment">//为特定字段配置_source_include</span></span><br><span class="line"><span class="comment">//        String[] includes = new String[]&#123;&quot;user&quot;, &quot;message&quot;&#125;;</span></span><br><span class="line"><span class="comment">//        String[] excludes = Strings.EMPTY_ARRAY;</span></span><br><span class="line"><span class="comment">//        FetchSourceContext fetchSourceContext = new FetchSourceContext(true, includes, excludes);</span></span><br><span class="line"><span class="comment">//        getRequest.fetchSourceContext(fetchSourceContext);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为特定字段配置_source_excludes</span></span><br><span class="line"><span class="comment">//        String[] includes1 = new String[]&#123;&quot;user&quot;, &quot;message&quot;&#125;;</span></span><br><span class="line"><span class="comment">//        String[] excludes1 = Strings.EMPTY_ARRAY;</span></span><br><span class="line"><span class="comment">//        FetchSourceContext fetchSourceContext1 = new FetchSourceContext(true, includes1, excludes1);</span></span><br><span class="line"><span class="comment">//        getRequest.fetchSourceContext(fetchSourceContext1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置路由</span></span><br><span class="line"><span class="comment">//        getRequest.routing(&quot;routing&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ========================可选参数 end=====================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询 同步查询</span></span><br><span class="line">      <span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步查询</span></span><br><span class="line"><span class="comment">//        ActionListener&lt;GetResponse&gt; listener = new ActionListener&lt;GetResponse&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            //查询成功时的立马执行的方法</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onResponse(GetResponse getResponse) &#123;</span></span><br><span class="line"><span class="comment">//                long version = getResponse.getVersion();</span></span><br><span class="line"><span class="comment">//                String sourceAsString = getResponse.getSourceAsString();//检索文档(String形式)</span></span><br><span class="line"><span class="comment">//                System.out.println(sourceAsString);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //查询失败时的立马执行的方法</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onFailure(Exception e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        //执行异步请求</span></span><br><span class="line"><span class="comment">//        client.getAsync(getRequest, RequestOptions.DEFAULT, listener);</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Thread.sleep(5000);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        <span class="keyword">if</span> (getResponse.isExists()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">version</span> <span class="operator">=</span> getResponse.getVersion();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> getResponse.getSourceAsString();<span class="comment">//检索文档(String形式)</span></span><br><span class="line">            System.out.println(sourceAsString);</span><br><span class="line">            <span class="type">byte</span>[] sourceAsBytes = getResponse.getSourceAsBytes();<span class="comment">//以字节接受</span></span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = getResponse.getSourceAsMap();</span><br><span class="line">            System.out.println(sourceAsMap);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-4-结合spring-boot-test测试文档新增"><a href="#7-4-结合spring-boot-test测试文档新增" class="headerlink" title="7.4 结合spring-boot-test测试文档新增"></a>7.4 结合spring-boot-test测试文档新增</h2><p>rest api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT test_post/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;:&quot;tomas&quot;,</span><br><span class="line">  &quot;postDate&quot;:&quot;2019-07-18&quot;,</span><br><span class="line">  &quot;message&quot;:&quot;trying out es1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testAdd() throws IOException &#123;</span><br><span class="line">//        1构建请求</span><br><span class="line">        IndexRequest request=new IndexRequest(&quot;test_posts&quot;);</span><br><span class="line">        request.id(&quot;3&quot;);</span><br><span class="line">//        =======================构建文档============================</span><br><span class="line">//        构建方法1</span><br><span class="line">        String jsonString=&quot;&#123;\n&quot; +</span><br><span class="line">                &quot;  \&quot;user\&quot;:\&quot;tomas J\&quot;,\n&quot; +</span><br><span class="line">                &quot;  \&quot;postDate\&quot;:\&quot;2019-07-18\&quot;,\n&quot; +</span><br><span class="line">                &quot;  \&quot;message\&quot;:\&quot;trying out es3\&quot;\n&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        request.source(jsonString, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">//        构建方法2</span><br><span class="line">//        Map&lt;String,Object&gt; jsonMap=new HashMap&lt;&gt;();</span><br><span class="line">//        jsonMap.put(&quot;user&quot;, &quot;tomas&quot;);</span><br><span class="line">//        jsonMap.put(&quot;postDate&quot;, &quot;2019-07-18&quot;);</span><br><span class="line">//        jsonMap.put(&quot;message&quot;, &quot;trying out es2&quot;);</span><br><span class="line">//        request.source(jsonMap);</span><br><span class="line"></span><br><span class="line">//        构建方法3</span><br><span class="line">//        XContentBuilder builder= XContentFactory.jsonBuilder();</span><br><span class="line">//        builder.startObject();</span><br><span class="line">//        &#123;</span><br><span class="line">//            builder.field(&quot;user&quot;, &quot;tomas&quot;);</span><br><span class="line">//            builder.timeField(&quot;postDate&quot;, new Date());</span><br><span class="line">//            builder.field(&quot;message&quot;, &quot;trying out es2&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line">//        builder.endObject();</span><br><span class="line">//        request.source(builder);</span><br><span class="line">//        构建方法4</span><br><span class="line">//        request.source(&quot;user&quot;,&quot;tomas&quot;,</span><br><span class="line">//                    &quot;postDate&quot;,new Date(),</span><br><span class="line">//                &quot;message&quot;,&quot;trying out es2&quot;);</span><br><span class="line">//</span><br><span class="line">//        ========================可选参数===================================</span><br><span class="line">        //设置超时时间</span><br><span class="line">        request.timeout(TimeValue.timeValueSeconds(1));</span><br><span class="line">        request.timeout(&quot;1s&quot;);</span><br><span class="line"></span><br><span class="line">        //自己维护版本号</span><br><span class="line">//        request.version(2);</span><br><span class="line">//        request.versionType(VersionType.EXTERNAL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        2执行</span><br><span class="line">        //同步</span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        //异步</span><br><span class="line">//        ActionListener&lt;IndexResponse&gt; listener=new ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">//            @Override</span><br><span class="line">//            public void onResponse(IndexResponse indexResponse) &#123;</span><br><span class="line">//</span><br><span class="line">//            &#125;</span><br><span class="line">//</span><br><span class="line">//            @Override</span><br><span class="line">//            public void onFailure(Exception e) &#123;</span><br><span class="line">//</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125;;</span><br><span class="line">//        client.indexAsync(request,RequestOptions.DEFAULT, listener );</span><br><span class="line">//        try &#123;</span><br><span class="line">//            Thread.sleep(5000);</span><br><span class="line">//        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">//            e.printStackTrace();</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        3获取结果</span><br><span class="line">        String index = indexResponse.getIndex();</span><br><span class="line">        String id = indexResponse.getId();</span><br><span class="line">        //获取插入的类型</span><br><span class="line">        if(indexResponse.getResult()== DocWriteResponse.Result.CREATED)&#123;</span><br><span class="line">            DocWriteResponse.Result result=indexResponse.getResult();</span><br><span class="line">            System.out.println(&quot;CREATED:&quot;+result);</span><br><span class="line">        &#125;else if(indexResponse.getResult()== DocWriteResponse.Result.UPDATED)&#123;</span><br><span class="line">            DocWriteResponse.Result result=indexResponse.getResult();</span><br><span class="line">            System.out.println(&quot;UPDATED:&quot;+result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReplicationResponse.ShardInfo shardInfo = indexResponse.getShardInfo();</span><br><span class="line">        if(shardInfo.getTotal()!=shardInfo.getSuccessful())&#123;</span><br><span class="line">            System.out.println(&quot;处理成功的分片数少于总分片！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(shardInfo.getFailed()&gt;0)&#123;</span><br><span class="line">           for (ReplicationResponse.ShardInfo.Failure failure:shardInfo.getFailures()) &#123;</span><br><span class="line">               String reason = failure.reason();//处理潜在的失败原因</span><br><span class="line">               System.out.println(reason);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-5结合spring-boot-test测试文档修改"><a href="#7-5结合spring-boot-test测试文档修改" class="headerlink" title="7.5结合spring-boot-test测试文档修改"></a>7.5结合spring-boot-test测试文档修改</h2><p>rest api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post /test_posts/_doc/3/_update </span><br><span class="line">&#123;</span><br><span class="line">   &quot;doc&quot;: &#123;</span><br><span class="line">      &quot;user&quot;：&quot;tomas J&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  @Test</span><br><span class="line">    public void testUpdate() throws IOException &#123;</span><br><span class="line">//        1构建请求</span><br><span class="line">        UpdateRequest request = new UpdateRequest(&quot;test_posts&quot;, &quot;3&quot;);</span><br><span class="line">        Map&lt;String, Object&gt; jsonMap = new HashMap&lt;&gt;();</span><br><span class="line">        jsonMap.put(&quot;user&quot;, &quot;tomas JJ&quot;);</span><br><span class="line">        request.doc(jsonMap);</span><br><span class="line">//===============================可选参数==========================================</span><br><span class="line">        request.timeout(&quot;1s&quot;);//超时时间</span><br><span class="line"></span><br><span class="line">        //重试次数</span><br><span class="line">        request.retryOnConflict(3);</span><br><span class="line"></span><br><span class="line">        //设置在继续更新之前，必须激活的分片数</span><br><span class="line">//        request.waitForActiveShards(2);</span><br><span class="line">        //所有分片都是active状态，才更新</span><br><span class="line">//        request.waitForActiveShards(ActiveShardCount.ALL);</span><br><span class="line"></span><br><span class="line">//        2执行</span><br><span class="line">//        同步</span><br><span class="line">        UpdateResponse updateResponse = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">//        异步</span><br><span class="line"></span><br><span class="line">//        3获取数据</span><br><span class="line">        updateResponse.getId();</span><br><span class="line">        updateResponse.getIndex();</span><br><span class="line"></span><br><span class="line">        //判断结果</span><br><span class="line">        if (updateResponse.getResult() == DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span><br><span class="line">            System.out.println(&quot;CREATED:&quot; + result);</span><br><span class="line">        &#125; else if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span><br><span class="line">            System.out.println(&quot;UPDATED:&quot; + result);</span><br><span class="line">        &#125;else if(updateResponse.getResult() == DocWriteResponse.Result.DELETED)&#123;</span><br><span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span><br><span class="line">            System.out.println(&quot;DELETED:&quot; + result);</span><br><span class="line">        &#125;else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP)&#123;</span><br><span class="line">            //没有操作</span><br><span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span><br><span class="line">            System.out.println(&quot;NOOP:&quot; + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-6结合spring-boot-test测试文档删除"><a href="#7-6结合spring-boot-test测试文档删除" class="headerlink" title="7.6结合spring-boot-test测试文档删除"></a>7.6结合spring-boot-test测试文档删除</h2><p>rest api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /test_posts/_doc/3</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> @Test</span><br><span class="line">    public void testDelete() throws IOException &#123;</span><br><span class="line">//        1构建请求</span><br><span class="line">        DeleteRequest request =new DeleteRequest(&quot;test_posts&quot;,&quot;3&quot;);</span><br><span class="line">        //可选参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        2执行</span><br><span class="line">        DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        3获取数据</span><br><span class="line">        deleteResponse.getId();</span><br><span class="line">        deleteResponse.getIndex();</span><br><span class="line"></span><br><span class="line">        DocWriteResponse.Result result = deleteResponse.getResult();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-7结合spring-boot-test测试文档bulk"><a href="#7-7结合spring-boot-test测试文档bulk" class="headerlink" title="7.7结合spring-boot-test测试文档bulk"></a>7.7结合spring-boot-test测试文档bulk</h2><p>rest api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;&quot;action&quot;: &#123;&quot;metadata&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;data&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testBulk() throws IOException &#123;</span><br><span class="line">//        1创建请求</span><br><span class="line">        BulkRequest request = new BulkRequest();</span><br><span class="line">//        request.add(new IndexRequest(&quot;post&quot;).id(&quot;1&quot;).source(XContentType.JSON, &quot;field&quot;, &quot;1&quot;));</span><br><span class="line">//        request.add(new IndexRequest(&quot;post&quot;).id(&quot;2&quot;).source(XContentType.JSON, &quot;field&quot;, &quot;2&quot;));</span><br><span class="line"></span><br><span class="line">        request.add(new UpdateRequest(&quot;post&quot;,&quot;2&quot;).doc(XContentType.JSON, &quot;field&quot;, &quot;3&quot;));</span><br><span class="line">        request.add(new DeleteRequest(&quot;post&quot;).id(&quot;1&quot;));</span><br><span class="line"></span><br><span class="line">//        2执行</span><br><span class="line">        BulkResponse bulkResponse = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        for (BulkItemResponse itemResponse : bulkResponse) &#123;</span><br><span class="line">            DocWriteResponse itemResponseResponse = itemResponse.getResponse();</span><br><span class="line"></span><br><span class="line">            switch (itemResponse.getOpType()) &#123;</span><br><span class="line">                case INDEX:</span><br><span class="line">                case CREATE:</span><br><span class="line">                    IndexResponse indexResponse = (IndexResponse) itemResponseResponse;</span><br><span class="line">                    indexResponse.getId();</span><br><span class="line">                    System.out.println(indexResponse.getResult());</span><br><span class="line">                    break;</span><br><span class="line">                case UPDATE:</span><br><span class="line">                    UpdateResponse updateResponse = (UpdateResponse) itemResponseResponse;</span><br><span class="line">                    updateResponse.getIndex();</span><br><span class="line">                    System.out.println(updateResponse.getResult());</span><br><span class="line">                    break;</span><br><span class="line">                case DELETE:</span><br><span class="line">                    DeleteResponse deleteResponse = (DeleteResponse) itemResponseResponse;</span><br><span class="line">                    System.out.println(deleteResponse.getResult());</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="8．-图解es内部机制"><a href="#8．-图解es内部机制" class="headerlink" title="8． 图解es内部机制"></a>8． 图解es内部机制</h1><h2 id="8-1．-图解es分布式基础"><a href="#8-1．-图解es分布式基础" class="headerlink" title="8.1． 图解es分布式基础"></a>8.1． 图解es分布式基础</h2><h3 id="8-1-1es对复杂分布式机制的透明隐藏特性"><a href="#8-1-1es对复杂分布式机制的透明隐藏特性" class="headerlink" title="8.1.1es对复杂分布式机制的透明隐藏特性"></a>8.1.1es对复杂分布式机制的透明隐藏特性</h3><ul>
<li>分布式机制：分布式数据存储及共享。</li>
<li>分片机制：数据存储到哪个分片，副本数据写入。</li>
<li>集群发现机制：cluster discovery。新启动es实例，自动加入集群。</li>
<li>shard负载均衡：大量数据写入及查询，es会将数据平均分配。</li>
<li>shard副本：新增副本数，分片重分配。</li>
</ul>
<h3 id="8-1-2Elasticsearch的垂直扩容与水平扩容"><a href="#8-1-2Elasticsearch的垂直扩容与水平扩容" class="headerlink" title="8.1.2Elasticsearch的垂直扩容与水平扩容"></a>8.1.2Elasticsearch的垂直扩容与水平扩容</h3><p>垂直扩容：使用更加强大的服务器替代老服务器。但单机存储及运算能力有上线。且成本直线上升。如10t服务器1万。单个10T服务器可能20万。</p>
<p>水平扩容：采购更多服务器，加入集群。大数据。</p>
<h3 id="8-1-3增减或减少节点时的数据rebalance"><a href="#8-1-3增减或减少节点时的数据rebalance" class="headerlink" title="8.1.3增减或减少节点时的数据rebalance"></a>8.1.3增减或减少节点时的数据rebalance</h3><p>新增或减少es实例时，es集群会将数据重新分配。</p>
<h3 id="8-1-4master节点"><a href="#8-1-4master节点" class="headerlink" title="8.1.4master节点"></a>8.1.4master节点</h3><p>功能：</p>
<ul>
<li>创建删除节点</li>
<li>创建删除索引</li>
</ul>
<h3 id="8-1-5节点对等的分布式架构"><a href="#8-1-5节点对等的分布式架构" class="headerlink" title="8.1.5节点对等的分布式架构"></a>8.1.5节点对等的分布式架构</h3><ul>
<li>节点对等，每个节点都能接收所有的请求</li>
<li>自动请求路由</li>
<li>响应收集</li>
</ul>
<h2 id="8-2．-图解分片shard、副本replica机制"><a href="#8-2．-图解分片shard、副本replica机制" class="headerlink" title="8.2． 图解分片shard、副本replica机制"></a>8.2． 图解分片shard、副本replica机制</h2><h3 id="8-2-1shard-amp-replica机制"><a href="#8-2-1shard-amp-replica机制" class="headerlink" title="8.2.1shard&amp;replica机制"></a>8.2.1shard&amp;replica机制</h3><p>（1）每个index包含一个或多个shard</p>
<p>（2）每个shard都是一个最小工作单元，承载部分数据，lucene实例，完整的建立索引和处理请求的能力</p>
<p>（3）增减节点时，shard会自动在nodes中负载均衡</p>
<p>（4）primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard</p>
<p>（5）replica shard是primary shard的副本，负责容错，以及承担读请求负载</p>
<p>（6）primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改</p>
<p>（7）primary shard的默认数量是1，replica默认是1，默认共有2个shard，1个primary shard，1个replica shard</p>
<p>注意：es7以前primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard</p>
<p>（8）primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上</p>
<h2 id="8-3图解单node环境下创建index是什么样子的"><a href="#8-3图解单node环境下创建index是什么样子的" class="headerlink" title="8.3图解单node环境下创建index是什么样子的"></a>8.3图解单node环境下创建index是什么样子的</h2><p>（1）单node环境下，创建一个index，有3个primary shard，3个replica shard<br>        （2）集群status是yellow<br>        （3）这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的<br>        （4）集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法承接任何请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index1</span><br><span class="line">&#123;</span><br><span class="line">   &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 3,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-4图解2个node环境下replica-shard是如何分配的"><a href="#8-4图解2个node环境下replica-shard是如何分配的" class="headerlink" title="8.4图解2个node环境下replica shard是如何分配的"></a>8.4图解2个node环境下replica shard是如何分配的</h2><p>（1）replica shard分配：3个primary shard，3个replica shard，1 node<br>        （2）primary —-&gt; replica同步<br>        （3）读请求：primary/replica</p>
<h2 id="8-5图解横向扩容"><a href="#8-5图解横向扩容" class="headerlink" title="8.5图解横向扩容"></a>8.5图解横向扩容</h2><ul>
<li>分片自动负载均衡，分片向空闲机器转移。</li>
<li>每个节点存储更少分片，系统资源给与每个分片的资源更多，整体集群性能提高。</li>
<li>扩容极限：节点数大于整体分片数，则必有空闲机器。</li>
<li>超出扩容极限时，可以增加副本数，如设置副本数为2，总共3*3=9个分片。9台机器同时运行，存储和搜索性能更强。容错性更好。</li>
<li>容错性：只要一个索引的所有主分片在，集群就就可以运行。</li>
</ul>
<h2 id="8-6-图解es容错机制-master选举，replica容错，数据恢复"><a href="#8-6-图解es容错机制-master选举，replica容错，数据恢复" class="headerlink" title="8.6 图解es容错机制 master选举，replica容错，数据恢复"></a>8.6 图解es容错机制 master选举，replica容错，数据恢复</h2><p>以3分片，2副本数，3节点为例介绍。</p>
<ul>
<li>master node宕机，自动master选举，集群为red</li>
<li>replica容错：新master将replica提升为primary shard，yellow</li>
<li>重启宕机node，master copy replica到该node，使用原有的shard并同步宕机后的修改，green</li>
</ul>
<h1 id="9．-图解文档存储机制"><a href="#9．-图解文档存储机制" class="headerlink" title="9． 图解文档存储机制"></a>9． 图解文档存储机制</h1><h2 id="9-1．-数据路由"><a href="#9-1．-数据路由" class="headerlink" title="9.1． 数据路由"></a>9.1． 数据路由</h2><h3 id="9-1-1文档存储如何路由到相应分片"><a href="#9-1-1文档存储如何路由到相应分片" class="headerlink" title="9.1.1文档存储如何路由到相应分片"></a>9.1.1文档存储如何路由到相应分片</h3><p>一个文档，最终会落在主分片的一个分片上，到底应该在哪一个分片？这就是数据路由。</p>
<h3 id="9-1-2路由算法"><a href="#9-1-2路由算法" class="headerlink" title="9.1.2路由算法"></a>9.1.2路由算法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shard = hash(routing) % number_of_primary_shards</span><br></pre></td></tr></table></figure>
<p>哈希值对主分片数取模。</p>
<p>举例：</p>
<p>对一个文档经行crud时，都会带一个路由值 routing number。默认为文档_id（可能是手动指定，也可能是自动生成）。</p>
<p>存储1号文档，经过哈希计算，哈希值为2,此索引有3个主分片，那么计算2%3=2，就算出此文档在P2分片上。</p>
<p>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的</p>
<p>无论hash值是几，无论是什么数字，对number_of_primary_shards求余数，结果一定是在0~number_of_primary_shards-1之间这个范围内的。0,1,2。</p>
<h3 id="9-1-3手动指定-routing-number"><a href="#9-1-3手动指定-routing-number" class="headerlink" title="9.1.3手动指定 routing number"></a>9.1.3手动指定 routing number</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /test_index/_doc/15?routing=num</span><br><span class="line">&#123;</span><br><span class="line">  &quot;num&quot;: 0,</span><br><span class="line">  &quot;tags&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>场景：在程序中，架构师可以手动指定已有数据的一个属性为路由值，好处是可以定制一类文档数据存储到一个分片中。缺点是设计不好，会造成数据倾斜。</p>
<p>所以，不同文档尽量放到不同的索引中。剩下的事情交给es集群自己处理。</p>
<h3 id="9-1-4主分片数量不可变"><a href="#9-1-4主分片数量不可变" class="headerlink" title="9.1.4主分片数量不可变"></a>9.1.4主分片数量不可变</h3><p>涉及到以往数据的查询搜索，所以一旦建立索引，主分片数不可变。</p>
<h2 id="9-2．-图解文档的增删改内部机制"><a href="#9-2．-图解文档的增删改内部机制" class="headerlink" title="9.2． 图解文档的增删改内部机制"></a>9.2． 图解文档的增删改内部机制</h2><p>增删改可以看做update,都是对数据的改动。一个改动请求发送到es集群，经历以下四个步骤：</p>
<p>（1）客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）</p>
<p>（2）coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）</p>
<p>（3）实际的node上的primary shard处理请求，然后将数据同步到replica node。</p>
<p>（4）coordinating node，如果发现primary node和所有replica node都搞定之后，就返回响应结果给客户端。</p>
<h2 id="9-3．图解文档的查询内部机制"><a href="#9-3．图解文档的查询内部机制" class="headerlink" title="9.3．图解文档的查询内部机制"></a>9.3．图解文档的查询内部机制</h2><p>1、客户端发送请求到任意一个node，成为coordinate node</p>
<p>2、coordinate node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，让读请求负载均衡</p>
<p>3、接收请求的node返回document给coordinate node</p>
<p>4、coordinate node返回document给客户端</p>
<p>5、特殊情况：document如果还在建立索引过程中，可能只有primary shard有，任何一个replica shard都没有，此时可能会导致无法读取到document，但是document完成索引建立之后，primary shard和replica shard就都有了。</p>
<h2 id="9-4．bulk-api奇特的json格式"><a href="#9-4．bulk-api奇特的json格式" class="headerlink" title="9.4．bulk api奇特的json格式"></a>9.4．bulk api奇特的json格式</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="string">&quot;meta&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n</span><br><span class="line"><span class="punctuation">&#123;</span><span class="string">&quot;data&quot;</span><span class="punctuation">&#125;</span>\n</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="string">&quot;meta&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n</span><br><span class="line"><span class="punctuation">&#123;</span><span class="string">&quot;data&quot;</span><span class="punctuation">&#125;</span>\n</span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field1&quot;</span><span class="punctuation">:</span><span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field1&quot;</span><span class="punctuation">:</span><span class="string">&quot;spring&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field1&quot;</span><span class="punctuation">:</span><span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field1&quot;</span><span class="punctuation">:</span><span class="string">&quot;spring&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span>       </span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1、bulk中的每个操作都可能要转发到不同的node的shard去执行</p>
<p>2、如果采用比较良好的json数组格式</p>
<p>允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p>
<p>（1）将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</p>
<p>（2）解析json数组里的每个json，对每个请求中的document进行路由</p>
<p>（3）为路由到同一个shard上的多个请求，创建一个请求数组。100请求中有10个是到P1.</p>
<p>（4）将这个请求数组序列化</p>
<p>（5）将序列化后的请求数组发送到对应的节点上去</p>
<p>3、耗费更多内存，更多的jvm gc开销</p>
<p>我们之前提到过bulk size最佳大小的那个问题，一般建议说在几千条那样，然后大小在10MB左右，所以说，可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p>
<p>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。</p>
<p>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多。</p>
<p>4、现在的奇特格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; &quot;delete&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;5&quot; &#125;&#125; \n</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;14&quot; &#125;&#125;\n</span><br><span class="line">&#123; &quot;test_field&quot;: &quot;test14&quot; &#125;\n</span><br><span class="line">&#123; &quot;update&quot;: &#123; &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;2&quot;&#125; &#125;\n</span><br><span class="line">&#123; &quot;doc&quot; : &#123;&quot;test_field&quot; : &quot;bulk test&quot;&#125; &#125;\n</span><br></pre></td></tr></table></figure>
<p>（1）不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</p>
<p>（2）对每两个一组的json，读取meta，进行document路由</p>
<p>（3）直接将对应的json发送到node上去</p>
<p>5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能。</p>
<h1 id="10．-Mapping映射入门"><a href="#10．-Mapping映射入门" class="headerlink" title="10． Mapping映射入门"></a>10． Mapping映射入门</h1><h2 id="10-1．-什么是mapping映射"><a href="#10-1．-什么是mapping映射" class="headerlink" title="10.1． 什么是mapping映射"></a>10.1． 什么是mapping映射</h2><p>概念：自动或手动为index中的_doc建立的一种数据结构和相关配置，简称为mapping映射。</p>
<p>插入几条数据，让es自动为我们建立一个索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /website/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2019-01-01&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;my first article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my first article in this website&quot;,</span><br><span class="line">  &quot;author_id&quot;: 11400</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2019-01-02&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;my second article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my second article in this website&quot;,</span><br><span class="line">  &quot;author_id&quot;: 11400</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">PUT /website/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2019-01-03&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;my third article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my third article in this website&quot;,</span><br><span class="line">  &quot;author_id&quot;: 11400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比数据库建表语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table website(</span><br><span class="line">     post_date date,</span><br><span class="line">     title varchar(50),     </span><br><span class="line">     content varchar(100),</span><br><span class="line">     author_id int(11) </span><br><span class="line"> );</span><br></pre></td></tr></table></figure>
<p>动态映射：dynamic mapping，自动为我们建立index，以及对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置。</p>
<p>重点：我们当然，后面会讲解，也可以手动在创建数据之前，先创建index，以及对应的mapping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET  /website/_mapping/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;website&quot; : &#123;</span><br><span class="line">    &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;author_id&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;post_date&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;title&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尝试各种搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /website/_search?q=2019        0条结果             </span><br><span class="line">GET /website/_search?q=2019-01-01           1条结果</span><br><span class="line">GET /website/_search?q=post_date:2019-01-01     1条结果</span><br><span class="line">GET /website/_search?q=post_date:2019          0 条结果</span><br></pre></td></tr></table></figure>
<p>搜索结果为什么不一致，因为es自动建立mapping的时候，设置了不同的field不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样。</p>
<h2 id="10-2．-精确匹配与全文搜索的对比分析"><a href="#10-2．-精确匹配与全文搜索的对比分析" class="headerlink" title="10.2． 精确匹配与全文搜索的对比分析"></a>10.2． 精确匹配与全文搜索的对比分析</h2><h3 id="10-2-1-exact-value-精确匹配"><a href="#10-2-1-exact-value-精确匹配" class="headerlink" title="10.2.1 exact value 精确匹配"></a>10.2.1 exact value 精确匹配</h3><p>2019-01-01，exact value，搜索的时候，必须输入2019-01-01，才能搜索出来</p>
<p>如果你输入一个01，是搜索不出来的</p>
<p>select * from book where name= ‘java’</p>
<h3 id="10-2-2-full-text-全文检索"><a href="#10-2-2-full-text-全文检索" class="headerlink" title="10.2.2 full text 全文检索"></a>10.2.2 full text 全文检索</h3><p> 搜“笔记电脑”，笔记本电脑词条会不会出现。</p>
<p>select * from book where name like ‘%java%’</p>
<p>（1）缩写 vs. 全称：cn vs. china</p>
<p>（2）格式转化：like liked likes</p>
<p>（3）大小写：Tom vs tom</p>
<p>（4）同义词：like vs love</p>
<p>2019-01-01，2019 01 01，搜索2019，或者01，都可以搜索出来</p>
<p>china，搜索cn，也可以将china搜索出来</p>
<p>likes，搜索like，也可以将likes搜索出来</p>
<p>Tom，搜索tom，也可以将Tom搜索出来</p>
<p>like，搜索love，同义词，也可以将like搜索出来</p>
<p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配。深入 NPL,自然语义处理。</p>
<h2 id="10-3．-全文检索下倒排索引核心原理快速揭秘"><a href="#10-3．-全文检索下倒排索引核心原理快速揭秘" class="headerlink" title="10.3． 全文检索下倒排索引核心原理快速揭秘"></a>10.3． 全文检索下倒排索引核心原理快速揭秘</h2><p>doc1：I really liked my small dogs, and I think my mom also liked them.</p>
<p>doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</p>
<h4 id="分词，初步的倒排索引的建立"><a href="#分词，初步的倒排索引的建立" class="headerlink" title="分词，初步的倒排索引的建立"></a>分词，初步的倒排索引的建立</h4><div class="table-container">
<table>
<thead>
<tr>
<th>term</th>
<th><strong>doc1</strong></th>
<th><strong>doc2</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>I</strong></td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td><strong>really</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>liked</strong></td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td><strong>my</strong></td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td><strong>small</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>dogs</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>and</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>think</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>mom</strong></td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td><strong>also</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>them</strong></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>He</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>never</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>any</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>so</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>hope</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>that</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>will</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>not</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>expect</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>me</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>to</strong></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td><strong>him</strong></td>
<td></td>
<td>*</td>
</tr>
</tbody>
</table>
</div>
<p>演示了一下倒排索引最简单的建立的一个过程</p>
<h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>mother like little dog，不可能有任何结果</p>
<p>mother</p>
<p>like</p>
<p>little</p>
<p>dog</p>
<p>这不是我们想要的结果。同义词mom\mother在我们人类看来是一样。想进行标准化操作。</p>
<h4 id="重建倒排索引"><a href="#重建倒排索引" class="headerlink" title="重建倒排索引"></a>重建倒排索引</h4><p>normalization正规化，建立倒排索引的时候，会执行一个操作，也就是说对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率</p>
<p>时态的转换，单复数的转换，同义词的转换，大小写的转换</p>
<p>mom ―&gt; mother</p>
<p>liked ―&gt; like</p>
<p>small ―&gt; little</p>
<p>dogs ―&gt; dog</p>
<p>重新建立倒排索引，加入normalization，再次用mother liked little dog搜索，就可以搜索到了</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>word</strong></th>
<th><strong>doc1</strong></th>
<th><strong>doc2</strong></th>
<th><strong>normalization</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>I</strong></td>
<td>*</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>really</strong></td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>like</strong></td>
<td>*</td>
<td>*</td>
<td>liked ―&gt; like</td>
</tr>
<tr>
<td><strong>my</strong></td>
<td>*</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>little</strong></td>
<td>*</td>
<td></td>
<td>small ―&gt; little</td>
</tr>
<tr>
<td><strong>dog</strong></td>
<td>*</td>
<td></td>
<td>dogs ―&gt; dog</td>
</tr>
<tr>
<td><strong>and</strong></td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>think</strong></td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>mother</strong></td>
<td>*</td>
<td>*</td>
<td>mom ―&gt; mother</td>
</tr>
<tr>
<td><strong>also</strong></td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>them</strong></td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>He</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>never</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>any</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>so</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>hope</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>that</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>will</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>not</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>expect</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>me</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>to</strong></td>
<td></td>
<td>*</td>
<td></td>
</tr>
<tr>
<td><strong>him</strong></td>
<td></td>
<td>*</td>
</tr>
</tbody>
</table>
</div>
<h4 id="重新搜索"><a href="#重新搜索" class="headerlink" title="重新搜索"></a>重新搜索</h4><p>搜索：mother liked  little dog，</p>
<p> 对搜索条件经行分词 normalization</p>
<p>mother </p>
<p>liked  -》like</p>
<p> little </p>
<p>dog</p>
<p>doc1和doc2都会搜索出来</p>
<h2 id="10-4-分词器-analyzer"><a href="#10-4-分词器-analyzer" class="headerlink" title="10.4. 分词器 analyzer"></a>10.4. 分词器 analyzer</h2><h3 id="10-4-1什么是分词器-analyzer"><a href="#10-4-1什么是分词器-analyzer" class="headerlink" title="10.4.1什么是分词器 analyzer"></a>10.4.1什么是分词器 analyzer</h3><p>作用：切分词语，normalization（提升recall召回率）</p>
<p>给你一段句子，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换）</p>
<p>recall，召回率：搜索的时候，增加能够搜索到的结果的数量</p>
<p>analyzer 组成部分：</p>
<p>1、character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> —&gt; hello），&amp; —&gt; and（I&amp;you —&gt; I and you）</span></span></p>
<p>2、tokenizer：分词，hello you and me —&gt; hello, you, and, me</p>
<p>3、token filter：lowercase，stop word，synonymom，dogs —&gt; dog，liked —&gt; like，Tom —&gt; tom，a/the/an —&gt; 干掉，mother —&gt; mom，small —&gt; little</p>
<p>stop word 停用词： 了 的 呢。</p>
<p>一个分词器，很重要，将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引。</p>
<h3 id="10-4-2内置分词器的介绍"><a href="#10-4-2内置分词器的介绍" class="headerlink" title="10.4.2内置分词器的介绍"></a>10.4.2内置分词器的介绍</h3><p>例句：Set the shape to semi-transparent by calling set_trans(5)</p>
<p>standard analyzer标准分词器：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</p>
<p>simple analyzer简单分词器：set, the, shape, to, semi, transparent, by, calling, set, trans</p>
<p>whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</p>
<p>language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</p>
<p>官方文档：</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/analysis-analyzers.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.4/analysis-analyzers.html</a></p>
<p><img src="/img/1568978200919.png" alt="1568978200919"></p>
<h2 id="10-5-query-string根据字段分词策略"><a href="#10-5-query-string根据字段分词策略" class="headerlink" title="10.5. query string根据字段分词策略"></a>10.5. query string根据字段分词策略</h2><h3 id="10-5-1query-string分词"><a href="#10-5-1query-string分词" class="headerlink" title="10.5.1query string分词"></a>10.5.1query string分词</h3><p>query string必须以和index建立时相同的analyzer进行分词</p>
<p>query string对exact value和full text的区别对待</p>
<p>如： date：exact value 精确匹配</p>
<p>​         text: full text 全文检索</p>
<h3 id="10-5-2测试分词器"><a href="#10-5-2测试分词器" class="headerlink" title="10.5.2测试分词器"></a>10.5.2测试分词器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Text to analyze 80&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;text&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;to&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 5,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;analyze&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 8,</span><br><span class="line">      &quot;end_offset&quot; : 15,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;80&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 16,</span><br><span class="line">      &quot;end_offset&quot; : 18,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;NUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>token 实际存储的term 关键字</p>
<p>position 在此词条在原文本中的位置</p>
<p>start_offset/end_offset字符在原始字符串中的位置</p>
<h2 id="10-6．-mapping回顾总结"><a href="#10-6．-mapping回顾总结" class="headerlink" title="10.6． mapping回顾总结"></a>10.6． mapping回顾总结</h2><p>（1）往es里面直接插入数据，es会自动建立索引，同时建立对应的mapping。(dynamic mapping)</p>
<p>（2）mapping中就自动定义了每个field的数据类型</p>
<p>（3）不同的数据类型（比如说text和date），可能有的是exact value，有的是full text</p>
<p>（4）exact value，在建立倒排索引的时候，分词的时候，是将整个值一起作为一个关键词建立到倒排索引中的；full text，会经历各种各样的处理，分词，normaliztion（时态转换，同义词转换，大小写转换），才会建立到倒排索引中。</p>
<p>（5）同时呢，exact value和full text类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索</p>
<p>（6）可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和tmapping，自己对各个field进行设置，包括数据类型，包括索引行为，包括分词器，等。</p>
<h2 id="10-7．-mapping的核心数据类型以及dynamic-mapping"><a href="#10-7．-mapping的核心数据类型以及dynamic-mapping" class="headerlink" title="10.7． mapping的核心数据类型以及dynamic mapping"></a>10.7． mapping的核心数据类型以及dynamic mapping</h2><h3 id="10-7-1-核心的数据类型"><a href="#10-7-1-核心的数据类型" class="headerlink" title="10.7.1 核心的数据类型"></a>10.7.1 核心的数据类型</h3><p>string :text and keyword</p>
<p>byte，short，integer，long,float，double</p>
<p>boolean</p>
<p>date</p>
<p>详见：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-types.html</a></p>
<p>下图是ES7.3核心的字段类型如下：</p>
<p><img src="/img/1568989192034.png" alt="1568989192034"></p>
<h3 id="10-7-2-dynamic-mapping-推测规则"><a href="#10-7-2-dynamic-mapping-推测规则" class="headerlink" title="10.7.2 dynamic mapping 推测规则"></a>10.7.2 dynamic mapping 推测规则</h3><p>true or false   —&gt; boolean</p>
<p>123     —&gt; long</p>
<p>123.45      —&gt; double</p>
<p>2019-01-01  —&gt; date</p>
<p>“hello world”   —&gt; text/keywod</p>
<h3 id="10-7-3-查看mapping"><a href="#10-7-3-查看mapping" class="headerlink" title="10.7.3 查看mapping"></a>10.7.3 查看mapping</h3><p>GET /index/_mapping/</p>
<h2 id="10-8-手动管理mapping"><a href="#10-8-手动管理mapping" class="headerlink" title="10.8 手动管理mapping"></a>10.8 手动管理mapping</h2><h3 id="10-8-1查询所有索引的映射"><a href="#10-8-1查询所有索引的映射" class="headerlink" title="10.8.1查询所有索引的映射"></a>10.8.1查询所有索引的映射</h3><p>GET /_mapping</p>
<h3 id="10-8-2-创建映射-！！"><a href="#10-8-2-创建映射-！！" class="headerlink" title="10.8.2 创建映射 ！！"></a>10.8.2 创建映射 ！！</h3><p>创建索引后，应该立即手动创建映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT book/_mapping</span><br><span class="line">&#123;</span><br><span class="line">	&quot;properties&quot;: &#123;</span><br><span class="line">           &quot;name&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">           &quot;description&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">              &quot;analyzer&quot;:&quot;english&quot;,</span><br><span class="line">              &quot;search_analyzer&quot;:&quot;english&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;pic&quot;:&#123;</span><br><span class="line">             &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">             &quot;index&quot;:false</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;studymodel&quot;:&#123;</span><br><span class="line">             &quot;type&quot;:&quot;text&quot;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Text-文本类型"><a href="#Text-文本类型" class="headerlink" title="Text 文本类型"></a>Text 文本类型</h4><p>1）analyzer</p>
<p>通过analyzer属性指定分词器。</p>
<p>上边指定了analyzer是指在索引和搜索都使用english，如果单独想定义搜索时使用的分词器则可以通过search_analyzer属性。</p>
<p>2）index</p>
<p>index属性指定是否索引。</p>
<p>默认为index=true，即要进行索引，只有进行索引才可以从索引库搜索到。</p>
<p>但是也有一些内容不需要索引，比如：商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置为false。</p>
<p>删除索引，重新创建映射，将pic的index设置为false，尝试根据pic去搜索，结果搜索不到数据。</p>
<p>3）store</p>
<p>是否在source之外存储，每个文档索引后会在 ES中保存一份原始文档，存放在”_source”中，一般情况下不需要设置store为true，因为在_source中已经有一份原始文档了。</p>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT book/_mapping</span><br><span class="line">&#123;</span><br><span class="line">		&quot;properties&quot;: &#123;</span><br><span class="line">           &quot;name&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">           &quot;description&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">              &quot;analyzer&quot;:&quot;english&quot;,</span><br><span class="line">              &quot;search_analyzer&quot;:&quot;english&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;pic&quot;:&#123;</span><br><span class="line">             &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">             &quot;index&quot;:false</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;studymodel&quot;:&#123;</span><br><span class="line">             &quot;type&quot;:&quot;text&quot;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /book/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;Bootstrap开发框架&quot;,</span><br><span class="line">  &quot;description&quot;:&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;,</span><br><span class="line">  &quot;pic&quot;:&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;,</span><br><span class="line">  &quot;studymodel&quot;:&quot;201002&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Get /book/_search?q=name:开发</p>
<p>Get  /book/_search?q=description:开发</p>
<p>Get /book/_search?q=pic:group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg</p>
<p>Get /book/_search?q=studymodel:201002</p>
<p>通过测试发现：name和description都支持全文检索，pic不可作为查询条件。</p>
<h4 id="keyword关键字字段"><a href="#keyword关键字字段" class="headerlink" title="keyword关键字字段"></a>keyword关键字字段</h4><p> 目前已经取代了”index”: false。上边介绍的text文本字段在映射时要设置分词器，keyword字段为关键字字段，通常搜索keyword是按照整体搜索，所以创建keyword字段的索引时是不进行分词的，比如：邮政编码、手机号码、身份证等。keyword字段通常用于过虑、排序、聚合等。</p>
<h4 id="date日期类型"><a href="#date日期类型" class="headerlink" title="date日期类型"></a>date日期类型</h4><p>日期类型不用设置分词器。</p>
<p>通常日期类型的字段用于排序。</p>
<p>format</p>
<p>通过format设置日期格式</p>
<p>例子：</p>
<p>下边的设置允许date字段存储年月日时分秒、年月日及毫秒三种格式。</p>
<p>{</p>
<p>​    “properties”: {</p>
<p>​        “timestamp”: {</p>
<p>​          “type”:   “date”,</p>
<p>​          “format”: “yyyy-MM-dd HH:mm:ss||yyyy-MM-dd”</p>
<p>​        }</p>
<p>​      }</p>
<p>}</p>
<p>插入文档：</p>
<p>Post book/doc/3 </p>
<p>{</p>
<p>“name”: “spring开发基础”,</p>
<p>“description”: “spring 在java领域非常流行，java程序员都在用。”,</p>
<p>“studymodel”: “201001”,</p>
<p> “pic”:”group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg”,</p>
<p> “timestamp”:”2018-07-04 18:28:58”</p>
<p>}</p>
<h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>下边是ES支持的数值类型</p>
<p><img src="/img/1568990520717.png" alt="1568990520717"></p>
<p>1、尽量选择范围小的类型，提高搜索效率</p>
<p>2、对于浮点数尽量用比例因子，比如一个价格字段，单位为元，我们将比例因子设置为100这在ES中会按 分 存储，映射如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;scaled_float&quot;,</span><br><span class="line">        &quot;scaling_factor&quot;: 100</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>由于比例因子为100，如果我们输入的价格是23.45则ES中会将23.45乘以100存储在ES中。</p>
<p>如果输入的价格是23.456，ES会将23.456乘以100再取一个接近原始值的数，得出2346。</p>
<p>使用比例因子的好处是整型比浮点型更易压缩，节省磁盘空间。</p>
<p>如果比例因子不适合，则从下表选择范围小的去用：</p>
<p>更新已有映射，并插入文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT book/doc/3</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;spring开发基础&quot;,</span><br><span class="line">&quot;description&quot;: &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</span><br><span class="line">&quot;studymodel&quot;: &quot;201001&quot;,</span><br><span class="line"> &quot;pic&quot;:&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;,</span><br><span class="line"> &quot;timestamp&quot;:&quot;2018-07-04 18:28:58&quot;,</span><br><span class="line"> &quot;price&quot;:38.6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-8-3修改映射"><a href="#10-8-3修改映射" class="headerlink" title="10.8.3修改映射"></a>10.8.3修改映射</h3><p>只能创建index时手动建立mapping，或者新增field mapping，但是不能update field mapping。</p>
<p>因为已有数据按照映射早已分词存储好。如果修改，那这些存量数据怎么办。</p>
<p>新增一个字段mapping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /book/_mapping/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;new_field&quot; : &#123;</span><br><span class="line">      &quot;type&quot; :    &quot;text&quot;,</span><br><span class="line">     &quot;index&quot;:    &quot;false&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果修改mapping,会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /book/_mapping/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot; : &#123;</span><br><span class="line">    &quot;studymodel&quot; : &#123;</span><br><span class="line">     &quot;type&quot; :    &quot;keyword&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;mapper [studymodel] of different type, current_type [text], merged_type [keyword]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;mapper [studymodel] of different type, current_type [text], merged_type [keyword]&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-8-4删除映射"><a href="#10-8-4删除映射" class="headerlink" title="10.8.4删除映射"></a>10.8.4删除映射</h3><p>通过删除索引来删除映射。</p>
<h2 id="10-9-复杂数据类型"><a href="#10-9-复杂数据类型" class="headerlink" title="10.9 复杂数据类型"></a>10.9 复杂数据类型</h2><h3 id="10-9-1-multivalue-field"><a href="#10-9-1-multivalue-field" class="headerlink" title="10.9 .1 multivalue field"></a>10.9 .1 multivalue field</h3><p>{ “tags”: [ “tag1”, “tag2” ]}</p>
<p>建立索引时与string是一样的，数据类型不能混</p>
<h3 id="10-9-2-empty-field"><a href="#10-9-2-empty-field" class="headerlink" title="10.9 .2. empty field"></a>10.9 .2. empty field</h3><p>null，[]，[null]</p>
<h3 id="10-9-3-object-field"><a href="#10-9-3-object-field" class="headerlink" title="10.9 .3. object field"></a>10.9 .3. object field</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /company/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;country&quot;: &quot;china&quot;,</span><br><span class="line">    &quot;province&quot;: &quot;guangdong&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;guangzhou&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;name&quot;: &quot;jack&quot;,</span><br><span class="line">  &quot;age&quot;: 27,</span><br><span class="line">  &quot;join_date&quot;: &quot;2019-01-01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>address：object类型</p>
<p>查询映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /company/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;company&quot; : &#123;</span><br><span class="line">    &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;address&quot; : &#123;</span><br><span class="line">          &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;city&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;country&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;province&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">              &quot;fields&quot; : &#123;</span><br><span class="line">                &quot;keyword&quot; : &#123;</span><br><span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot; : 256</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;age&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;join_date&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;name&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>object</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;country&quot;: &quot;china&quot;,</span><br><span class="line">    &quot;province&quot;: &quot;guangdong&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;guangzhou&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;name&quot;: &quot;jack&quot;,</span><br><span class="line">  &quot;age&quot;: 27,</span><br><span class="line">  &quot;join_date&quot;: &quot;2017-01-01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>底层存储格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:            [jack],</span><br><span class="line">    &quot;age&quot;:          [27],</span><br><span class="line">    &quot;join_date&quot;:      [2017-01-01],</span><br><span class="line">    &quot;address.country&quot;:         [china],</span><br><span class="line">    &quot;address.province&quot;:   [guangdong],</span><br><span class="line">    &quot;address.city&quot;:  [guangzhou]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对象数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123; &quot;age&quot;: 26, &quot;name&quot;: &quot;Jack White&quot;&#125;,</span><br><span class="line">        &#123; &quot;age&quot;: 55, &quot;name&quot;: &quot;Tom Jones&quot;&#125;,</span><br><span class="line">        &#123; &quot;age&quot;: 39, &quot;name&quot;: &quot;Kitty Smith&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>存储格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;authors.age&quot;:    [26, 55, 39],</span><br><span class="line">    &quot;authors.name&quot;:   [jack, white, tom, jones, kitty, smith]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="11．-索引Index入门"><a href="#11．-索引Index入门" class="headerlink" title="11． 索引Index入门"></a>11． 索引Index入门</h1><h2 id="11-1．-索引管理"><a href="#11-1．-索引管理" class="headerlink" title="11.1． 索引管理"></a>11.1． 索引管理</h2><h3 id="11-1-1-为什么我们要手动创建索引"><a href="#11-1-1-为什么我们要手动创建索引" class="headerlink" title="11.1.1. 为什么我们要手动创建索引"></a>11.1.1. 为什么我们要手动创建索引</h3><p>直接put数据 PUT index/_doc/1,es会自动生成索引，并建立动态映射dynamic mapping。</p>
<p>在生产上，我们需要自己手动建立索引和映射，为了更好地管理索引。就像数据库的建表语句一样。</p>
<h3 id="11-1-2-索引管理"><a href="#11-1-2-索引管理" class="headerlink" title="11.1.2. 索引管理"></a>11.1.2. 索引管理</h3><h4 id="11-1-2-1-创建索引"><a href="#11-1-2-1-创建索引" class="headerlink" title="11.1.2.1 创建索引"></a>11.1.2.1 创建索引</h4><p>创建索引的语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123; ... any settings ... &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">       &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;field1&quot; : &#123; &quot;type&quot; : &quot;text&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aliases&quot;: &#123;</span><br><span class="line">    	&quot;default_index&quot;: &#123;&#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;field1&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;field2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aliases&quot;: &#123;</span><br><span class="line">    &quot;default_index&quot;: &#123;&#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>索引别名</strong></p>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">	&quot;field1&quot;:&quot;java&quot;,</span><br><span class="line">	&quot;field2&quot;:&quot;js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询数据 都可以查到</p>
<p>GET /my_index/_doc/1</p>
<p>GET /default_index/_doc/1</p>
<h4 id="11-1-2-2查询索引"><a href="#11-1-2-2查询索引" class="headerlink" title="11.1.2.2查询索引"></a>11.1.2.2查询索引</h4><p>GET /my_index/_mapping</p>
<p>GET /my_index/_setting</p>
<h4 id="11-1-2-3修改索引"><a href="#11-1-2-3修改索引" class="headerlink" title="11.1.2.3修改索引"></a>11.1.2.3修改索引</h4><p>修改副本数</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;index&quot; : &#123;</span><br><span class="line">        &quot;number_of_replicas&quot; : 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="11-1-2-4删除索引"><a href="#11-1-2-4删除索引" class="headerlink" title="11.1.2.4删除索引"></a>11.1.2.4删除索引</h4><p>DELETE /my_index</p>
<p>DELETE /index_one,index_two</p>
<p>DELETE /index_*</p>
<p>DELETE /_all</p>
<p>为了安全起见，防止恶意删除索引，删除时必须指定索引名：</p>
<p>elasticsearch.yml</p>
<p>action.destructive_requires_name: true</p>
<h2 id="11-2．-定制分词器"><a href="#11-2．-定制分词器" class="headerlink" title="11.2． 定制分词器"></a>11.2． 定制分词器</h2><h3 id="11-2-1-默认的分词器"><a href="#11-2-1-默认的分词器" class="headerlink" title="11.2.1 默认的分词器"></a>11.2.1 默认的分词器</h3><p>standard</p>
<p>分词三个组件，character filter，tokenizer，token filter</p>
<p>standard tokenizer：以单词边界进行切分</p>
<p>standard token filter：什么都不做</p>
<p>lowercase token filter：将所有字母转换为小写</p>
<p>stop token filer（默认被禁用）：移除停用词，比如a the it等等</p>
<h3 id="11-2-2-修改分词器的设置"><a href="#11-2-2-修改分词器的设置" class="headerlink" title="11.2.2 修改分词器的设置"></a>11.2.2 修改分词器的设置</h3><p>启用english停用词token filter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;es_std&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;stopwords&quot;: &quot;_english_&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试分词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;, </span><br><span class="line">  &quot;text&quot;: &quot;a dog is in the house&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;es_std&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;a dog is in the house&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-2-3-定制化自己的分词器"><a href="#11-2-3-定制化自己的分词器" class="headerlink" title="11.2.3 定制化自己的分词器"></a>11.2.3 定制化自己的分词器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;char_filter&quot;: &#123;</span><br><span class="line">        &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">          &quot;mappings&quot;: [&quot;&amp;=&gt; and&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;my_stopwords&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;stop&quot;,</span><br><span class="line">          &quot;stopwords&quot;: [&quot;the&quot;, &quot;a&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_analyzer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;char_filter&quot;: [&quot;html_strip&quot;, &quot;&amp;_to_and&quot;],</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;my_stopwords&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;my_analyzer&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;tom&amp;jerry are a friend in the house, &lt;a&gt;, HAHA!!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置字段使用自定义分词器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_mapping/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;content&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;analyzer&quot;: &quot;my_analyzer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-3-type底层结构及弃用原因"><a href="#11-3-type底层结构及弃用原因" class="headerlink" title="11.3 type底层结构及弃用原因"></a>11.3 type底层结构及弃用原因</h2><h3 id="11-3-1type是什么"><a href="#11-3-1type是什么" class="headerlink" title="11.3.1type是什么"></a>11.3.1type是什么</h3><p>type，是一个index中用来区分类似的数据的，类似的数据，但是可能有不同的fields，而且有不同的属性来控制索引建立、分词器.<br>        field的value，在底层的lucene中建立索引的时候，全部是opaque bytes类型，不区分类型的。<br>        lucene是没有type的概念的，在document中，实际上将type作为一个document的field来存储，即_type，es通过_type来进行type的过滤和筛选。</p>
<h3 id="11-3-2es中不同type存储机制"><a href="#11-3-2es中不同type存储机制" class="headerlink" title="11.3.2es中不同type存储机制"></a>11.3.2es中不同type存储机制</h3><p>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，而类型或者其他设置不同的，因为那样是无法处理的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;goods&quot;: &#123;</span><br><span class="line">      &quot;mappings&quot;: &#123;</span><br><span class="line">         &quot;electronic_goods&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">               &quot;name&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;price&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;double&quot;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;service_period&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;string&quot;</span><br><span class="line">                   &#125;			</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;fresh_goods&quot;: &#123;</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">               &quot;name&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;price&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;double&quot;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;eat_period&quot;: &#123;</span><br><span class="line">              		&quot;type&quot;: &quot;string&quot;</span><br><span class="line">               &#125;</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /goods/electronic_goods/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;小米空调&quot;,</span><br><span class="line">  &quot;price&quot;: 1999.0,</span><br><span class="line">  &quot;service_period&quot;: &quot;one year&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /goods/fresh_goods/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;澳洲龙虾&quot;,</span><br><span class="line">  &quot;price&quot;: 199.0,</span><br><span class="line">  &quot;eat_period&quot;: &quot;one week&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>es文档在底层的存储是这样子的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;goods&quot;: &#123;</span><br><span class="line">      &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;_type&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;index&quot;: &quot;false&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;string&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &quot;price&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;double&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &quot;service_period&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;string&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;eat_period&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;string&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>底层数据存储格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_type&quot;: &quot;electronic_goods&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;小米空调&quot;,</span><br><span class="line">  &quot;price&quot;: 1999.0,</span><br><span class="line">  &quot;service_period&quot;: &quot;one year&quot;,</span><br><span class="line">  &quot;eat_period&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_type&quot;: &quot;fresh_goods&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;澳洲龙虾&quot;,</span><br><span class="line">  &quot;price&quot;: 199.0,</span><br><span class="line">  &quot;service_period&quot;: &quot;&quot;,</span><br><span class="line">  &quot;eat_period&quot;: &quot;one week&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-3-3-type弃用"><a href="#11-3-3-type弃用" class="headerlink" title="11.3.3 type弃用"></a>11.3.3 type弃用</h3><p>同一索引下，不同type的数据存储其他type的field 大量空值，造成资源浪费。</p>
<p>所以，不同类型数据，要放到不同的索引中。</p>
<p>es9中，将会彻底删除type。</p>
<h2 id="11-4-定制dynamic-mapping"><a href="#11-4-定制dynamic-mapping" class="headerlink" title="11.4.定制dynamic mapping"></a>11.4.定制dynamic mapping</h2><h3 id="11-4-1定制dynamic策略"><a href="#11-4-1定制dynamic策略" class="headerlink" title="11.4.1定制dynamic策略"></a>11.4.1定制dynamic策略</h3><p>true：遇到陌生字段，就进行dynamic mapping</p>
<p>false：新检测到的字段将被忽略。这些字段将不会被索引，因此将无法搜索，但仍将出现在返回点击的源字段中。这些字段不会添加到映射中，必须显式添加新字段。</p>
<p>strict：遇到陌生字段，就报错</p>
<p>创建mapping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;dynamic&quot;: &quot;strict&quot;,</span><br><span class="line">       &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;address&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">          &quot;dynamic&quot;: &quot;true&quot;</span><br><span class="line">        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;my article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my article&quot;,</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;province&quot;: &quot;guangdong&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;guangzhou&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;strict_dynamic_mapping_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;mapping set to strict, dynamic introduction of [content] within [_doc] is not allowed&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;strict_dynamic_mapping_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;mapping set to strict, dynamic introduction of [content] within [_doc] is not allowed&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-4-2自定义-dynamic-mapping策略"><a href="#11-4-2自定义-dynamic-mapping策略" class="headerlink" title="11.4.2自定义 dynamic mapping策略"></a>11.4.2自定义 dynamic mapping策略</h3><p>es会根据传入的值，推断类型。</p>
<p><img src="/img/1569123478530.png" alt="1569123478530"></p>
<h4 id="date-detection-日期探测"><a href="#date-detection-日期探测" class="headerlink" title="date_detection 日期探测"></a>date_detection 日期探测</h4><p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个”hello world”之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;date_detection&quot;: false,</span><br><span class="line">       &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;address&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">          &quot;dynamic&quot;: &quot;true&quot;</span><br><span class="line">        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;my article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my article&quot;,</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;province&quot;: &quot;guangdong&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;guangzhou&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;post_date&quot;:&quot;2019-09-10&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_mapping</span><br></pre></td></tr></table></figure>
<h4 id="自定义日期格式"><a href="#自定义日期格式" class="headerlink" title="自定义日期格式"></a>自定义日期格式</h4><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_date_formats&quot;: [&quot;MM/dd/yyyy&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;09/25/2019&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="numeric-detection-数字探测"><a href="#numeric-detection-数字探测" class="headerlink" title="numeric_detection 数字探测"></a>numeric_detection 数字探测</h4><p>虽然json支持本机浮点和整数数据类型，但某些应用程序或语言有时可能将数字呈现为字符串。通常正确的解决方案是显式地映射这些字段，但是可以启用数字检测（默认情况下禁用）来自动完成这些操作。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;numeric_detection&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my_float&quot;:   &quot;1.0&quot;, </span><br><span class="line">  &quot;my_integer&quot;: &quot;1&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-4-3定制自己的dynamic-mapping-template"><a href="#11-4-3定制自己的dynamic-mapping-template" class="headerlink" title="11.4.3定制自己的dynamic mapping template"></a>11.4.3定制自己的dynamic mapping template</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">            &quot;dynamic_templates&quot;: [</span><br><span class="line">                &#123; </span><br><span class="line">                  &quot;en&quot;: &#123;</span><br><span class="line">                      &quot;match&quot;:              &quot;*_en&quot;, </span><br><span class="line">                      &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">                      &quot;mapping&quot;: &#123;</span><br><span class="line">                          &quot;type&quot;:           &quot;text&quot;,</span><br><span class="line">                          &quot;analyzer&quot;:       &quot;english&quot;</span><br><span class="line">                      &#125;</span><br><span class="line">                &#125;                  </span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;this is my first article&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /my_index/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title_en&quot;: &quot;this is my first article&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET my_index/_search?q=first</span><br><span class="line">GET my_index/_search?q=is</span><br></pre></td></tr></table></figure>
<p>title没有匹配到任何的dynamic模板，默认就是standard分词器，不会过滤停用词，is会进入倒排索引，用is来搜索是可以搜索到的</p>
<p>title_en匹配到了dynamic模板，就是english分词器，会过滤停用词，is这种停用词就会被过滤掉，用is来搜索就搜索不到了</p>
<h4 id="模板写法"><a href="#模板写法" class="headerlink" title="模板写法"></a>模板写法</h4><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_templates&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;integers&quot;: &#123;</span><br><span class="line">          &quot;match_mapping_type&quot;: &quot;long&quot;,</span><br><span class="line">          &quot;mapping&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;strings&quot;: &#123;</span><br><span class="line">          &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;mapping&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;raw&quot;: &#123;</span><br><span class="line">                &quot;type&quot;:  &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板参数</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">&quot;match&quot;:   &quot;long_*&quot;,</span><br><span class="line">&quot;unmatch&quot;: &quot;*_text&quot;,</span><br><span class="line">&quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;path_match&quot;:   &quot;name.*&quot;,</span><br><span class="line">&quot;path_unmatch&quot;: &quot;*.middle&quot;,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;match_pattern&quot;</span>: <span class="string">&quot;regex&quot;</span>,</span><br><span class="line"><span class="string">&quot;match&quot;</span>: <span class="string">&quot;^profit_\d+$&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>1结构化搜索</p>
<p>默认情况下，elasticsearch将字符串字段映射为带有子关键字字段的文本字段。但是，如果只对结构化内容进行索引，而对全文搜索不感兴趣，则可以仅将“字段”映射为“关键字”。请注意，这意味着为了搜索这些字段，必须搜索索引所用的完全相同的值。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;strings_as_keywords&quot;: &#123;</span><br><span class="line">         &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">         &quot;mapping&quot;: &#123;</span><br><span class="line">           &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>2仅搜索</p>
<p>与前面的示例相反，如果您只关心字符串字段的全文搜索，并且不打算对字符串字段运行聚合、排序或精确搜索，您可以告诉弹性搜索将其仅映射为文本字段（这是5之前的默认行为）</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;strings_as_text&quot;: &#123;</span><br><span class="line">         &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">         &quot;mapping&quot;: &#123;</span><br><span class="line">           &quot;type&quot;: &quot;text&quot;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>3norms 不关心评分</p>
<p>norms是指标时间的评分因素。如果您不关心评分，例如，如果您从不按评分对文档进行排序，则可以在索引中禁用这些评分因子的存储并节省一些空间。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;strings_as_keywords&quot;: &#123;</span><br><span class="line">          &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;mapping&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;norms&quot;: false,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-5．-零停机重建索引"><a href="#11-5．-零停机重建索引" class="headerlink" title="11.5． 零停机重建索引"></a>11.5． 零停机重建索引</h2><h3 id="11-5-1零停机重建索引"><a href="#11-5-1零停机重建索引" class="headerlink" title="11.5.1零停机重建索引"></a>11.5.1零停机重建索引</h3><p>场景：</p>
<p>一个field的设置是不能被修改的，如果要修改一个Field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入index中。</p>
<p>批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scoll就查询指定日期的一段数据，交给一个线程即可。</p>
<p>(1)一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2019-09-10这种日期格式的，所以title这种field被自动映射为了date类型，实际上它应该是string类型的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;2019-09-10&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /my_index/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;2019-09-11&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）当后期向索引中加入string类型的title值的时候，就会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;my first article&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;failed to parse [title]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;failed to parse [title]&quot;,</span><br><span class="line">    &quot;caused_by&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">      &quot;reason&quot;: &quot;Invalid format: \&quot;my first article\&quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）如果此时想修改title的类型，是不可能的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;title&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;</span><br><span class="line">   	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;mapper [title] of different type, current_type [date], merged_type [text]&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;mapper [title] of different type, current_type [date], merged_type [text]&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）此时，唯一的办法，就是进行reindex，也就是说，重新建立一个索引，将旧索引的数据查询出来，再导入新索引。</p>
<p>（5）如果说旧索引的名字，是old_index，新索引的名字是new_index，终端java应用，已经在使用old_index在操作了，难道还要去停止java应用，修改使用的index为new_index，才重新启动java应用吗？这个过程中，就会导致java应用停机，可用性降低。</p>
<p>（6）所以说，给java应用一个别名，这个别名是指向旧索引的，java应用先用着，java应用先用prod_index alias来操作，此时实际指向的是旧的my_index</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_alias/prod_index</span><br></pre></td></tr></table></figure>
<p>（7）新建一个index，调整其title的类型为string</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index_new</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">		&quot;title&quot;: &#123;</span><br><span class="line">         &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（8）使用scroll api将数据批量查询出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;,    </span><br><span class="line">    &quot;size&quot;:  1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot;: &quot;DnF1ZXJ5VGhlbkZldGNoBQAAAAAAADpAFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6QRY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAAOkIWNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAADpDFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6RBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3&quot;,</span><br><span class="line">  &quot;took&quot;: 1,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 3,</span><br><span class="line">    &quot;max_score&quot;: null,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;my_type&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: null,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;title&quot;: &quot;2019-01-02&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          0</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（9）采用bulk api将scoll查出来的一批数据，批量写入新索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; &quot;index&quot;:  &#123; &quot;_index&quot;: &quot;my_index_new&quot;, &quot;_id&quot;: &quot;1&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;title&quot;:    &quot;2019-09-10&quot; &#125;</span><br></pre></td></tr></table></figure>
<p>（10）反复循环8~9，查询一批又一批的数据出来，采取bulk api将每一批数据批量写入新索引</p>
<p>（11）将prod_index alias切换到my_index_new上去，java应用会直接通过index别名使用新的索引中的数据，java应用程序不需要停机，零提交，高可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;remove&quot;: &#123; &quot;index&quot;: &quot;my_index&quot;, &quot;alias&quot;: &quot;prod_index&quot; &#125;&#125;,</span><br><span class="line">        &#123; &quot;add&quot;:    &#123; &quot;index&quot;: &quot;my_index_new&quot;, &quot;alias&quot;: &quot;prod_index&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（12）直接通过prod_index别名来查询，是否ok</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /prod_index/_search</span><br></pre></td></tr></table></figure>
<h3 id="11-5-2-生产实践：基于alias对client透明切换index"><a href="#11-5-2-生产实践：基于alias对client透明切换index" class="headerlink" title="11.5.2 生产实践：基于alias对client透明切换index"></a>11.5.2 生产实践：基于alias对client透明切换index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index_v1/_alias/my_index</span><br></pre></td></tr></table></figure>
<p>client对my_index进行操作</p>
<p>reindex操作，完成之后，切换v1到v2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;remove&quot;: &#123; &quot;index&quot;: &quot;my_index_v1&quot;, &quot;alias&quot;: &quot;my_index&quot; &#125;&#125;,</span><br><span class="line">        &#123; &quot;add&quot;:    &#123; &quot;index&quot;: &quot;my_index_v2&quot;, &quot;alias&quot;: &quot;my_index&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="12．-中文分词器-IK分词器"><a href="#12．-中文分词器-IK分词器" class="headerlink" title="12． 中文分词器 IK分词器"></a>12． 中文分词器 IK分词器</h1><h2 id="12-1．-Ik分词器安装使用"><a href="#12-1．-Ik分词器安装使用" class="headerlink" title="12.1． Ik分词器安装使用"></a>12.1． Ik分词器安装使用</h2><h3 id="12-1-1-中文分词器"><a href="#12-1-1-中文分词器" class="headerlink" title="12.1.1 中文分词器"></a>12.1.1 中文分词器</h3><p>standard 分词器，仅适用于英文。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;中华人民共和国人民大会堂&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们想要的效果是什么：中华人民共和国，人民大会堂</p>
<p>IK分词器就是目前最流行的es中文分词器</p>
<h3 id="12-1-2-安装"><a href="#12-1-2-安装" class="headerlink" title="12.1.2 安装"></a>12.1.2 安装</h3><p>官网：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p>
<p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>
<p>根据es版本下载相应版本包。</p>
<p>解压到 es/plugins/ik中。</p>
<p>重启es</p>
<h3 id="12-1-3-ik分词器基础知识"><a href="#12-1-3-ik分词器基础知识" class="headerlink" title="12.1.3 ik分词器基础知识"></a>12.1.3 ik分词器基础知识</h3><p>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国，中华人民，中华，华人，人民共和国，人民大会堂，人民大会，大会堂”，会穷尽各种可能的组合；</p>
<p>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国，人民大会堂”。</p>
<h3 id="12-1-4-ik分词器的使用"><a href="#12-1-4-ik分词器的使用" class="headerlink" title="12.1.4 ik分词器的使用"></a>12.1.4 ik分词器的使用</h3><p>存储时，使用ik_max_word，搜索时，使用ik_smart</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my_index </span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;text&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_search?q=中华人民共和国人民大会堂</span><br></pre></td></tr></table></figure>
<h2 id="12-2-ik配置文件"><a href="#12-2-ik配置文件" class="headerlink" title="12.2. ik配置文件"></a>12.2. ik配置文件</h2><h3 id="12-2-1-ik配置文件"><a href="#12-2-1-ik配置文件" class="headerlink" title="12.2.1 ik配置文件"></a>12.2.1 ik配置文件</h3><p>ik配置文件地址：es/plugins/ik/config目录</p>
<p>IKAnalyzer.cfg.xml：用来配置自定义词库</p>
<p>main.dic：ik原生内置的中文词库，总共有27万多条，只要是这些单词，都会被分在一起</p>
<p>preposition.dic: 介词</p>
<p>quantifier.dic：放了一些单位相关的词，量词</p>
<p>suffix.dic：放了一些后缀</p>
<p>surname.dic：中国的姓氏</p>
<p>stopword.dic：英文停用词</p>
<p>ik原生最重要的两个配置文件</p>
<p>main.dic：包含了原生的中文词语，会按照这个里面的词语去分词</p>
<p>stopword.dic：包含了英文的停用词</p>
<p>停用词，stopword</p>
<p>a the and at but</p>
<p>一般，像停用词，会在分词的时候，直接被干掉，不会建立在倒排索引中</p>
<h3 id="12-2-1-自定义词库"><a href="#12-2-1-自定义词库" class="headerlink" title="12.2.1 自定义词库"></a>12.2.1 自定义词库</h3><p>（1）自己建立词库：每年都会涌现一些特殊的流行词，网红，蓝瘦香菇，喊麦，鬼畜，一般不会在ik的原生词典里</p>
<p>自己补充自己的最新的词语，到ik的词库里面</p>
<p>IKAnalyzer.cfg.xml：ext_dict，创建mydict.dic。</p>
<p>补充自己的词语，然后需要重启es，才能生效</p>
<p>（2）自己建立停用词库：比如了，的，啥，么，我们可能并不想去建立索引，让人家搜索</p>
<p>custom/ext_stopword.dic，已经有了常用的中文停用词，可以补充自己的停用词，然后重启es</p>
<h2 id="12-3．-使用mysql热更新-词库"><a href="#12-3．-使用mysql热更新-词库" class="headerlink" title="12.3． 使用mysql热更新 词库"></a>12.3． 使用mysql热更新 词库</h2><h3 id="12-3-1热更新"><a href="#12-3-1热更新" class="headerlink" title="12.3.1热更新"></a>12.3.1热更新</h3><p>每次都是在es的扩展词典中，手动添加新词语，很坑</p>
<p>（1）每次添加完，都要重启es才能生效，非常麻烦</p>
<p>（2）es是分布式的，可能有数百个节点，你不能每次都一个一个节点上面去修改</p>
<p>es不停机，直接我们在外部某个地方添加新的词语，es中立即热加载到这些新词语</p>
<p>热更新的方案</p>
<p>（1）基于ik分词器原生支持的热更新方案，部署一个web服务器，提供一个http接口，通过modified和tag两个http响应头，来提供词语的热更新</p>
<p>（2）修改ik分词器源码，然后手动支持从mysql中每隔一定时间，自动加载新的词库</p>
<p>用第二种方案，第一种，ik git社区官方都不建议采用，觉得不太稳定</p>
<h3 id="12-3-2步骤"><a href="#12-3-2步骤" class="headerlink" title="12.3.2步骤"></a>12.3.2步骤</h3><p>1、下载源码</p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>
<p>ik分词器，是个标准的java maven工程，直接导入eclipse就可以看到源码</p>
<p>2、修改源</p>
<p>org.wltea.analyzer.dic.Dictionary类，160行Dictionary单例类的初始化方法，在这里需要创建一个我们自定义的线程，并且启动它</p>
<p>org.wltea.analyzer.dic.HotDictReloadThread类：就是死循环，不断调用Dictionary.getSingleton().reLoadMainDict()，去重新加载词典</p>
<p>Dictionary类，399行：this.loadMySQLExtDict(); 加载mymsql字典。</p>
<p>Dictionary类，609行：this.loadMySQLStopwordDict();加载mysql停用词</p>
<p>config下jdbc-reload.properties。mysql配置文件</p>
<p>3、mvn package打包代码</p>
<p>target\releases\elasticsearch-analysis-ik-7.3.0.zip</p>
<p>4、解压缩ik压缩包</p>
<p>将mysql驱动jar，放入ik的目录下</p>
<p>5、修改jdbc相关配置</p>
<p>6、重启es</p>
<p>观察日志，日志中就会显示我们打印的那些东西，比如加载了什么配置，加载了什么词语，什么停用词</p>
<p>7、在mysql中添加词库与停用词</p>
<p>8、分词实验，验证热更新生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;传智播客&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="13．-java-api-实现索引管理"><a href="#13．-java-api-实现索引管理" class="headerlink" title="13． java api 实现索引管理"></a>13． java api 实现索引管理</h1><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itheima.es;</span><br><span class="line"></span><br><span class="line">import org.elasticsearch.action.ActionListener;</span><br><span class="line">import org.elasticsearch.action.admin.indices.alias.Alias;</span><br><span class="line">import org.elasticsearch.action.admin.indices.close.CloseIndexRequest;</span><br><span class="line">import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line">import org.elasticsearch.action.admin.indices.open.OpenIndexRequest;</span><br><span class="line">import org.elasticsearch.action.admin.indices.open.OpenIndexResponse;</span><br><span class="line">import org.elasticsearch.action.support.ActiveShardCount;</span><br><span class="line">import org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line">import org.elasticsearch.client.IndicesClient;</span><br><span class="line">import org.elasticsearch.client.RequestOptions;</span><br><span class="line">import org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line">import org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line">import org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line">import org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line">import org.elasticsearch.common.settings.Settings;</span><br><span class="line">import org.elasticsearch.common.unit.TimeValue;</span><br><span class="line">import org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">- @author Administrator</span><br><span class="line"></span><br><span class="line">- @version 1.0</span><br><span class="line">  **/</span><br><span class="line">  @SpringBootTest</span><br><span class="line">  @RunWith(SpringRunner.class)</span><br><span class="line">  public class TestIndex &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">//    @Autowired</span><br><span class="line">//    RestClient restClient;</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">//创建索引</span><br><span class="line">@Test</span><br><span class="line">public void testCreateIndex() throws IOException &#123;</span><br><span class="line">    //创建索引对象</span><br><span class="line">    CreateIndexRequest createIndexRequest = new CreateIndexRequest(&quot;itheima_book&quot;);</span><br><span class="line">    //设置参数</span><br><span class="line">    createIndexRequest.settings(Settings.builder().put(&quot;number_of_shards&quot;, &quot;1&quot;).put(&quot;number_of_replicas&quot;, &quot;0&quot;));</span><br><span class="line">    //指定映射1</span><br><span class="line">    createIndexRequest.mapping(&quot; &#123;\n&quot; +</span><br><span class="line">            &quot; \t\&quot;properties\&quot;: &#123;\n&quot; +</span><br><span class="line">            &quot;            \&quot;name\&quot;:&#123;\n&quot; +</span><br><span class="line">            &quot;             \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot; +</span><br><span class="line">            &quot;           &#125;,\n&quot; +</span><br><span class="line">            &quot;           \&quot;description\&quot;: &#123;\n&quot; +</span><br><span class="line">            &quot;              \&quot;type\&quot;: \&quot;text\&quot;\n&quot; +</span><br><span class="line">            &quot;           &#125;,\n&quot; +</span><br><span class="line">            &quot;            \&quot;price\&quot;:&#123;\n&quot; +</span><br><span class="line">            &quot;             \&quot;type\&quot;:\&quot;long\&quot;\n&quot; +</span><br><span class="line">            &quot;           &#125;,\n&quot; +</span><br><span class="line">            &quot;           \&quot;pic\&quot;:&#123;\n&quot; +</span><br><span class="line">            &quot;             \&quot;type\&quot;:\&quot;text\&quot;,\n&quot; +</span><br><span class="line">            &quot;             \&quot;index\&quot;:false\n&quot; +</span><br><span class="line">            &quot;           &#125;\n&quot; +</span><br><span class="line">            &quot; \t&#125;\n&quot; +</span><br><span class="line">            &quot;&#125;&quot;, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    //指定映射2</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">//        Map&lt;String, Object&gt; message = new HashMap&lt;&gt;();</span><br><span class="line">//        message.put(&quot;type&quot;, &quot;text&quot;);</span><br><span class="line">//        Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;();</span><br><span class="line">//        properties.put(&quot;message&quot;, message);</span><br><span class="line">//        Map&lt;String, Object&gt; mapping = new HashMap&lt;&gt;();</span><br><span class="line">//        mapping.put(&quot;properties&quot;, properties);</span><br><span class="line">//        createIndexRequest.mapping(mapping);</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">    //指定映射3</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">//        XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">//        builder.startObject();</span><br><span class="line">//        &#123;</span><br><span class="line">//            builder.startObject(&quot;properties&quot;);</span><br><span class="line">//            &#123;</span><br><span class="line">//                builder.startObject(&quot;message&quot;);</span><br><span class="line">//                &#123;</span><br><span class="line">//                    builder.field(&quot;type&quot;, &quot;text&quot;);</span><br><span class="line">//                &#125;</span><br><span class="line">//                builder.endObject();</span><br><span class="line">//            &#125;</span><br><span class="line">//            builder.endObject();</span><br><span class="line">//        &#125;</span><br><span class="line">//        builder.endObject();</span><br><span class="line">//        createIndexRequest.mapping(builder);</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">    //设置别名</span><br><span class="line">    createIndexRequest.alias(new Alias(&quot;itheima_index_new&quot;));</span><br><span class="line"></span><br><span class="line">    // 额外参数</span><br><span class="line">    //设置超时时间</span><br><span class="line">    createIndexRequest.setTimeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">    //设置主节点超时时间</span><br><span class="line">    createIndexRequest.setMasterTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">    //在创建索引API返回响应之前等待的活动分片副本的数量，以int形式表示</span><br><span class="line">    createIndexRequest.waitForActiveShards(ActiveShardCount.from(2));</span><br><span class="line">    createIndexRequest.waitForActiveShards(ActiveShardCount.DEFAULT);</span><br><span class="line"></span><br><span class="line">    //操作索引的客户端</span><br><span class="line">    IndicesClient indices = client.indices();</span><br><span class="line">    //执行创建索引库</span><br><span class="line">    CreateIndexResponse createIndexResponse = indices.create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    //得到响应（全部）</span><br><span class="line">    boolean acknowledged = createIndexResponse.isAcknowledged();</span><br><span class="line">    //得到响应 指示是否在超时前为索引中的每个分片启动了所需数量的碎片副本</span><br><span class="line">    boolean shardsAcknowledged = createIndexResponse.isShardsAcknowledged();</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot; + acknowledged);</span><br><span class="line">    System.out.println(shardsAcknowledged);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//异步新增索引</span><br><span class="line">@Test</span><br><span class="line">public void testCreateIndexAsync() throws IOException &#123;</span><br><span class="line">    //创建索引对象</span><br><span class="line">    CreateIndexRequest createIndexRequest = new CreateIndexRequest(&quot;itheima_book2&quot;);</span><br><span class="line">    //设置参数</span><br><span class="line">    createIndexRequest.settings(Settings.builder().put(&quot;number_of_shards&quot;, &quot;1&quot;).put(&quot;number_of_replicas&quot;, &quot;0&quot;));</span><br><span class="line">    //指定映射1</span><br><span class="line">    createIndexRequest.mapping(&quot; &#123;\n&quot; +</span><br><span class="line">            &quot; \t\&quot;properties\&quot;: &#123;\n&quot; +</span><br><span class="line">            &quot;            \&quot;name\&quot;:&#123;\n&quot; +</span><br><span class="line">            &quot;             \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot; +</span><br><span class="line">            &quot;           &#125;,\n&quot; +</span><br><span class="line">            &quot;           \&quot;description\&quot;: &#123;\n&quot; +</span><br><span class="line">            &quot;              \&quot;type\&quot;: \&quot;text\&quot;\n&quot; +</span><br><span class="line">            &quot;           &#125;,\n&quot; +</span><br><span class="line">            &quot;            \&quot;price\&quot;:&#123;\n&quot; +</span><br><span class="line">            &quot;             \&quot;type\&quot;:\&quot;long\&quot;\n&quot; +</span><br><span class="line">            &quot;           &#125;,\n&quot; +</span><br><span class="line">            &quot;           \&quot;pic\&quot;:&#123;\n&quot; +</span><br><span class="line">            &quot;             \&quot;type\&quot;:\&quot;text\&quot;,\n&quot; +</span><br><span class="line">            &quot;             \&quot;index\&quot;:false\n&quot; +</span><br><span class="line">            &quot;           &#125;\n&quot; +</span><br><span class="line">            &quot; \t&#125;\n&quot; +</span><br><span class="line">            &quot;&#125;&quot;, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    //监听方法</span><br><span class="line">    ActionListener&lt;CreateIndexResponse&gt; listener =</span><br><span class="line">            new ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onResponse(CreateIndexResponse createIndexResponse) &#123;</span><br><span class="line">                    System.out.println(&quot;!!!!!!!!创建索引成功&quot;);</span><br><span class="line">                    System.out.println(createIndexResponse.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onFailure(Exception e) &#123;</span><br><span class="line">                    System.out.println(&quot;!!!!!!!!创建索引失败&quot;);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    //操作索引的客户端</span><br><span class="line">    IndicesClient indices = client.indices();</span><br><span class="line">    //执行创建索引库</span><br><span class="line">    indices.createAsync(createIndexRequest, RequestOptions.DEFAULT, listener);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.sleep(5000);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">//删除索引库</span><br><span class="line">@Test</span><br><span class="line">public void testDeleteIndex() throws IOException &#123;</span><br><span class="line">    //删除索引对象</span><br><span class="line">    DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(&quot;itheima_book2&quot;);</span><br><span class="line">    //操作索引的客户端</span><br><span class="line">    IndicesClient indices = client.indices();</span><br><span class="line">    //执行删除索引</span><br><span class="line">    AcknowledgedResponse delete = indices.delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    //得到响应</span><br><span class="line">    boolean acknowledged = delete.isAcknowledged();</span><br><span class="line">    System.out.println(acknowledged);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//异步删除索引库</span><br><span class="line">@Test</span><br><span class="line">public void testDeleteIndexAsync() throws IOException &#123;</span><br><span class="line">    //删除索引对象</span><br><span class="line">    DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(&quot;itheima_book2&quot;);</span><br><span class="line">    //操作索引的客户端</span><br><span class="line">    IndicesClient indices = client.indices();</span><br><span class="line"></span><br><span class="line">    //监听方法</span><br><span class="line">    ActionListener&lt;AcknowledgedResponse&gt; listener =</span><br><span class="line">            new ActionListener&lt;AcknowledgedResponse&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onResponse(AcknowledgedResponse deleteIndexResponse) &#123;</span><br><span class="line">                    System.out.println(&quot;!!!!!!!!删除索引成功&quot;);</span><br><span class="line">                    System.out.println(deleteIndexResponse.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onFailure(Exception e) &#123;</span><br><span class="line">                    System.out.println(&quot;!!!!!!!!删除索引失败&quot;);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">    //执行删除索引</span><br><span class="line">    indices.deleteAsync(deleteIndexRequest, RequestOptions.DEFAULT, listener);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.sleep(5000);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Indices Exists API</span><br><span class="line">@Test</span><br><span class="line">public void testExistIndex() throws IOException &#123;</span><br><span class="line">    GetIndexRequest request = new GetIndexRequest(&quot;itheima_book&quot;);</span><br><span class="line">    request.local(false);//从主节点返回本地信息或检索状态</span><br><span class="line">    request.humanReadable(true);//以适合人类的格式返回结果</span><br><span class="line">    request.includeDefaults(false);//是否返回每个索引的所有默认设置</span><br><span class="line"></span><br><span class="line">    boolean exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">// Indices Open API</span><br><span class="line">@Test</span><br><span class="line">public void testOpenIndex() throws IOException &#123;</span><br><span class="line">    OpenIndexRequest request = new OpenIndexRequest(&quot;itheima_book&quot;);</span><br><span class="line"></span><br><span class="line">    OpenIndexResponse openIndexResponse = client.indices().open(request, RequestOptions.DEFAULT);</span><br><span class="line">    boolean acknowledged = openIndexResponse.isAcknowledged();</span><br><span class="line">    System.out.println(&quot;!!!!!!!!!&quot;+acknowledged);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Indices Close API</span><br><span class="line">@Test</span><br><span class="line">public void testCloseIndex() throws IOException &#123;</span><br><span class="line">    CloseIndexRequest request = new CloseIndexRequest(&quot;index&quot;);</span><br><span class="line">    AcknowledgedResponse closeIndexResponse = client.indices().close(request, RequestOptions.DEFAULT);</span><br><span class="line">    boolean acknowledged = closeIndexResponse.isAcknowledged();</span><br><span class="line">    System.out.println(&quot;!!!!!!!!!&quot;+acknowledged);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="14．-search搜索入门"><a href="#14．-search搜索入门" class="headerlink" title="14． search搜索入门"></a>14． search搜索入门</h1><h2 id="14-1．-搜索语法入门"><a href="#14-1．-搜索语法入门" class="headerlink" title="14.1． 搜索语法入门"></a>14.1． 搜索语法入门</h2><h3 id="14-1-1query-string-search"><a href="#14-1-1query-string-search" class="headerlink" title="14.1.1query string search"></a>14.1.1query string search</h3><p>无条件搜索所有 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 969,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;Bootstrap开发&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201002&quot;,</span><br><span class="line">          &quot;price&quot; : 38.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;bootstrap&quot;,</span><br><span class="line">            &quot;dev&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;java编程思想&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 68.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;java&quot;,</span><br><span class="line">            &quot;dev&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;spring开发基础&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 88.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-24 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;spring&quot;,</span><br><span class="line">            &quot;java&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释</p>
<p>took：耗费了几毫秒</p>
<p>timed_out：是否超时，这里是没有</p>
<p>_shards：到几个分片搜索，成功几个，跳过几个，失败几个。 </p>
<p>hits.total：查询结果的数量，3个document</p>
<p>hits.max_score：score的含义，就是document对于一个search的相关度的匹配分数，越相关，就越匹配，分数也高</p>
<p>hits.hits：包含了匹配搜索的document的所有详细数据</p>
<h3 id="14-1-2传参"><a href="#14-1-2传参" class="headerlink" title="14.1.2传参"></a>14.1.2传参</h3><p>与http请求传参类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search?q=name:java&amp;sort=price:desc</span><br></pre></td></tr></table></figure>
<p>类比sql:  select * from book where name like ’ %java%’ order by price desc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 2,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;java编程思想&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 68.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;java&quot;,</span><br><span class="line">            &quot;dev&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          68.6</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-1-3图解timeout"><a href="#14-1-3图解timeout" class="headerlink" title="14.1.3图解timeout"></a>14.1.3图解timeout</h3><p>GET /book/_search?timeout=10ms</p>
<p>全局设置：配置文件中设置 search.default_search_timeout：100ms。默认不超时。</p>
<h2 id="14-2．multi-index-多索引搜索"><a href="#14-2．multi-index-多索引搜索" class="headerlink" title="14.2．multi-index 多索引搜索"></a>14.2．multi-index 多索引搜索</h2><h3 id="14-2-1multi-index搜索模式"><a href="#14-2-1multi-index搜索模式" class="headerlink" title="14.2.1multi-index搜索模式"></a>14.2.1multi-index搜索模式</h3><p>告诉你如何一次性搜索多个index和多个type下的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/_search：所有索引下的所有数据都搜索出来</span><br><span class="line">/index1/_search：指定一个index，搜索其下所有的数据</span><br><span class="line">/index1,index2/_search：同时搜索两个index下的数据</span><br><span class="line">/index*/_search：按照通配符去匹配多个索引</span><br></pre></td></tr></table></figure>
<p>应用场景：生产环境log索引可以按照日期分开。</p>
<p>log_to_es_20190910</p>
<p>log_to_es_20190911</p>
<p>log_to_es_20180910</p>
<h3 id="14-2-2初步图解一下简单的搜索原理"><a href="#14-2-2初步图解一下简单的搜索原理" class="headerlink" title="14.2.2初步图解一下简单的搜索原理"></a>14.2.2初步图解一下简单的搜索原理</h3><p>搜索原理初步图解</p>
<h2 id="14-3．-分页搜索"><a href="#14-3．-分页搜索" class="headerlink" title="14.3． 分页搜索"></a>14.3． 分页搜索</h2><h3 id="14-3-1分页搜索的语法"><a href="#14-3-1分页搜索的语法" class="headerlink" title="14.3.1分页搜索的语法"></a>14.3.1分页搜索的语法</h3><p>sql: select * from book limit 1,5</p>
<p>size，from</p>
<p>GET /book/_search?size=10</p>
<p>GET /book/_search?size=10&amp;from=0</p>
<p>GET /book/_search?size=10&amp;from=20</p>
<p>GET /book_search?from=0&amp;size=3</p>
<h3 id="14-3-2deep-paging"><a href="#14-3-2deep-paging" class="headerlink" title="14.3.2deep paging"></a>14.3.2deep paging</h3><h4 id="什么是deep-paging"><a href="#什么是deep-paging" class="headerlink" title="什么是deep paging"></a>什么是deep paging</h4><p>根据相关度评分倒排序，所以分页过深，协调节点会将大量数据聚合分析。</p>
<h4 id="deep-paging-性能问题"><a href="#deep-paging-性能问题" class="headerlink" title="deep paging 性能问题"></a>deep paging 性能问题</h4><p>1消耗网络带宽，因为所搜过深的话，各 shard 要把数据传递给 coordinate node，这个过程是有大量数据传递的，消耗网络。</p>
<p>2消耗内存，各 shard 要把数据传送给 coordinate node，这个传递回来的数据，是被 coordinate node 保存在内存中的，这样会大量消耗内存。</p>
<p>3消耗cup，coordinate node 要把传回来的数据进行排序，这个排序过程很消耗cpu。<br>所以：鉴于deep paging的性能问题，所有应尽量减少使用。</p>
<h2 id="14-4．-query-string基础语法"><a href="#14-4．-query-string基础语法" class="headerlink" title="14.4． query string基础语法"></a>14.4． query string基础语法</h2><h3 id="14-4-1query-string基础语法"><a href="#14-4-1query-string基础语法" class="headerlink" title="14.4.1query string基础语法"></a>14.4.1query string基础语法</h3><p>GET /book/_search?q=name:java</p>
<p>GET /book/_search?q=+name:java</p>
<p>GET /book/_search?q=-name:java</p>
<p>一个是掌握q=field:search content的语法，还有一个是掌握+和-的含义</p>
<h3 id="14-4-2、-all-metadata的原理和作用"><a href="#14-4-2、-all-metadata的原理和作用" class="headerlink" title="14.4.2、_all metadata的原理和作用"></a>14.4.2、_all metadata的原理和作用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search?q=java</span><br></pre></td></tr></table></figure>
<p>直接可以搜索所有的field，任意一个field包含指定的关键字就可以搜索出来。我们在进行中搜索的时候，难道是对document中的每一个field都进行一次搜索吗？不是的。</p>
<p>es中_all元数据。建立索引的时候，插入一条docunment，es会将所有的field值经行全量分词，把这些分词，放到_all field中。在搜索的时候，没有指定field，就在_all搜索。</p>
<p>举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:jack</span><br><span class="line">    email:123@qq.com</span><br><span class="line">    address:beijing</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>_all : jack,123@qq.com,beijing </p>
<h2 id="14-5．-query-DSL入门"><a href="#14-5．-query-DSL入门" class="headerlink" title="14.5． query DSL入门"></a>14.5． query DSL入门</h2><h3 id="14-5-1-DSL"><a href="#14-5-1-DSL" class="headerlink" title="14.5.1 DSL"></a>14.5.1 DSL</h3><p>query string 后边的参数原来越多，搜索条件越来越复杂，不能满足需求。</p>
<p>GET /book/_search?q=name:java&amp;size=10&amp;from=0&amp;sort=price:desc</p>
<p>DSL:Domain Specified Language，特定领域的语言</p>
<p>es特有的搜索语言，可在请求体中携带搜索条件，功能强大。</p>
<p>查询全部 GET /book/_search</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>排序 GET /book/_search?sort=price:desc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search </span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;name&quot; : &quot; java&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;sort&quot;: [</span><br><span class="line">        &#123; &quot;price&quot;: &quot;desc&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分页查询 GET /book/_search?size=10&amp;from=0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET  /book/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指定返回字段 GET /book/ _search? _source=name,studymodel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;studymodel&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过组合以上各种类型查询，实现复杂查询。</p>
<h3 id="14-5-2．-Query-DSL语法"><a href="#14-5-2．-Query-DSL语法" class="headerlink" title="14.5.2． Query DSL语法"></a>14.5.2． Query DSL语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME: &#123;</span><br><span class="line">        ARGUMENT: VALUE,</span><br><span class="line">        ARGUMENT: VALUE,...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QUERY_NAME: &#123;</span><br><span class="line">        FIELD_NAME: &#123;</span><br><span class="line">            ARGUMENT: VALUE,</span><br><span class="line">            ARGUMENT: VALUE,...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;test_field&quot;: &quot;test&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-5-3-组合多个搜索条件"><a href="#14-5-3-组合多个搜索条件" class="headerlink" title="14.5.3 组合多个搜索条件"></a>14.5.3 组合多个搜索条件</h3><p>搜索需求：title必须包含elasticsearch，content可以包含elasticsearch也可以不包含，author_id必须不为111</p>
<p>sql where  and or != </p>
<p>初始数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /website/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">          &quot;title&quot;: &quot;my hadoop article&quot;,</span><br><span class="line">          &quot;content&quot;: &quot;hadoop is very bad&quot;,</span><br><span class="line">          &quot;author_id&quot;: 111</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /website/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">          &quot;title&quot;: &quot;my elasticsearch  article&quot;,</span><br><span class="line">          &quot;content&quot;: &quot;es is very bad&quot;,</span><br><span class="line">          &quot;author_id&quot;: 112</span><br><span class="line">&#125;</span><br><span class="line">POST /website/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">          &quot;title&quot;: &quot;my elasticsearch article&quot;,</span><br><span class="line">          &quot;content&quot;: &quot;es is very goods&quot;,</span><br><span class="line">          &quot;author_id&quot;: 111</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /website/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;elasticsearch&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;content&quot;: &quot;elasticsearch&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;author_id&quot;: 111</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 488,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.47000363,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;website&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.47000363,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;my elasticsearch  article&quot;,</span><br><span class="line">          &quot;content&quot; : &quot;es is very bad&quot;,</span><br><span class="line">          &quot;author_id&quot; : 112</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更复杂的搜索需求：</p>
<p>select * from test_index where name=’tom’ or (hired =true and (personality =’good’ and rude != true ))</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">            &quot;bool&quot;: &#123;</span><br><span class="line">                &quot;must&quot;: &#123; &quot;match&quot;:&#123; &quot;name&quot;: &quot;tom&quot; &#125;&#125;,</span><br><span class="line">                &quot;should&quot;: [</span><br><span class="line">                    &#123; &quot;match&quot;:&#123; &quot;hired&quot;: true &#125;&#125;,</span><br><span class="line">                    &#123; &quot;bool&quot;: &#123;</span><br><span class="line">                        &quot;must&quot;:&#123; &quot;match&quot;: &#123; &quot;personality&quot;: &quot;good&quot; &#125;&#125;,</span><br><span class="line">                        &quot;must_not&quot;: &#123; &quot;match&quot;: &#123; &quot;rude&quot;: true &#125;&#125;</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;minimum_should_match&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-6．-full-text-search-全文检索"><a href="#14-6．-full-text-search-全文检索" class="headerlink" title="14.6． full-text search 全文检索"></a>14.6． full-text search 全文检索</h2><h3 id="14-6-1-全文检索"><a href="#14-6-1-全文检索" class="headerlink" title="14.6.1 全文检索"></a>14.6.1 全文检索</h3><p>重新创建book索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /book/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;description&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;studymodel&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;timestamp&quot;: &#123;</span><br><span class="line">         &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">         &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">        &quot;index&quot;:false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /book/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;Bootstrap开发&quot;,</span><br><span class="line">&quot;description&quot;: &quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;,</span><br><span class="line">&quot;studymodel&quot;: &quot;201002&quot;,</span><br><span class="line">&quot;price&quot;:38.6,</span><br><span class="line">&quot;timestamp&quot;:&quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">&quot;pic&quot;:&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">&quot;tags&quot;: [ &quot;bootstrap&quot;, &quot;dev&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /book/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;java编程思想&quot;,</span><br><span class="line">&quot;description&quot;: &quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;,</span><br><span class="line">&quot;studymodel&quot;: &quot;201001&quot;,</span><br><span class="line">&quot;price&quot;:68.6,</span><br><span class="line">&quot;timestamp&quot;:&quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">&quot;pic&quot;:&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">&quot;tags&quot;: [ &quot;java&quot;, &quot;dev&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /book/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;spring开发基础&quot;,</span><br><span class="line">&quot;description&quot;: &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</span><br><span class="line">&quot;studymodel&quot;: &quot;201001&quot;,</span><br><span class="line">&quot;price&quot;:88.6,</span><br><span class="line">&quot;timestamp&quot;:&quot;2019-08-24 19:11:35&quot;,</span><br><span class="line">&quot;pic&quot;:&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">&quot;tags&quot;: [ &quot;spring&quot;, &quot;java&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET  /book/_search </span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;description&quot; : &quot;java程序员&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-6-2-score初探"><a href="#14-6-2-score初探" class="headerlink" title="14.6.2 _score初探"></a>14.6.2 _score初探</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 2.137549,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 2.137549,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;spring开发基础&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 88.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-24 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;spring&quot;,</span><br><span class="line">            &quot;java&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.57961315,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;java编程思想&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 68.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;java&quot;,</span><br><span class="line">            &quot;dev&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果分析</p>
<p>1、建立索引时, description字段 term倒排索引</p>
<p>java 2,3</p>
<p>程序员 3</p>
<p>2、搜索时，直接找description中含有java的文档 2,3，并且3号文档含有两个java字段，一个程序员，所以得分高，排在前面。2号文档含有一个java，排在后面。</p>
<h2 id="14-7．-DSL-语法练习"><a href="#14-7．-DSL-语法练习" class="headerlink" title="14.7． DSL 语法练习"></a>14.7． DSL 语法练习</h2><h3 id="14-7-1-match-all"><a href="#14-7-1-match-all" class="headerlink" title="14.7.1 match_all"></a>14.7.1 match_all</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-2-match"><a href="#14-7-2-match" class="headerlink" title="14.7.2 match"></a>14.7.2 match</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;: &#123; </span><br><span class="line">		&quot;match&quot;: &#123; </span><br><span class="line">			&quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-3-multi-match"><a href="#14-7-3-multi-match" class="headerlink" title="14.7.3  multi_match"></a>14.7.3  multi_match</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;java程序员&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name&quot;, &quot;description&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-4、range-query-范围查询"><a href="#14-7-4、range-query-范围查询" class="headerlink" title="14.7.4、range query 范围查询"></a>14.7.4、range query 范围查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 80,</span><br><span class="line">		&quot;lte&quot;: 90</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-5、term-query"><a href="#14-7-5、term-query" class="headerlink" title="14.7.5、term query"></a>14.7.5、term query</h3><p>字段为keyword时，存储和搜索都不分词<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="14-7-6、terms-query"><a href="#14-7-6、terms-query" class="headerlink" title="14.7.6、terms query"></a>14.7.6、terms query</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123; &quot;terms&quot;: &#123; &quot;tag&quot;: [ &quot;search&quot;, &quot;full_text&quot;, &quot;nosql&quot; ] &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="14-7-7、exist-query-查询有某些字段值的文档"><a href="#14-7-7、exist-query-查询有某些字段值的文档" class="headerlink" title="14.7.7、exist query 查询有某些字段值的文档"></a>14.7.7、exist query 查询有某些字段值的文档</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;join_date&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-8、Fuzzy-query"><a href="#14-7-8、Fuzzy-query" class="headerlink" title="14.7. 8、Fuzzy query"></a>14.7. 8、Fuzzy query</h3><p>返回包含与搜索词类似的词的文档，该词由Levenshtein编辑距离度量。</p>
<p>包括以下几种情况：</p>
<ul>
<li><p>更改角色（box→fox）</p>
</li>
<li><p>删除字符（aple→apple）</p>
</li>
<li><p>插入字符（sick→sic）</p>
</li>
<li><p>调换两个相邻字符（ACT→CAT） </p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;fuzzy&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;jave&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-9、IDs"><a href="#14-7-9、IDs" class="headerlink" title="14.7.9、IDs"></a>14.7.9、IDs</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;ids&quot; : &#123;</span><br><span class="line">            &quot;values&quot; : [&quot;1&quot;, &quot;4&quot;, &quot;100&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-10、prefix-前缀查询"><a href="#14-7-10、prefix-前缀查询" class="headerlink" title="14.7.10、prefix 前缀查询"></a>14.7.10、prefix 前缀查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;spring&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-7-11、regexp-query-正则查询"><a href="#14-7-11、regexp-query-正则查询" class="headerlink" title="14.7.11、regexp query  正则查询"></a>14.7.11、regexp query  正则查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;regexp&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;j.*a&quot;,</span><br><span class="line">                &quot;flags&quot; : &quot;ALL&quot;,</span><br><span class="line">                &quot;max_determinized_states&quot;: 10000,</span><br><span class="line">                &quot;rewrite&quot;: &quot;constant_score&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-8．-Filter"><a href="#14-8．-Filter" class="headerlink" title="14.8． Filter"></a>14.8． Filter</h2><h3 id="14-8-1-filter与query示例"><a href="#14-8-1-filter与query示例" class="headerlink" title="14.8.1 filter与query示例"></a>14.8.1 filter与query示例</h3><p>需求：用户查询description中有”java程序员”，并且价格大于80小于90的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 80,</span><br><span class="line">		      &quot;lte&quot;: 90</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用filter:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;price&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 80,</span><br><span class="line">		     &quot;lte&quot;: 90</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-8-2-filter与query对比"><a href="#14-8-2-filter与query对比" class="headerlink" title="14.8.2 filter与query对比"></a>14.8.2 filter与query对比</h3><p>filter，仅仅只是按照搜索条件过滤出需要的数据而已，不计算任何相关度分数，对相关度没有任何影响。</p>
<p>query，会去计算每个document相对于搜索条件的相关度，并按照相关度进行排序。</p>
<p>应用场景：</p>
<p>一般来说，如果你是在进行搜索，需要将最匹配搜索条件的数据先返回，那么用query        如果你只是要根据一些条件筛选出一部分数据，不关注其排序，那么用filter</p>
<h3 id="14-8-3-filter与query性能"><a href="#14-8-3-filter与query性能" class="headerlink" title="14.8.3 filter与query性能"></a>14.8.3 filter与query性能</h3><p>filter，不需要计算相关度分数，不需要按照相关度分数进行排序，同时还有内置的自动cache最常使用filter的数据</p>
<p>query，相反，要计算相关度分数，按照分数进行排序，而且无法cache结果</p>
<h2 id="14-9．-定位错误语法"><a href="#14-9．-定位错误语法" class="headerlink" title="14.9． 定位错误语法"></a>14.9． 定位错误语法</h2><p>验证错误语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_validate/query?explain</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;mach&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;valid&quot; : false,</span><br><span class="line">  &quot;error&quot; : &quot;org.elasticsearch.common.ParsingException: no [query] registered for [mach]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_validate/query?explain</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;valid&quot; : true,</span><br><span class="line">  &quot;explanations&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot; : &quot;book&quot;,</span><br><span class="line">      &quot;valid&quot; : true,</span><br><span class="line">      &quot;explanation&quot; : &quot;description:java description:程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般用在那种特别复杂庞大的搜索下，比如你一下子写了上百行的搜索，这个时候可以先用validate api去验证一下，搜索是否合法。</p>
<p>合法以后，explain就像mysql的执行计划，可以看到搜索的目标等信息。</p>
<h2 id="14-10．-定制排序规则"><a href="#14-10．-定制排序规则" class="headerlink" title="14.10． 定制排序规则"></a>14.10． 定制排序规则</h2><h3 id="14-10-1-默认排序规则"><a href="#14-10-1-默认排序规则" class="headerlink" title="14.10.1 默认排序规则"></a>14.10.1 默认排序规则</h3><p>默认情况下，是按照_score降序排序的</p>
<p>然而，某些情况下，可能没有有用的_score，比如说filter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，也可以是constant_score</p>
<h3 id="14-10-2-定制排序规则"><a href="#14-10-2-定制排序规则" class="headerlink" title="14.10.2 定制排序规则"></a>14.10.2 定制排序规则</h3><p>相当于sql中order by  ?sort=sprice:desc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;constant_score&quot;: &#123;</span><br><span class="line">      &quot;filter&quot; : &#123;</span><br><span class="line">            &quot;term&quot; : &#123;</span><br><span class="line">                &quot;studymodel&quot; : &quot;201001&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-11．-Text字段排序问题"><a href="#14-11．-Text字段排序问题" class="headerlink" title="14.11． Text字段排序问题"></a>14.11． Text字段排序问题</h2><p>如果对一个text field进行排序，结果往往不准确，因为分词后是多个单词，再排序就不是我们想要的结果了。</p>
<p>通常解决方案是，将一个text field建立两次索引，一个分词，用来进行搜索；一个不分词，用来进行排序。</p>
<p>fielddate:true</p>
<pre><code>PUT /website 
&#123;
  &quot;mappings&quot;: &#123;
  &quot;properties&quot;: &#123;
    &quot;title&quot;: &#123;
      &quot;type&quot;: &quot;text&quot;,
      &quot;fields&quot;: &#123;
        &quot;keyword&quot;: &#123;
          &quot;type&quot;: &quot;keyword&quot;
        &#125;        
      &#125;      
    &#125;,
    &quot;content&quot;: &#123;
      &quot;type&quot;: &quot;text&quot;
    &#125;,
    &quot;post_date&quot;: &#123;
      &quot;type&quot;: &quot;date&quot;
    &#125;,
    &quot;author_id&quot;: &#123;
      &quot;type&quot;: &quot;long&quot;
    &#125;
  &#125;
 &#125;
&#125;
</code></pre><p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /website/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;first article&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this is my second article&quot;,</span><br><span class="line">  &quot;post_date&quot;: &quot;2019-01-01&quot;,</span><br><span class="line">  &quot;author_id&quot;: 110</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;: &quot;second article&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;this is my second article&quot;,</span><br><span class="line">     &quot;post_date&quot;: &quot;2019-01-01&quot;,</span><br><span class="line">    &quot;author_id&quot;: 110</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /website/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">     &quot;title&quot;: &quot;third article&quot;,</span><br><span class="line">     &quot;content&quot;: &quot;this is my third article&quot;,</span><br><span class="line">     &quot;post_date&quot;: &quot;2019-01-02&quot;,</span><br><span class="line">     &quot;author_id&quot;: 110</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /website/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title.keyword&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-12．-Scroll分批查询"><a href="#14-12．-Scroll分批查询" class="headerlink" title="14.12． Scroll分批查询"></a>14.12． Scroll分批查询</h3><p>场景：下载某一个索引中1亿条数据，到文件或是数据库。</p>
<p>不能一下全查出来，系统内存溢出。所以使用scoll滚动搜索技术，一批一批查询。</p>
<p>scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的</p>
<p>每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了。</p>
<p>搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAMOkWTURBNDUtcjZTVUdKMFp5cXloVElOQQ==&quot;,</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">     </span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获得的结果会有一个scoll_id，下一次再发送scoll请求的时候，必须带上这个scoll_id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    &quot;scroll&quot;: &quot;1m&quot;, </span><br><span class="line">    &quot;scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAMOkWTURBNDUtcjZTVUdKMFp5cXloVElOQQ==&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与分页区别：</p>
<p>分页给用户看的  deep paging</p>
<p>scroll是用户系统内部操作，如下载批量数据，数据转移。零停机改变索引映射。</p>
<h1 id="15．-java-api实现搜索"><a href="#15．-java-api实现搜索" class="headerlink" title="15． java api实现搜索"></a>15． java api实现搜索</h1><h1 id="16．-评分机制详解"><a href="#16．-评分机制详解" class="headerlink" title="16． 评分机制详解"></a>16． 评分机制详解</h1><h2 id="16-1．-评分机制-TF-IDF"><a href="#16-1．-评分机制-TF-IDF" class="headerlink" title="16.1． 评分机制 TF\IDF"></a>16.1． 评分机制 TF\IDF</h2><h3 id="16-1-1-算法介绍"><a href="#16-1-1-算法介绍" class="headerlink" title="16.1.1 算法介绍"></a>16.1.1 算法介绍</h3><p>relevance score算法，简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度。</p>
<p>Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法。TF词频(Term Frequency)，IDF逆向文件频率(Inverse Document Frequency)</p>
<p><strong>Term frequency</strong>：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关。</p>
<p><img src="/img/1571494142950.png" alt="1571494142950"></p>
<p>举例：搜索请求：hello world</p>
<p>doc1 : hello you and me,and world is very good. </p>
<p>doc2 : hello,how are you</p>
<p><strong>Inverse document frequency</strong>：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关.</p>
<p><img src="/img/1571494159465.png" alt="1571494159465"></p>
<p><img src="/img/1571494176760.png" alt="1571494176760"></p>
<p>举例：搜索请求：hello world</p>
<p>doc1 :  hello ,today is very good</p>
<p>doc2 : hi world ,how are you</p>
<p>整个index中1亿条数据。hello的document 1000个，有world的document  有100个。</p>
<p>doc2 更相关</p>
<p><strong>Field-length norm</strong>：field长度，field越长，相关度越弱</p>
<p>举例：搜索请求：hello world</p>
<p>doc1 : {“title”:”hello article”,”content “:”balabalabal 1万个”}</p>
<p>doc2 : {“title”:”my article”,”content “:”balabalabal 1万个,world”}</p>
<h3 id="16-1-2-score是如何被计算出来的"><a href="#16-1-2-score是如何被计算出来的" class="headerlink" title="16.1.2 _score是如何被计算出来的"></a>16.1.2 _score是如何被计算出来的</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search?explain=true</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 5,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 2.137549,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[book][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;MDA45-r6SUGJ0ZyqyhTINA&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 2.137549,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;spring开发基础&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 88.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-24 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;spring&quot;,</span><br><span class="line">            &quot;java&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 2.137549,</span><br><span class="line">          &quot;description&quot; : &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 0.7936629,</span><br><span class="line">              &quot;description&quot; : &quot;weight(description:java in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.7936629,</span><br><span class="line">                  &quot;description&quot; : &quot;score(freq=2.0), product of:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.2,</span><br><span class="line">                      &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.47000363,</span><br><span class="line">                      &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:&quot;,</span><br><span class="line">                      &quot;details&quot; : [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 2,</span><br><span class="line">                          &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 3,</span><br><span class="line">                          &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.7675597,</span><br><span class="line">                      &quot;description&quot; : &quot;tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:&quot;,</span><br><span class="line">                      &quot;details&quot; : [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 2.0,</span><br><span class="line">                          &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 1.2,</span><br><span class="line">                          &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 0.75,</span><br><span class="line">                          &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 12.0,</span><br><span class="line">                          &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 35.333332,</span><br><span class="line">                          &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 1.3438859,</span><br><span class="line">              &quot;description&quot; : &quot;weight(description:程序员 in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 1.3438859,</span><br><span class="line">                  &quot;description&quot; : &quot;score(freq=1.0), product of:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.2,</span><br><span class="line">                      &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.98082924,</span><br><span class="line">                      &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:&quot;,</span><br><span class="line">                      &quot;details&quot; : [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 1,</span><br><span class="line">                          &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 3,</span><br><span class="line">                          &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.6227967,</span><br><span class="line">                      &quot;description&quot; : &quot;tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:&quot;,</span><br><span class="line">                      &quot;details&quot; : [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 1.0,</span><br><span class="line">                          &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 1.2,</span><br><span class="line">                          &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 0.75,</span><br><span class="line">                          &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 12.0,</span><br><span class="line">                          &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 35.333332,</span><br><span class="line">                          &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[book][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;MDA45-r6SUGJ0ZyqyhTINA&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;book&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.57961315,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;java编程思想&quot;,</span><br><span class="line">          &quot;description&quot; : &quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;,</span><br><span class="line">          &quot;studymodel&quot; : &quot;201001&quot;,</span><br><span class="line">          &quot;price&quot; : 68.6,</span><br><span class="line">          &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span><br><span class="line">          &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;java&quot;,</span><br><span class="line">            &quot;dev&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 0.57961315,</span><br><span class="line">          &quot;description&quot; : &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 0.57961315,</span><br><span class="line">              &quot;description&quot; : &quot;weight(description:java in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.57961315,</span><br><span class="line">                  &quot;description&quot; : &quot;score(freq=1.0), product of:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.2,</span><br><span class="line">                      &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.47000363,</span><br><span class="line">                      &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:&quot;,</span><br><span class="line">                      &quot;details&quot; : [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 2,</span><br><span class="line">                          &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 3,</span><br><span class="line">                          &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.56055,</span><br><span class="line">                      &quot;description&quot; : &quot;tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:&quot;,</span><br><span class="line">                      &quot;details&quot; : [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 1.0,</span><br><span class="line">                          &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 1.2,</span><br><span class="line">                          &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 0.75,</span><br><span class="line">                          &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 19.0,</span><br><span class="line">                          &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;value&quot; : 35.333332,</span><br><span class="line">                          &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                          &quot;details&quot; : [ ]</span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="16-1-3-分析一个document是如何被匹配上的"><a href="#16-1-3-分析一个document是如何被匹配上的" class="headerlink" title="16.1.3 分析一个document是如何被匹配上的"></a>16.1.3 分析一个document是如何被匹配上的</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_explain/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="16-2．-Doc-value"><a href="#16-2．-Doc-value" class="headerlink" title="16.2． Doc value"></a>16.2． Doc value</h2><p>搜索的时候，要依靠倒排索引；排序的时候，需要依靠正排索引，看到每个document的每个field，然后进行排序，所谓的正排索引，其实就是doc values</p>
<p>在建立索引的时候，一方面会建立倒排索引，以供搜索用；一方面会建立正排索引，也就是doc values，以供排序，聚合，过滤等操作使用</p>
<p>doc values是被保存在磁盘上的，此时如果内存足够，os会自动将其缓存在内存中，性能还是会很高；如果内存不足够，os会将其写入磁盘上</p>
<p><strong>倒排索引</strong></p>
<p>doc1: hello world you and me</p>
<p>doc2: hi, world, how are you</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>term</th>
<th>doc1</th>
<th>doc2</th>
</tr>
</thead>
<tbody>
<tr>
<td>hello</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>world</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>you</td>
<td>*</td>
<td>*</td>
</tr>
<tr>
<td>and</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>me</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>hi</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>how</td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>are</td>
<td></td>
<td>*</td>
</tr>
</tbody>
</table>
</div>
<p>搜索时：</p>
<p>hello you —&gt; hello, you</p>
<p>hello —&gt; doc1</p>
<p>you —&gt; doc1,doc2</p>
<p>doc1: hello world you and me</p>
<p>doc2: hi, world, how are you</p>
<p>sort by 出现问题</p>
<p> <strong>正排索引</strong></p>
<p>doc1: { “name”: “jack”, “age”: 27 }</p>
<p>doc2: { “name”: “tom”, “age”: 30 }</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>document</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>doc1</td>
<td>jack</td>
<td>27</td>
</tr>
<tr>
<td>doc2</td>
<td>tom</td>
<td>30</td>
</tr>
</tbody>
</table>
</div>
<h2 id="16-3．-query-phase"><a href="#16-3．-query-phase" class="headerlink" title="16.3． query phase"></a>16.3． query phase</h2><h3 id="1、query-phase"><a href="#1、query-phase" class="headerlink" title="1、query phase"></a>1、query phase</h3><p>（1）搜索请求发送到某一个coordinate node，构构建一个priority queue，长度以paging操作from和size为准，默认为10</p>
<p>（2）coordinate node将请求转发到所有shard，每个shard本地搜索，并构建一个本地的priority queue</p>
<p>（3）各个shard将自己的priority queue返回给coordinate node，并构建一个全局的priority queue</p>
<h3 id="2、replica-shard如何提升搜索吞吐量"><a href="#2、replica-shard如何提升搜索吞吐量" class="headerlink" title="2、replica shard如何提升搜索吞吐量"></a>2、replica shard如何提升搜索吞吐量</h3><p>一次请求要打到所有shard的一个replica/primary上去，如果每个shard都有多个replica，那么同时并发过来的搜索请求可以同时打到其他的replica上去</p>
<h2 id="16-4．-fetch-phase"><a href="#16-4．-fetch-phase" class="headerlink" title="16.4． fetch phase"></a>16.4． fetch phase</h2><h3 id="1、fetch-phbase工作流程"><a href="#1、fetch-phbase工作流程" class="headerlink" title="1、fetch phbase工作流程"></a>1、fetch phbase工作流程</h3><p>（1）coordinate node构建完priority queue之后，就发送mget请求去所有shard上获取对应的document</p>
<p>（2）各个shard将document返回给coordinate node</p>
<p>（3）coordinate node将合并后的document结果返回给client客户端</p>
<h3 id="2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score排序"><a href="#2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score排序" class="headerlink" title="2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score排序"></a>2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score排序</h3><h2 id="16-5．-搜索参数小总结"><a href="#16-5．-搜索参数小总结" class="headerlink" title="16.5． 搜索参数小总结"></a>16.5． 搜索参数小总结</h2><h3 id="1、preference"><a href="#1、preference" class="headerlink" title="1、preference"></a>1、preference</h3><p>决定了哪些shard会被用来执行搜索操作</p>
<p>_primary, _primary_first, _local, _only_node:xyz, _prefer_node:xyz, _shards:2,3</p>
<p>bouncing results问题，两个document排序，field值相同；不同的shard上，可能排序不同；每次请求轮询打到不同的replica shard上；每次页面上看到的搜索结果的排序都不一样。这就是bouncing result，也就是跳跃的结果。</p>
<p>搜索的时候，是轮询将搜索请求发送到每一个replica shard（primary shard），但是在不同的shard上，可能document的排序不同</p>
<p>解决方案就是将preference设置为一个字符串，比如说user_id，让每个user每次搜索的时候，都使用同一个replica shard去执行，就不会看到bouncing results了</p>
<h3 id="2、timeout"><a href="#2、timeout" class="headerlink" title="2、timeout"></a>2、timeout</h3><p>已经讲解过原理了，主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长</p>
<h3 id="3、routing"><a href="#3、routing" class="headerlink" title="3、routing"></a>3、routing</h3><p>document文档路由，_id路由，routing=user_id，这样的话可以让同一个user对应的数据到一个shard上去</p>
<h3 id="4、search-type"><a href="#4、search-type" class="headerlink" title="4、search_type"></a>4、search_type</h3><p>default：query_then_fetch</p>
<p>dfs_query_then_fetch，可以提升revelance sort精准度</p>
<h1 id="17．-聚合入门"><a href="#17．-聚合入门" class="headerlink" title="17． 聚合入门"></a>17． 聚合入门</h1><h2 id="17-1聚合示例"><a href="#17-1聚合示例" class="headerlink" title="17.1聚合示例"></a>17.1聚合示例</h2><h3 id="17-1-1需求：计算每个studymodel下的商品数量"><a href="#17-1-1需求：计算每个studymodel下的商品数量" class="headerlink" title="17.1.1需求：计算每个studymodel下的商品数量"></a>17.1.1需求：计算每个studymodel下的商品数量</h3><p>sql语句： select studymodel，count(*)  from book group by studymodel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_model&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;studymodel&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-1-2-需求：计算每个tags下的商品数量"><a href="#17-1-2-需求：计算每个tags下的商品数量" class="headerlink" title="17.1.2 需求：计算每个tags下的商品数量"></a>17.1.2 需求：计算每个tags下的商品数量</h3><p>设置字段”fielddata”: true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /book/_mapping/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;tags&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tags&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;tags&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-1-3-需求：加上搜索条件，计算每个tags下的商品数量"><a href="#17-1-3-需求：加上搜索条件，计算每个tags下的商品数量" class="headerlink" title="17.1.3 需求：加上搜索条件，计算每个tags下的商品数量"></a>17.1.3 需求：加上搜索条件，计算每个tags下的商品数量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;description&quot;: &quot;java程序员&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tags&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;tags&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-1-4-需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格"><a href="#17-1-4-需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格" class="headerlink" title="17.1.4 需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格"></a>17.1.4 需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot;: 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;group_by_tags&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; </span><br><span class="line">              &quot;field&quot; : &quot;tags&quot; </span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_price&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-1-5-需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序"><a href="#17-1-5-需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序" class="headerlink" title="17.1.5 需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序"></a>17.1.5 需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot;: 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;group_by_tags&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; </span><br><span class="line">              &quot;field&quot; : &quot;tags&quot;,</span><br><span class="line">              &quot;order&quot;: &#123;</span><br><span class="line">                &quot;avg_price&quot;: &quot;desc&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_price&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-1-6-需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格"><a href="#17-1-6-需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格" class="headerlink" title="17.1.6 需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格"></a>17.1.6 需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /book/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_price&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 0,</span><br><span class="line">            &quot;to&quot;: 40</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 40,</span><br><span class="line">            &quot;to&quot;: 60</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 60,</span><br><span class="line">            &quot;to&quot;: 80</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_tags&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;tags&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;average_price&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;price&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="17-2两个核心概念：bucket和metric"><a href="#17-2两个核心概念：bucket和metric" class="headerlink" title="17.2两个核心概念：bucket和metric"></a>17.2两个核心概念：bucket和metric</h2><h3 id="17-2-1-bucket：一个数据分组"><a href="#17-2-1-bucket：一个数据分组" class="headerlink" title="17.2.1 bucket：一个数据分组"></a>17.2.1 bucket：一个数据分组</h3><p>city  name<br>        北京 张三<br>        北京 李四<br>        天津 王五<br>        天津 赵六</p>
<p>天津 王麻子</p>
<p>划分出来两个bucket，一个是北京bucket，一个是天津bucket<br>北京bucket：包含了2个人，张三，李四<br>上海bucket：包含了3个人，王五，赵六，王麻子</p>
<h3 id="17-2-2metric：对一个数据分组执行的统计"><a href="#17-2-2metric：对一个数据分组执行的统计" class="headerlink" title="17.2.2metric：对一个数据分组执行的统计"></a>17.2.2metric：对一个数据分组执行的统计</h3><p>metric，就是对一个bucket执行的某种聚合分析的操作，比如说求平均值，求最大值，求最小值</p>
<p>select count(*)<br>        from book<br>        group studymodel</p>
<p>bucket：group by studymodel —&gt; 那些studymodel相同的数据，就会被划分到一个bucket中<br>        metric：count(*)，对每个user_id bucket中所有的数据，计算一个数量。还有avg()，sum()，max()，min()</p>
<h2 id="17-3-电视案例"><a href="#17-3-电视案例" class="headerlink" title="17.3 电视案例"></a>17.3 电视案例</h2><p>创建索引及映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /tvs</span><br><span class="line">PUT /tvs/_search</span><br><span class="line">&#123;			</span><br><span class="line">			&quot;properties&quot;: &#123;</span><br><span class="line">				&quot;price&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;long&quot;</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;color&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;brand&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;sold_date&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;date&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /tvs/_bulk</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 1000, &quot;color&quot; : &quot;红色&quot;, &quot;brand&quot; : &quot;长虹&quot;, &quot;sold_date&quot; : &quot;2019-10-28&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 2000, &quot;color&quot; : &quot;红色&quot;, &quot;brand&quot; : &quot;长虹&quot;, &quot;sold_date&quot; : &quot;2019-11-05&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 3000, &quot;color&quot; : &quot;绿色&quot;, &quot;brand&quot; : &quot;小米&quot;, &quot;sold_date&quot; : &quot;2019-05-18&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 1500, &quot;color&quot; : &quot;蓝色&quot;, &quot;brand&quot; : &quot;TCL&quot;, &quot;sold_date&quot; : &quot;2019-07-02&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 1200, &quot;color&quot; : &quot;绿色&quot;, &quot;brand&quot; : &quot;TCL&quot;, &quot;sold_date&quot; : &quot;2019-08-19&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 2000, &quot;color&quot; : &quot;红色&quot;, &quot;brand&quot; : &quot;长虹&quot;, &quot;sold_date&quot; : &quot;2019-11-05&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 8000, &quot;color&quot; : &quot;红色&quot;, &quot;brand&quot; : &quot;三星&quot;, &quot;sold_date&quot; : &quot;2020-01-01&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 2500, &quot;color&quot; : &quot;蓝色&quot;, &quot;brand&quot; : &quot;小米&quot;, &quot;sold_date&quot; : &quot;2020-02-12&quot; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求1-统计哪种颜色的电视销量最高"><a href="#需求1-统计哪种颜色的电视销量最高" class="headerlink" title="需求1 统计哪种颜色的电视销量最高"></a>需求1 统计哪种颜色的电视销量最高</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;aggs&quot; : &#123; </span><br><span class="line">        &quot;popular_colors&quot; : &#123; </span><br><span class="line">            &quot;terms&quot; : &#123; </span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询条件解析</p>
<p>size：只获取聚合结果，而不要执行聚合的原始数据<br>        aggs：固定语法，要对一份数据执行分组聚合操作<br>        popular_colors：就是对每个aggs，都要起一个名字，<br>        terms：根据字段的值进行分组<br>        field：根据指定的字段的值进行分组</p>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 18,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 8,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;popular_colors&quot; : &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot; : 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot; : 0,</span><br><span class="line">      &quot;buckets&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;红色&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 4</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;绿色&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;蓝色&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回结果解析</p>
<p>hits.hits：我们指定了size是0，所以hits.hits就是空的<br>        aggregations：聚合结果<br>        popular_color：我们指定的某个聚合的名称<br>        buckets：根据我们指定的field划分出的buckets<br>        key：每个bucket对应的那个值<br>        doc_count：这个bucket分组内，有多少个数据<br>数量，其实就是这种颜色的销量</p>
<p>每种颜色对应的bucket中的数据的默认的排序规则：按照doc_count降序排序</p>
<h3 id="需求2-统计每种颜色电视平均价格"><a href="#需求2-统计每种颜色电视平均价格" class="headerlink" title="需求2 统计每种颜色电视平均价格"></a>需求2 统计每种颜色电视平均价格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123; </span><br><span class="line">            &quot;avg_price&quot;: &#123; </span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot; </span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在一个aggs执行的bucket操作（terms），平级的json结构下，再加一个aggs，这个第二个aggs内部，同样取个名字，执行一个metric操作，avg，对之前的每个bucket中的数据的指定的field，price field，求一个平均值</p>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 4,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 8,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;colors&quot; : &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot; : 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot; : 0,</span><br><span class="line">      &quot;buckets&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;红色&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 4,</span><br><span class="line">          &quot;avg_price&quot; : &#123;</span><br><span class="line">            &quot;value&quot; : 3250.0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;绿色&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 2,</span><br><span class="line">          &quot;avg_price&quot; : &#123;</span><br><span class="line">            &quot;value&quot; : 2100.0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;蓝色&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 2,</span><br><span class="line">          &quot;avg_price&quot; : &#123;</span><br><span class="line">            &quot;value&quot; : 2000.0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>buckets，除了key和doc_count<br>avg_price：我们自己取的metric aggs的名字<br>value：我们的metric计算的结果，每个bucket中的数据的price字段求平均值后的结果</p>
<p>相当于sql: select avg(price) from tvs group by color</p>
<h3 id="需求3-继续下钻分析"><a href="#需求3-继续下钻分析" class="headerlink" title="需求3 继续下钻分析"></a>需求3 继续下钻分析</h3><p>每个颜色下，平均价格及每个颜色下，每个品牌的平均价格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_color&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;color&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;color_avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;group_by_brand&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;brand&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;brand_avg_price&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;price&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求4：更多的metric"><a href="#需求4：更多的metric" class="headerlink" title="需求4：更多的metric"></a>需求4：更多的metric</h3><p>count：bucket，terms，自动就会有一个doc_count，就相当于是count<br>avg：avg aggs，求平均值<br>max：求一个bucket内，指定field值最大的那个数据<br>min：求一个bucket内，指定field值最小的那个数据<br>sum：求一个bucket内，指定field值的总和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;avg_price&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125; &#125;,</span><br><span class="line">            &quot;min_price&quot; : &#123; &quot;min&quot;: &#123; &quot;field&quot;: &quot;price&quot;&#125; &#125;, </span><br><span class="line">            &quot;max_price&quot; : &#123; &quot;max&quot;: &#123; &quot;field&quot;: &quot;price&quot;&#125; &#125;,</span><br><span class="line">            &quot;sum_price&quot; : &#123; &quot;sum&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125; &#125; </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求5：划分范围-histogram"><a href="#需求5：划分范围-histogram" class="headerlink" title="需求5：划分范围 histogram"></a>需求5：划分范围 histogram</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;:&#123;</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">         &quot;histogram&quot;:&#123; </span><br><span class="line">            &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">            &quot;interval&quot;: 2000</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;:&#123;</span><br><span class="line">            &quot;income&quot;: &#123;</span><br><span class="line">               &quot;sum&quot;: &#123; </span><br><span class="line">                 &quot;field&quot; : &quot;price&quot;</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>histogram：类似于terms，也是进行bucket分组操作，接收一个field，按照这个field的值的各个范围区间，进行bucket分组操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;histogram&quot;:&#123; </span><br><span class="line">  &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">  &quot;interval&quot;: 2000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>interval：2000，划分范围，0~2000，2000~4000，4000~6000，6000~8000，8000~10000，buckets</p>
<p>bucket有了之后，一样的，去对每个bucket执行avg，count，sum，max，min，等各种metric操作，聚合分析</p>
<h3 id="需求6：按照日期分组聚合"><a href="#需求6：按照日期分组聚合" class="headerlink" title="需求6：按照日期分组聚合"></a>需求6：按照日期分组聚合</h3><p>date_histogram，按照我们指定的某个date类型的日期field，以及日期interval，按照一定的日期间隔，去划分bucket</p>
<p>min_doc_count：即使某个日期interval，2017-01-01~2017-01-31中，一条数据都没有，那么这个区间也是要返回的，不然默认是会过滤掉这个区间的<br>        extended_bounds，min，max：划分bucket的时候，会限定在这个起始日期，和截止日期内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;sales&quot;: &#123;</span><br><span class="line">         &quot;date_histogram&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;sold_date&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;month&quot;, </span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd&quot;,</span><br><span class="line">            &quot;min_doc_count&quot; : 0, </span><br><span class="line">            &quot;extended_bounds&quot; : &#123; </span><br><span class="line">                &quot;min&quot; : &quot;2019-01-01&quot;,</span><br><span class="line">                &quot;max&quot; : &quot;2020-12-31&quot;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求7-统计每季度每个品牌的销售额"><a href="#需求7-统计每季度每个品牌的销售额" class="headerlink" title="需求7 统计每季度每个品牌的销售额"></a>需求7 统计每季度每个品牌的销售额</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_sold_date&quot;: &#123;</span><br><span class="line">      &quot;date_histogram&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;sold_date&quot;,</span><br><span class="line">        &quot;interval&quot;: &quot;quarter&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd&quot;,</span><br><span class="line">        &quot;min_doc_count&quot;: 0,</span><br><span class="line">        &quot;extended_bounds&quot;: &#123;</span><br><span class="line">          &quot;min&quot;: &quot;2019-01-01&quot;,</span><br><span class="line">          &quot;max&quot;: &quot;2020-12-31&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_brand&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;brand&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;sum_price&quot;: &#123;</span><br><span class="line">              &quot;sum&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;price&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;total_sum_price&quot;: &#123;</span><br><span class="line">          &quot;sum&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求8-：搜索与聚合结合，查询某个品牌按颜色销量"><a href="#需求8-：搜索与聚合结合，查询某个品牌按颜色销量" class="headerlink" title="需求8 ：搜索与聚合结合，查询某个品牌按颜色销量"></a>需求8 ：搜索与聚合结合，查询某个品牌按颜色销量</h3><p>搜索与聚合可以结合起来。</p>
<p>sql select count(*)</p>
<p>from tvs</p>
<p>where brand like “%小米%”</p>
<p>group by color</p>
<p>es aggregation，scope，任何的聚合，都必须在搜索出来的结果数据中之行，搜索结果，就是聚合分析操作的scope</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;小米&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_color&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;color&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求9-global-bucket：单个品牌与所有品牌销量对比"><a href="#需求9-global-bucket：单个品牌与所有品牌销量对比" class="headerlink" title="需求9 global bucket：单个品牌与所有品牌销量对比"></a>需求9 global bucket：单个品牌与所有品牌销量对比</h3><p>aggregation，scope，一个聚合操作，必须在query的搜索结果范围内执行</p>
<p>出来两个结果，一个结果，是基于query搜索结果来聚合的; 一个结果，是对所有数据执行聚合的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;小米&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;single_brand_avg_price&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;all&quot;: &#123;</span><br><span class="line">      &quot;global&quot;: &#123;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;all_brand_avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求10：过滤-聚合：统计价格大于1200的电视平均价格"><a href="#需求10：过滤-聚合：统计价格大于1200的电视平均价格" class="headerlink" title="需求10：过滤+聚合：统计价格大于1200的电视平均价格"></a>需求10：过滤+聚合：统计价格大于1200的电视平均价格</h3><p>搜索+聚合</p>
<p>过滤+聚合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;constant_score&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;price&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 1200</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;avg_price&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需求11-bucket-filter：统计品牌最近一个月的平均价格"><a href="#需求11-bucket-filter：统计品牌最近一个月的平均价格" class="headerlink" title="需求11 bucket filter：统计品牌最近一个月的平均价格"></a>需求11 bucket filter：统计品牌最近一个月的平均价格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;小米&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;recent_150d&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;sold_date&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: &quot;now-150d&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;recent_150d_avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;recent_140d&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;sold_date&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: &quot;now-140d&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;recent_140d_avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;recent_130d&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;sold_date&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: &quot;now-130d&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;recent_130d_avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>aggs.filter，针对的是聚合去做的</p>
<p>如果放query里面的filter，是全局的，会对所有的数据都有影响</p>
<p>但是，如果，比如说，你要统计，长虹电视，最近1个月的平均值; 最近3个月的平均值; 最近6个月的平均值</p>
<p>bucket filter：对不同的bucket下的aggs，进行filter</p>
<h3 id="需求12-排序：按每种颜色的平均销售额降序排序"><a href="#需求12-排序：按每种颜色的平均销售额降序排序" class="headerlink" title="需求12 排序：按每种颜色的平均销售额降序排序"></a>需求12 排序：按每种颜色的平均销售额降序排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_color&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;color&quot;,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;avg_price&quot;: &quot;asc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相当于sql子表数据字段可以立刻使用。</p>
<h3 id="需求13-排序：按每种颜色的每种品牌平均销售额降序排序"><a href="#需求13-排序：按每种颜色的每种品牌平均销售额降序排序" class="headerlink" title="需求13 排序：按每种颜色的每种品牌平均销售额降序排序"></a>需求13 排序：按每种颜色的每种品牌平均销售额降序排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tvs/_search  </span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_color&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;color&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_brand&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;brand&quot;,</span><br><span class="line">            &quot;order&quot;: &#123;</span><br><span class="line">              &quot;avg_price&quot;: &quot;desc&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;avg_price&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;price&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="18．-java-api实现聚合"><a href="#18．-java-api实现聚合" class="headerlink" title="18． java api实现聚合"></a>18． java api实现聚合</h1><p>简单聚合，多种聚合，详见代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregation;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.AggregationBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.Aggregations;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.histogram.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.Terms;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.aggregations.metrics.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * creste by itheima.itcast</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAggs</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求一：按照颜色分组，计算每个颜色卖出的个数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAggs</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// GET /tvs/_search</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;size&quot;: 0,</span></span><br><span class="line">        <span class="comment">//     &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span></span><br><span class="line">        <span class="comment">//     &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//       &quot;group_by_color&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;terms&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;field&quot;: &quot;color&quot;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 构建请求</span></span><br><span class="line">        SearchRequest searchRequest=<span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;tvs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        searchSourceBuilder.size(<span class="number">0</span>);</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">termsAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;group_by_color&quot;</span>).field(<span class="string">&quot;color&quot;</span>);</span><br><span class="line">        searchSourceBuilder.aggregation(termsAggregationBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体放入请求头</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 执行</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取结果</span></span><br><span class="line">      <span class="comment">//   &quot;aggregations&quot; : &#123;</span></span><br><span class="line">      <span class="comment">//       &quot;group_by_color&quot; : &#123;</span></span><br><span class="line">      <span class="comment">//           &quot;doc_count_error_upper_bound&quot; : 0,</span></span><br><span class="line">      <span class="comment">//           &quot;sum_other_doc_count&quot; : 0,</span></span><br><span class="line">      <span class="comment">//            &quot;buckets&quot; : [</span></span><br><span class="line">      <span class="comment">//           &#123;</span></span><br><span class="line">      <span class="comment">//               &quot;key&quot; : &quot;红色&quot;,</span></span><br><span class="line">      <span class="comment">//               &quot;doc_count&quot; : 4</span></span><br><span class="line">      <span class="comment">//           &#125;,</span></span><br><span class="line">      <span class="comment">//           &#123;</span></span><br><span class="line">      <span class="comment">//               &quot;key&quot; : &quot;绿色&quot;,</span></span><br><span class="line">      <span class="comment">//                   &quot;doc_count&quot; : 2</span></span><br><span class="line">      <span class="comment">//           &#125;,</span></span><br><span class="line">      <span class="comment">//           &#123;</span></span><br><span class="line">      <span class="comment">//               &quot;key&quot; : &quot;蓝色&quot;,</span></span><br><span class="line">      <span class="comment">//                   &quot;doc_count&quot; : 2</span></span><br><span class="line">      <span class="comment">//           &#125;</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">      <span class="comment">//       &#125;</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">        <span class="type">Terms</span> <span class="variable">group_by_color</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;group_by_color&quot;</span>);</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = group_by_color.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span>+key);</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;docCount:&quot;</span>+docCount);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #需求二：按照颜色分组，计算每个颜色卖出的个数，每个颜色卖出的平均价格</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAggsAndAvg</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// GET /tvs/_search</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;size&quot;: 0,</span></span><br><span class="line">        <span class="comment">//      &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span></span><br><span class="line">        <span class="comment">//     &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;group_by_color&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;terms&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;field&quot;: &quot;color&quot;</span></span><br><span class="line">        <span class="comment">//         &#125;,</span></span><br><span class="line">        <span class="comment">//         &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;avg_price&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                 &quot;avg&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                     &quot;field&quot;: &quot;price&quot;</span></span><br><span class="line">        <span class="comment">//                 &#125;</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 构建请求</span></span><br><span class="line">        SearchRequest searchRequest=<span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;tvs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        searchSourceBuilder.size(<span class="number">0</span>);</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">termsAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;group_by_color&quot;</span>).field(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//terms聚合下填充一个子聚合</span></span><br><span class="line">        <span class="type">AvgAggregationBuilder</span> <span class="variable">avgAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;avg_price&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        termsAggregationBuilder.subAggregation(avgAggregationBuilder);</span><br><span class="line"></span><br><span class="line">        searchSourceBuilder.aggregation(termsAggregationBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体放入请求头</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 执行</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取结果</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;key&quot; : &quot;红色&quot;,</span></span><br><span class="line">        <span class="comment">//      &quot;doc_count&quot; : 4,</span></span><br><span class="line">        <span class="comment">//      &quot;avg_price&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//        &quot;value&quot; : 3250.0</span></span><br><span class="line">        <span class="comment">//       &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">        <span class="type">Terms</span> <span class="variable">group_by_color</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;group_by_color&quot;</span>);</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = group_by_color.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span>+key);</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;docCount:&quot;</span>+docCount);</span><br><span class="line"></span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggregations1</span> <span class="operator">=</span> bucket.getAggregations();</span><br><span class="line">            <span class="type">Avg</span> <span class="variable">avg_price</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;avg_price&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> avg_price.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #需求三：按照颜色分组，计算每个颜色卖出的个数，以及每个颜色卖出的平均值、最大值、最小值、总和。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAggsAndMore</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// GET /tvs/_search</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;size&quot; : 0,</span></span><br><span class="line">        <span class="comment">//     &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//      &quot;group_by_color&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;terms&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;field&quot;: &quot;color&quot;</span></span><br><span class="line">        <span class="comment">//         &#125;,</span></span><br><span class="line">        <span class="comment">//         &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;avg_price&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125; &#125;,</span></span><br><span class="line">        <span class="comment">//             &quot;min_price&quot; : &#123; &quot;min&quot;: &#123; &quot;field&quot;: &quot;price&quot;&#125; &#125;,</span></span><br><span class="line">        <span class="comment">//             &quot;max_price&quot; : &#123; &quot;max&quot;: &#123; &quot;field&quot;: &quot;price&quot;&#125; &#125;,</span></span><br><span class="line">        <span class="comment">//             &quot;sum_price&quot; : &#123; &quot;sum&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125; &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 构建请求</span></span><br><span class="line">        SearchRequest searchRequest=<span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;tvs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        searchSourceBuilder.size(<span class="number">0</span>);</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">termsAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;group_by_color&quot;</span>).field(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//termsAggregationBuilder里放入多个子聚合</span></span><br><span class="line">        <span class="type">AvgAggregationBuilder</span> <span class="variable">avgAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;avg_price&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        <span class="type">MinAggregationBuilder</span> <span class="variable">minAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.min(<span class="string">&quot;min_price&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        <span class="type">MaxAggregationBuilder</span> <span class="variable">maxAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.max(<span class="string">&quot;max_price&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        <span class="type">SumAggregationBuilder</span> <span class="variable">sumAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.sum(<span class="string">&quot;sum_price&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line"></span><br><span class="line">        termsAggregationBuilder.subAggregation(avgAggregationBuilder);</span><br><span class="line">        termsAggregationBuilder.subAggregation(minAggregationBuilder);</span><br><span class="line">        termsAggregationBuilder.subAggregation(maxAggregationBuilder);</span><br><span class="line">        termsAggregationBuilder.subAggregation(sumAggregationBuilder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        searchSourceBuilder.aggregation(termsAggregationBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体放入请求头</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 执行</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取结果</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;key&quot; : &quot;红色&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;doc_count&quot; : 4,</span></span><br><span class="line">        <span class="comment">//     &quot;max_price&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//          &quot;value&quot; : 8000.0</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     &quot;min_price&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//          &quot;value&quot; : 1000.0</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">//     &quot;avg_price&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;value&quot; : 3250.0</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">//     &quot;sum_price&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;value&quot; : 13000.0</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">        <span class="type">Terms</span> <span class="variable">group_by_color</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;group_by_color&quot;</span>);</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = group_by_color.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span>+key);</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;docCount:&quot;</span>+docCount);</span><br><span class="line"></span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggregations1</span> <span class="operator">=</span> bucket.getAggregations();</span><br><span class="line"></span><br><span class="line">            <span class="type">Max</span> <span class="variable">max_price</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;max_price&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">maxPriceValue</span> <span class="operator">=</span> max_price.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;maxPriceValue:&quot;</span>+maxPriceValue);</span><br><span class="line"></span><br><span class="line">            <span class="type">Min</span> <span class="variable">min_price</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;min_price&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">minPriceValue</span> <span class="operator">=</span> min_price.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;minPriceValue:&quot;</span>+minPriceValue);</span><br><span class="line"></span><br><span class="line">            <span class="type">Avg</span> <span class="variable">avg_price</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;avg_price&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">avgPriceValue</span> <span class="operator">=</span> avg_price.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;avgPriceValue:&quot;</span>+avgPriceValue);</span><br><span class="line"></span><br><span class="line">            <span class="type">Sum</span> <span class="variable">sum_price</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;sum_price&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">sumPriceValue</span> <span class="operator">=</span> sum_price.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;sumPriceValue:&quot;</span>+sumPriceValue);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #需求四：按照售价每2000价格划分范围，算出每个区间的销售总额 histogram</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAggsAndHistogram</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// GET /tvs/_search</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;size&quot; : 0,</span></span><br><span class="line">        <span class="comment">//     &quot;aggs&quot;:&#123;</span></span><br><span class="line">        <span class="comment">//      &quot;by_histogram&quot;:&#123;</span></span><br><span class="line">        <span class="comment">//         &quot;histogram&quot;:&#123;</span></span><br><span class="line">        <span class="comment">//             &quot;field&quot;: &quot;price&quot;,</span></span><br><span class="line">        <span class="comment">//             &quot;interval&quot;: 2000</span></span><br><span class="line">        <span class="comment">//         &#125;,</span></span><br><span class="line">        <span class="comment">//         &quot;aggs&quot;:&#123;</span></span><br><span class="line">        <span class="comment">//             &quot;income&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                 &quot;sum&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                     &quot;field&quot; : &quot;price&quot;</span></span><br><span class="line">        <span class="comment">//                 &#125;</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 构建请求</span></span><br><span class="line">        SearchRequest searchRequest=<span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;tvs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        searchSourceBuilder.size(<span class="number">0</span>);</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">        <span class="type">HistogramAggregationBuilder</span> <span class="variable">histogramAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.histogram(<span class="string">&quot;by_histogram&quot;</span>).field(<span class="string">&quot;price&quot;</span>).interval(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SumAggregationBuilder</span> <span class="variable">sumAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.sum(<span class="string">&quot;income&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        histogramAggregationBuilder.subAggregation(sumAggregationBuilder);</span><br><span class="line">        searchSourceBuilder.aggregation(histogramAggregationBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体放入请求头</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 执行</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取结果</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;key&quot; : 0.0,</span></span><br><span class="line">        <span class="comment">//     &quot;doc_count&quot; : 3,</span></span><br><span class="line">        <span class="comment">//      income&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//          &quot;value&quot; : 3700.0</span></span><br><span class="line">        <span class="comment">//       &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">        <span class="type">Histogram</span> <span class="variable">group_by_color</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;by_histogram&quot;</span>);</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Histogram</span>.Bucket&gt; buckets = group_by_color.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Histogram.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">keyAsString</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;keyAsString:&quot;</span>+keyAsString);</span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;docCount:&quot;</span>+docCount);</span><br><span class="line"></span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggregations1</span> <span class="operator">=</span> bucket.getAggregations();</span><br><span class="line">            <span class="type">Sum</span> <span class="variable">income</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;income&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> income.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #需求五：计算每个季度的销售总额</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAggsAndDateHistogram</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// GET /tvs/_search</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;size&quot; : 0,</span></span><br><span class="line">        <span class="comment">//     &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;sales&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;date_histogram&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                      &quot;field&quot;: &quot;sold_date&quot;,</span></span><br><span class="line">        <span class="comment">//                     &quot;interval&quot;: &quot;quarter&quot;,</span></span><br><span class="line">        <span class="comment">//                     &quot;format&quot;: &quot;yyyy-MM-dd&quot;,</span></span><br><span class="line">        <span class="comment">//                     &quot;min_doc_count&quot; : 0,</span></span><br><span class="line">        <span class="comment">//                     &quot;extended_bounds&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//                         &quot;min&quot; : &quot;2019-01-01&quot;,</span></span><br><span class="line">        <span class="comment">//                         &quot;max&quot; : &quot;2020-12-31&quot;</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;,</span></span><br><span class="line">        <span class="comment">//         &quot;aggs&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//             &quot;income&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                 &quot;sum&quot;: &#123;</span></span><br><span class="line">        <span class="comment">//                     &quot;field&quot;: &quot;price&quot;</span></span><br><span class="line">        <span class="comment">//                 &#125;</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 构建请求</span></span><br><span class="line">        SearchRequest searchRequest=<span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;tvs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求体</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        searchSourceBuilder.size(<span class="number">0</span>);</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">        <span class="type">DateHistogramAggregationBuilder</span> <span class="variable">dateHistogramAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.dateHistogram(<span class="string">&quot;date_histogram&quot;</span>).field(<span class="string">&quot;sold_date&quot;</span>).calendarInterval(DateHistogramInterval.QUARTER)</span><br><span class="line">                .format(<span class="string">&quot;yyyy-MM-dd&quot;</span>).minDocCount(<span class="number">0</span>).extendedBounds(<span class="keyword">new</span> <span class="title class_">ExtendedBounds</span>(<span class="string">&quot;2019-01-01&quot;</span>, <span class="string">&quot;2020-12-31&quot;</span>));</span><br><span class="line">        <span class="type">SumAggregationBuilder</span> <span class="variable">sumAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.sum(<span class="string">&quot;income&quot;</span>).field(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        dateHistogramAggregationBuilder.subAggregation(sumAggregationBuilder);</span><br><span class="line"></span><br><span class="line">        searchSourceBuilder.aggregation(dateHistogramAggregationBuilder);</span><br><span class="line">        <span class="comment">//请求体放入请求头</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 执行</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 获取结果</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;key_as_string&quot; : &quot;2019-01-01&quot;,</span></span><br><span class="line">        <span class="comment">//      &quot;key&quot; : 1546300800000,</span></span><br><span class="line">        <span class="comment">//      &quot;doc_count&quot; : 0,</span></span><br><span class="line">        <span class="comment">//      &quot;income&quot; : &#123;</span></span><br><span class="line">        <span class="comment">//         &quot;value&quot; : 0.0</span></span><br><span class="line">        <span class="comment">//      &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">        <span class="type">ParsedDateHistogram</span> <span class="variable">date_histogram</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;date_histogram&quot;</span>);</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Histogram</span>.Bucket&gt; buckets = date_histogram.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Histogram.Bucket bucket : buckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">keyAsString</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;keyAsString:&quot;</span>+keyAsString);</span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;docCount:&quot;</span>+docCount);</span><br><span class="line"></span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggregations1</span> <span class="operator">=</span> bucket.getAggregations();</span><br><span class="line">            <span class="type">Sum</span> <span class="variable">income</span> <span class="operator">=</span> aggregations1.get(<span class="string">&quot;income&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> income.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="19．-es7-sql新特性"><a href="#19．-es7-sql新特性" class="headerlink" title="19． es7 sql新特性"></a>19． es7 sql新特性</h1><h2 id="19-1-快速入门"><a href="#19-1-快速入门" class="headerlink" title="19.1 快速入门"></a>19.1 快速入门</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &quot;SELECT * FROM tvs &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="19-2启动方式"><a href="#19-2启动方式" class="headerlink" title="19.2启动方式"></a>19.2启动方式</h2><p>1http 请求</p>
<p>2客户端：elasticsearch-sql-cli.bat</p>
<p>3代码</p>
<h2 id="19-3显示方式"><a href="#19-3显示方式" class="headerlink" title="19.3显示方式"></a>19.3显示方式</h2><p><img src="/img/1573212830146.png" alt="1573212830146"></p>
<h2 id="19-4-sql-翻译"><a href="#19-4-sql-翻译" class="headerlink" title="19.4 sql 翻译"></a>19.4 sql 翻译</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_sql/translate</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &quot;SELECT * FROM tvs &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;size&quot; : 1000,</span><br><span class="line">  &quot;_source&quot; : false,</span><br><span class="line">  &quot;stored_fields&quot; : &quot;_none_&quot;,</span><br><span class="line">  &quot;docvalue_fields&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;field&quot; : &quot;brand&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;field&quot; : &quot;color&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;field&quot; : &quot;price&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;field&quot; : &quot;sold_date&quot;,</span><br><span class="line">      &quot;format&quot; : &quot;epoch_millis&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_doc&quot; : &#123;</span><br><span class="line">        &quot;order&quot; : &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="19-5-与其他DSL结合"><a href="#19-5-与其他DSL结合" class="headerlink" title="19.5 与其他DSL结合"></a>19.5 与其他DSL结合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &quot;SELECT * FROM tvs&quot;,</span><br><span class="line">    &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">                &quot;gte&quot; : 1200,</span><br><span class="line">                &quot;lte&quot; : 2000</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="19-6-java-代码实现sql功能"><a href="#19-6-java-代码实现sql功能" class="headerlink" title="19.6 java 代码实现sql功能"></a>19.6 java 代码实现sql功能</h2><p>1前提 es拥有白金版功能</p>
<p> kibana中管理-》许可管理 开启白金版试用</p>
<p>2导入依赖</p>
<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.elasticsearch.plugin&lt;/groupId&gt;
        &lt;artifactId&gt;x-pack-sql-jdbc&lt;/artifactId&gt;
        &lt;version&gt;7.3.0&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;elastic.co&lt;/id&gt;
            &lt;url&gt;https://artifacts.elastic.co/maven&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
</code></pre><p>3代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        try  &#123;</span><br><span class="line">            Connection connection = DriverManager.getConnection(&quot;jdbc:es://http://localhost:9200&quot;);</span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            ResultSet results = statement.executeQuery(</span><br><span class="line">                    &quot;select * from tvs&quot;);</span><br><span class="line">            while(results.next())&#123;</span><br><span class="line">                System.out.println(results.getString(1));</span><br><span class="line">                System.out.println(results.getString(2));</span><br><span class="line">                System.out.println(results.getString(3));</span><br><span class="line">                System.out.println(results.getString(4));</span><br><span class="line">                System.out.println(&quot;============================&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>大型企业可以购买白金版，增加Machine Learning、高级安全性x-pack。</p>
<h1 id="20．-Logstash学习"><a href="#20．-Logstash学习" class="headerlink" title="20． Logstash学习"></a>20． Logstash学习</h1><h2 id="20-1Logstash基本语法组成"><a href="#20-1Logstash基本语法组成" class="headerlink" title="20.1Logstash基本语法组成"></a>20.1Logstash基本语法组成</h2><p><img src="/img/1573291947262.png" alt="1573291947262"></p>
<h3 id="1什么是Logstash"><a href="#1什么是Logstash" class="headerlink" title="1什么是Logstash"></a>1什么是Logstash</h3><p>logstash是一个数据抽取工具，将数据从一个地方转移到另一个地方。如hadoop生态圈的sqoop等。下载地址：<a href="https://www.elastic.co/cn/downloads/logstash">https://www.elastic.co/cn/downloads/logstash</a></p>
<p>logstash之所以功能强大和流行，还与其丰富的过滤器插件是分不开的，过滤器提供的并不单单是过滤的功能，还可以对进入过滤器的原始数据进行复杂的逻辑处理，甚至添加独特的事件到后续流程中。<br>    Logstash配置文件有如下三部分组成，其中input、output部分是必须配置，filter部分是可选配置，而filter就是过滤器插件，可以在这部分实现各种日志过滤功能。</p>
<h3 id="2配置文件："><a href="#2配置文件：" class="headerlink" title="2配置文件："></a>2配置文件：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    #输入插件</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    #过滤匹配插件</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    #输出插件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3启动操作："><a href="#3启动操作：" class="headerlink" title="3启动操作："></a>3启动操作：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logstash.bat -e &#x27;input&#123;stdin&#123;&#125;&#125; output&#123;stdout&#123;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>为了好维护，将配置写入文件，启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logstash.bat -f ../config/test1.conf</span><br></pre></td></tr></table></figure>
<h2 id="20-2-Logstash输入插件（input）"><a href="#20-2-Logstash输入插件（input）" class="headerlink" title="20.2 Logstash输入插件（input）"></a>20.2 Logstash输入插件（input）</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html">https://www.elastic.co/guide/en/logstash/current/input-plugins.html</a></p>
<h3 id="1、标准输入-Stdin"><a href="#1、标准输入-Stdin" class="headerlink" title="1、标准输入(Stdin)"></a>1、标准输入(Stdin)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    stdin&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout&#123;</span><br><span class="line">        codec=&gt;rubydebug    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、读取文件-File"><a href="#2、读取文件-File" class="headerlink" title="2、读取文件(File)"></a>2、读取文件(File)</h3><p>logstash使用一个名为filewatch的ruby gem库来监听文件变化,并通过一个叫.sincedb的数据库文件来记录被监听的日志文件的读取进度（时间戳），这个sincedb数据文件的默认路径在 <path.data>/plugins/inputs/file下面，文件名类似于.sincedb_123456，而<path.data>表示logstash插件存储目录，默认是LOGSTASH_HOME/data。</path.data></path.data></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; [&quot;/var/*/*&quot;]</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout&#123;</span><br><span class="line">        codec=&gt;rubydebug    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下，logstash会从文件的结束位置开始读取数据，也就是说logstash进程会以类似tail -f命令的形式逐行获取数据。</p>
<h3 id="3、读取TCP网络数据"><a href="#3、读取TCP网络数据" class="headerlink" title="3、读取TCP网络数据"></a>3、读取TCP网络数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; &quot;1234&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGLINE&#125;&quot; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout&#123;</span><br><span class="line">        codec=&gt;rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="20-3-Logstash过滤器插件-Filter"><a href="#20-3-Logstash过滤器插件-Filter" class="headerlink" title="20.3 Logstash过滤器插件(Filter)"></a>20.3 Logstash过滤器插件(Filter)</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html">https://www.elastic.co/guide/en/logstash/current/filter-plugins.html</a></p>
<h3 id="20-13-1Grok-正则捕获"><a href="#20-13-1Grok-正则捕获" class="headerlink" title="20.13.1Grok 正则捕获"></a>20.13.1Grok 正则捕获</h3><p>grok是一个十分强大的logstash filter插件，他可以通过正则解析任意文本，将非结构化日志数据弄成结构化和方便查询的结构。他是目前logstash 中解析非结构化日志数据最好的方式。</p>
<p>Grok 的语法规则是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;语法: 语义&#125;</span><br></pre></td></tr></table></figure>
<p>例如输入的内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">172.16.213.132 [07/Feb/2019:16:24:19 +0800] &quot;GET / HTTP/1.1&quot; 403 5039</span><br></pre></td></tr></table></figure>
<p>%{IP:clientip}匹配模式将获得的结果为：clientip: 172.16.213.132<br>%{HTTPDATE:timestamp}匹配模式将获得的结果为：timestamp: 07/Feb/2018:16:24:19 +0800<br>而%{QS:referrer}匹配模式将获得的结果为：referrer: “GET / HTTP/1.1”</p>
<p>下面是一个组合匹配模式，它可以获取上面输入的所有内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面这个组合匹配模式，我们将输入的内容分成了五个部分，即五个字段，将输入内容分割为不同的数据字段，这对于日后解析和查询日志数据非常有用，这正是使用grok的目的。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    stdin&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">filter&#123;</span><br><span class="line">    grok&#123;</span><br><span class="line">        match =&gt; [&quot;message&quot;,&quot;%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">    stdout&#123;</span><br><span class="line">        codec =&gt; &quot;rubydebug&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">172.16.213.132 [07/Feb/2019:16:24:19 +0800] &quot;GET / HTTP/1.1&quot; 403 5039</span><br></pre></td></tr></table></figure>
<h3 id="20-13-2时间处理-Date"><a href="#20-13-2时间处理-Date" class="headerlink" title="20.13.2时间处理(Date)"></a>20.13.2时间处理(Date)</h3><p>date插件是对于排序事件和回填旧数据尤其重要，它可以用来转换日志记录中的时间字段，变成LogStash::Timestamp对象，然后转存到@timestamp字段里，这在之前已经做过简单的介绍。<br>下面是date插件的一个配置示例（这里仅仅列出filter部分）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; [&quot;message&quot;, &quot;%&#123;HTTPDATE:timestamp&#125;&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [&quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="20-13-3、数据修改-Mutate"><a href="#20-13-3、数据修改-Mutate" class="headerlink" title="20.13.3、数据修改(Mutate)"></a>20.13.3、数据修改(Mutate)</h3><h4 id="（1）正则表达式替换匹配字段"><a href="#（1）正则表达式替换匹配字段" class="headerlink" title="（1）正则表达式替换匹配字段"></a>（1）正则表达式替换匹配字段</h4><p>gsub可以通过正则表达式替换字段中匹配到的值，只对字符串字段有效，下面是一个关于mutate插件中gsub的示例（仅列出filter部分）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        gsub =&gt; [&quot;filed_name_1&quot;, &quot;/&quot; , &quot;_&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例表示将filed<em>name_1字段中所有”/“字符替换为”</em>“。</p>
<h4 id="（2）分隔符分割字符串为数组"><a href="#（2）分隔符分割字符串为数组" class="headerlink" title="（2）分隔符分割字符串为数组"></a>（2）分隔符分割字符串为数组</h4><p>split可以通过指定的分隔符分割字段中的字符串为数组，下面是一个关于mutate插件中split的示例（仅列出filter部分）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; [&quot;filed_name_2&quot;, &quot;|&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例表示将filed_name_2字段以”|”为区间分隔为数组。</p>
<h4 id="（3）重命名字段"><a href="#（3）重命名字段" class="headerlink" title="（3）重命名字段"></a>（3）重命名字段</h4><p>rename可以实现重命名某个字段的功能，下面是一个关于mutate插件中rename的示例（仅列出filter部分）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        rename =&gt; &#123; &quot;old_field&quot; =&gt; &quot;new_field&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例表示将字段old_field重命名为new_field。</p>
<h4 id="（4）删除字段"><a href="#（4）删除字段" class="headerlink" title="（4）删除字段"></a>（4）删除字段</h4><p>remove_field可以实现删除某个字段的功能，下面是一个关于mutate插件中remove_field的示例（仅列出filter部分）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        remove_field  =&gt;  [&quot;timestamp&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例表示将字段timestamp删除。</p>
<h4 id="（5）GeoIP-地址查询归类"><a href="#（5）GeoIP-地址查询归类" class="headerlink" title="（5）GeoIP 地址查询归类"></a>（5）GeoIP 地址查询归类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    geoip &#123;</span><br><span class="line">        source =&gt; &quot;ip_field&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="综合例子："><a href="#综合例子：" class="headerlink" title="综合例子："></a>综合例子：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;&quot; &#125;</span><br><span class="line">        remove_field =&gt; [ &quot;message&quot; ]</span><br><span class="line">   &#125;</span><br><span class="line">date &#123;</span><br><span class="line">        match =&gt; [&quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">mutate &#123;</span><br><span class="line">          convert =&gt; [ &quot;response&quot;,&quot;float&quot; ]</span><br><span class="line">           rename =&gt; &#123; &quot;response&quot; =&gt; &quot;response_new&quot; &#125;   </span><br><span class="line">           gsub =&gt; [&quot;referrer&quot;,&quot;\&quot;&quot;,&quot;&quot;]          </span><br><span class="line">           split =&gt; [&quot;clientip&quot;, &quot;.&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; &quot;rubydebug&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="20-4-Logstash输出插件（output）"><a href="#20-4-Logstash输出插件（output）" class="headerlink" title="20.4 Logstash输出插件（output）"></a>20.4 Logstash输出插件（output）</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html">https://www.elastic.co/guide/en/logstash/current/output-plugins.html</a></p>
<p>output是Logstash的最后阶段，一个事件可以经过多个输出，而一旦所有输出处理完成，整个事件就执行完成。 一些常用的输出包括：</p>
<ul>
<li>file：  表示将日志数据写入磁盘上的文件。</li>
<li>elasticsearch：表示将日志数据发送给Elasticsearch。Elasticsearch可以高效方便和易于查询的保存数据。</li>
</ul>
<p>1、输出到标准输出(stdout)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、保存为文件（file）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/data/log/%&#123;+yyyy-MM-dd&#125;/%&#123;host&#125;_%&#123;+HH&#125;.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、输出到elasticsearch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        host =&gt; [&quot;192.168.1.1:9200&quot;,&quot;172.16.213.77:9200&quot;]</span><br><span class="line">        index =&gt; &quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>host：是一个数组类型的值，后面跟的值是elasticsearch节点的地址与端口，默认端口是9200。可添加多个地址。</li>
<li>index：写入elasticsearch的索引的名称，这里可以使用变量。Logstash提供了%{+YYYY.MM.dd}这种写法。在语法解析的时候，看到以+ 号开头的，就会自动认为后面是时间格式，尝试用时间格式来解析后续字符串。这种以天为单位分割的写法，可以很容易的删除老的数据或者搜索指定时间范围内的数据。此外，注意索引名中不能有大写字母。</li>
<li>manage_template:用来设置是否开启logstash自动管理模板功能，如果设置为false将关闭自动管理模板功能。如果我们自定义了模板，那么应该设置为false。</li>
<li>template_name:这个配置项用来设置在Elasticsearch中模板的名称。</li>
</ul>
<h2 id="20-5-综合案例"><a href="#20-5-综合案例" class="headerlink" title="20.5 综合案例"></a>20.5 综合案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; [&quot;D:/ES/logstash-7.3.0/nginx.log&quot;]        </span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;&quot; &#125;</span><br><span class="line">        remove_field =&gt; [ &quot;message&quot; ]</span><br><span class="line">   &#125;</span><br><span class="line">	date &#123;</span><br><span class="line">        match =&gt; [&quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">	mutate &#123;</span><br><span class="line">           rename =&gt; &#123; &quot;response&quot; =&gt; &quot;response_new&quot; &#125;</span><br><span class="line">           convert =&gt; [ &quot;response&quot;,&quot;float&quot; ]</span><br><span class="line">           gsub =&gt; [&quot;referrer&quot;,&quot;\&quot;&quot;,&quot;&quot;]</span><br><span class="line">           remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class="line">           split =&gt; [&quot;clientip&quot;, &quot;.&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; &quot;rubydebug&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">elasticsearch &#123;</span><br><span class="line">    host =&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">    index =&gt; &quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="21．-kibana学习"><a href="#21．-kibana学习" class="headerlink" title="21． kibana学习"></a>21． kibana学习</h1><h2 id="21-1基本查询"><a href="#21-1基本查询" class="headerlink" title="21.1基本查询"></a>21.1基本查询</h2><p>1是什么：elk中数据展现工具。</p>
<p>2下载：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p>
<p>3使用：建立索引模式，index partten</p>
<p>discover 中使用DSL搜索。</p>
<h2 id="21-2-可视化"><a href="#21-2-可视化" class="headerlink" title="21.2 可视化"></a>21.2 可视化</h2><p>绘制图形</p>
<h2 id="21-3-仪表盘"><a href="#21-3-仪表盘" class="headerlink" title="21.3 仪表盘"></a>21.3 仪表盘</h2><p>将各种可视化图形放入，形成大屏幕。</p>
<h2 id="21-4-使用模板数据指导绘图"><a href="#21-4-使用模板数据指导绘图" class="headerlink" title="21.4 使用模板数据指导绘图"></a>21.4 使用模板数据指导绘图</h2><p>点击主页的添加模板数据，可以看到很多模板数据以及绘图。</p>
<h2 id="21-5-其他功能"><a href="#21-5-其他功能" class="headerlink" title="21.5 其他功能"></a>21.5 其他功能</h2><p>监控，日志，APM等功能非常丰富。</p>
<h1 id="22．-集群部署"><a href="#22．-集群部署" class="headerlink" title="22． 集群部署"></a>22． 集群部署</h1><p>见部署图</p>
<h3 id="结点的三个角色"><a href="#结点的三个角色" class="headerlink" title="结点的三个角色"></a>结点的三个角色</h3><p>主结点：master节点主要用于集群的管理及索引 比如新增结点、分片分配、索引的新增和删除等。 数据结点：data 节点上保存了数据分片，它负责索引和搜索操作。 客户端结点：client 节点仅作为请求客户端存在，client的作用也作为负载均衡器，client 节点不存数据，只是将请求均衡转发到其它结点。</p>
<p>通过下边两项参数来配置结点的功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.master: #是否允许为主结点</span><br><span class="line">node.data: #允许存储数据作为数据结点</span><br><span class="line">node.ingest: #是否允许成为协调节点</span><br></pre></td></tr></table></figure>
<p>四种组合方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master=true，data=true：即是主结点又是数据结点</span><br><span class="line">master=false，data=true：仅是数据结点</span><br><span class="line">master=true，data=false：仅是主结点，不存储数据</span><br><span class="line">master=false，data=false：即不是主结点也不是数据结点，此时可设置ingest为true表示它是一个客户端。</span><br></pre></td></tr></table></figure>
<h1 id="23．-项目实战"><a href="#23．-项目实战" class="headerlink" title="23． 项目实战"></a>23． 项目实战</h1><h2 id="23-1项目一：ELK用于日志分析"><a href="#23-1项目一：ELK用于日志分析" class="headerlink" title="23.1项目一：ELK用于日志分析"></a>23.1项目一：ELK用于日志分析</h2><p>需求：集中收集分布式服务的日志</p>
<p>1逻辑模块程序随时输出日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * creste by itheima.itcast</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER= LoggerFactory.getLogger(TestLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> userid=random.nextInt(<span class="number">10</span>);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;userId:&#123;&#125;,send:&#123;&#125;&quot;</span>,userid,<span class="string">&quot;hello world.I am &quot;</span>+userid);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2logstash收集日志到es</p>
<p><strong>grok 内置类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USERNAME [a-zA-Z0-9._-]+</span><br><span class="line">USER %&#123;USERNAME&#125;</span><br><span class="line">INT (?:[+-]?(?:[0-9]+))</span><br><span class="line">BASE10NUM (?&lt;![0-9.+-])(?&gt;[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))</span><br><span class="line">NUMBER (?:%&#123;BASE10NUM&#125;)</span><br><span class="line">BASE16NUM (?&lt;![0-9A-Fa-f])(?:[+-]?(?:0x)?(?:[0-9A-Fa-f]+))</span><br><span class="line">BASE16FLOAT \b(?&lt;![0-9A-Fa-f.])(?:[+-]?(?:0x)?(?:(?:[0-9A-Fa-f]+(?:\.[0-9A-Fa-f]*)?)|(?:\.[0-9A-Fa-f]+)))\b</span><br><span class="line"></span><br><span class="line">POSINT \b(?:[1-9][0-9]*)\b</span><br><span class="line">NONNEGINT \b(?:[0-9]+)\b</span><br><span class="line">WORD \b\w+\b</span><br><span class="line">NOTSPACE \S+</span><br><span class="line">SPACE \s*</span><br><span class="line">DATA .*?</span><br><span class="line">GREEDYDATA .*</span><br><span class="line">QUOTEDSTRING (?&gt;(?&lt;!\\)(?&gt;&quot;(?&gt;\\.|[^\\&quot;]+)+&quot;|&quot;&quot;|(?&gt;&#x27;(?&gt;\\.|[^\\&#x27;]+)+&#x27;)|&#x27;&#x27;|(?&gt;`(?&gt;\\.|[^\\`]+)+`)|``))</span><br><span class="line">UUID [A-Fa-f0-9]&#123;8&#125;-(?:[A-Fa-f0-9]&#123;4&#125;-)&#123;3&#125;[A-Fa-f0-9]&#123;12&#125;</span><br><span class="line"></span><br><span class="line"># Networking</span><br><span class="line">MAC (?:%&#123;CISCOMAC&#125;|%&#123;WINDOWSMAC&#125;|%&#123;COMMONMAC&#125;)</span><br><span class="line">CISCOMAC (?:(?:[A-Fa-f0-9]&#123;4&#125;\.)&#123;2&#125;[A-Fa-f0-9]&#123;4&#125;)</span><br><span class="line">WINDOWSMAC (?:(?:[A-Fa-f0-9]&#123;2&#125;-)&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;)</span><br><span class="line">COMMONMAC (?:(?:[A-Fa-f0-9]&#123;2&#125;:)&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;)</span><br><span class="line">IPV6 ((([0-9A-Fa-f]&#123;1,4&#125;:)&#123;7&#125;([0-9A-Fa-f]&#123;1,4&#125;|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;(:[0-9A-Fa-f]&#123;1,4&#125;|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;)|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;5&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,2&#125;)|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;)|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;4&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,3&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;3&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,4&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,2&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;2&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,5&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,3&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;1&#125;(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,6&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,4&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:))|(:(((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;1,7&#125;)|((:[0-9A-Fa-f]&#123;1,4&#125;)&#123;0,5&#125;:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))&#123;3&#125;))|:)))(%.+)?</span><br><span class="line">IPV4 (?&lt;![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]&#123;1,2&#125;)[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]&#123;1,2&#125;)[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]&#123;1,2&#125;)[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]&#123;1,2&#125;))(?![0-9])</span><br><span class="line">IP (?:%&#123;IPV6&#125;|%&#123;IPV4&#125;)</span><br><span class="line">HOSTNAME \b(?:[0-9A-Za-z][0-9A-Za-z-]&#123;0,62&#125;)(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]&#123;0,62&#125;))*(\.?|\b)</span><br><span class="line">HOST %&#123;HOSTNAME&#125;</span><br><span class="line">IPORHOST (?:%&#123;HOSTNAME&#125;|%&#123;IP&#125;)</span><br><span class="line">HOSTPORT %&#123;IPORHOST&#125;:%&#123;POSINT&#125;</span><br><span class="line"></span><br><span class="line"># paths</span><br><span class="line">PATH (?:%&#123;UNIXPATH&#125;|%&#123;WINPATH&#125;)</span><br><span class="line">UNIXPATH (?&gt;/(?&gt;[\w_%!$@:.,-]+|\\.)*)+</span><br><span class="line">TTY (?:/dev/(pts|tty([pq])?)(\w+)?/?(?:[0-9]+))</span><br><span class="line">WINPATH (?&gt;[A-Za-z]+:|\\)(?:\\[^\\?*]*)+</span><br><span class="line">URIPROTO [A-Za-z]+(\+[A-Za-z+]+)?</span><br><span class="line">URIHOST %&#123;IPORHOST&#125;(?::%&#123;POSINT:port&#125;)?</span><br><span class="line"># uripath comes loosely from RFC1738, but mostly from what Firefox</span><br><span class="line"># doesn&#x27;t turn into %XX</span><br><span class="line">URIPATH (?:/[A-Za-z0-9$.+!*&#x27;()&#123;&#125;,~:;=@#%_\-]*)+</span><br><span class="line">#URIPARAM \?(?:[A-Za-z0-9]+(?:=(?:[^&amp;]*))?(?:&amp;(?:[A-Za-z0-9]+(?:=(?:[^&amp;]*))?)?)*)?</span><br><span class="line">URIPARAM \?[A-Za-z0-9$.+!*&#x27;|()&#123;&#125;,~@#%&amp;/=:;_?\-\[\]]*</span><br><span class="line">URIPATHPARAM %&#123;URIPATH&#125;(?:%&#123;URIPARAM&#125;)?</span><br><span class="line">URI %&#123;URIPROTO&#125;://(?:%&#123;USER&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?</span><br><span class="line"></span><br><span class="line"># Months: January, Feb, 3, 03, 12, December</span><br><span class="line">MONTH \b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\b</span><br><span class="line">MONTHNUM (?:0?[1-9]|1[0-2])</span><br><span class="line">MONTHNUM2 (?:0[1-9]|1[0-2])</span><br><span class="line">MONTHDAY (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])</span><br><span class="line"></span><br><span class="line"># Days: Monday, Tue, Thu, etc...</span><br><span class="line">DAY (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?)</span><br><span class="line"></span><br><span class="line"># Years?</span><br><span class="line">YEAR (?&gt;\d\d)&#123;1,2&#125;</span><br><span class="line">HOUR (?:2[0123]|[01]?[0-9])</span><br><span class="line">MINUTE (?:[0-5][0-9])</span><br><span class="line"># &#x27;60&#x27; is a leap second in most time standards and thus is valid.</span><br><span class="line">SECOND (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)</span><br><span class="line">TIME (?!&lt;[0-9])%&#123;HOUR&#125;:%&#123;MINUTE&#125;(?::%&#123;SECOND&#125;)(?![0-9])</span><br><span class="line"># datestamp is YYYY/MM/DD-HH:MM:SS.UUUU (or something like it)</span><br><span class="line">DATE_US %&#123;MONTHNUM&#125;[/-]%&#123;MONTHDAY&#125;[/-]%&#123;YEAR&#125;</span><br><span class="line">DATE_EU %&#123;MONTHDAY&#125;[./-]%&#123;MONTHNUM&#125;[./-]%&#123;YEAR&#125;</span><br><span class="line">ISO8601_TIMEZONE (?:Z|[+-]%&#123;HOUR&#125;(?::?%&#123;MINUTE&#125;))</span><br><span class="line">ISO8601_SECOND (?:%&#123;SECOND&#125;|60)</span><br><span class="line">TIMESTAMP_ISO8601 %&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125;[T ]%&#123;HOUR&#125;:?%&#123;MINUTE&#125;(?::?%&#123;SECOND&#125;)?%&#123;ISO8601_TIMEZONE&#125;?</span><br><span class="line">DATE %&#123;DATE_US&#125;|%&#123;DATE_EU&#125;</span><br><span class="line">DATESTAMP %&#123;DATE&#125;[- ]%&#123;TIME&#125;</span><br><span class="line">TZ (?:[PMCE][SD]T|UTC)</span><br><span class="line">DATESTAMP_RFC822 %&#123;DAY&#125; %&#123;MONTH&#125; %&#123;MONTHDAY&#125; %&#123;YEAR&#125; %&#123;TIME&#125; %&#123;TZ&#125;</span><br><span class="line">DATESTAMP_RFC2822 %&#123;DAY&#125;, %&#123;MONTHDAY&#125; %&#123;MONTH&#125; %&#123;YEAR&#125; %&#123;TIME&#125; %&#123;ISO8601_TIMEZONE&#125;</span><br><span class="line">DATESTAMP_OTHER %&#123;DAY&#125; %&#123;MONTH&#125; %&#123;MONTHDAY&#125; %&#123;TIME&#125; %&#123;TZ&#125; %&#123;YEAR&#125;</span><br><span class="line">DATESTAMP_EVENTLOG %&#123;YEAR&#125;%&#123;MONTHNUM2&#125;%&#123;MONTHDAY&#125;%&#123;HOUR&#125;%&#123;MINUTE&#125;%&#123;SECOND&#125;</span><br><span class="line"></span><br><span class="line"># Syslog Dates: Month Day HH:MM:SS</span><br><span class="line">SYSLOGTIMESTAMP %&#123;MONTH&#125; +%&#123;MONTHDAY&#125; %&#123;TIME&#125;</span><br><span class="line">PROG (?:[\w._/%-]+)</span><br><span class="line">SYSLOGPROG %&#123;PROG:program&#125;(?:\[%&#123;POSINT:pid&#125;\])?</span><br><span class="line">SYSLOGHOST %&#123;IPORHOST&#125;</span><br><span class="line">SYSLOGFACILITY &lt;%&#123;NONNEGINT:facility&#125;.%&#123;NONNEGINT:priority&#125;&gt;</span><br><span class="line">HTTPDATE %&#123;MONTHDAY&#125;/%&#123;MONTH&#125;/%&#123;YEAR&#125;:%&#123;TIME&#125; %&#123;INT&#125;</span><br><span class="line"></span><br><span class="line"># Shortcuts</span><br><span class="line">QS %&#123;QUOTEDSTRING&#125;</span><br><span class="line"></span><br><span class="line"># Log formats</span><br><span class="line">SYSLOGBASE %&#123;SYSLOGTIMESTAMP:timestamp&#125; (?:%&#123;SYSLOGFACILITY&#125; )?%&#123;SYSLOGHOST:logsource&#125; %&#123;SYSLOGPROG&#125;:</span><br><span class="line">COMMONAPACHELOG %&#123;IPORHOST:clientip&#125; %&#123;USER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-)</span><br><span class="line">COMBINEDAPACHELOG %&#123;COMMONAPACHELOG&#125; %&#123;QS:referrer&#125; %&#123;QS:agent&#125;</span><br><span class="line"></span><br><span class="line"># Log Levels</span><br><span class="line">LOGLEVEL ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)</span><br></pre></td></tr></table></figure>
<p>写logstash配置文件。</p>
<p>3kibana展现数据</p>
<h2 id="23-2项目二：学成在线站内搜索模块"><a href="#23-2项目二：学成在线站内搜索模块" class="headerlink" title="23.2项目二：学成在线站内搜索模块"></a>23.2项目二：学成在线站内搜索模块</h2><h3 id="1mysql导入course-pub表"><a href="#1mysql导入course-pub表" class="headerlink" title="1mysql导入course_pub表"></a>1mysql导入course_pub表</h3><h3 id="2创建索引xc-course"><a href="#2创建索引xc-course" class="headerlink" title="2创建索引xc_course"></a>2创建索引xc_course</h3><h3 id="3创建映射"><a href="#3创建映射" class="headerlink" title="3创建映射"></a>3创建映射</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /xc_course</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;description&quot; : &#123;</span><br><span class="line">                &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;grade&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;id&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;mt&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;name&quot; : &#123;</span><br><span class="line">                &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">           &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;users&quot; : &#123;</span><br><span class="line">               &quot;index&quot; : false,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;charge&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;valid&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;pic&quot; : &#123;</span><br><span class="line">               &quot;index&quot; : false,</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;qq&quot; : &#123;</span><br><span class="line">               &quot;index&quot; : false,</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;price&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;price_old&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;st&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;status&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;studymodel&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;teachmode&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;teachplan&quot; : &#123;</span><br><span class="line">                &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">           &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">           &quot;expires&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;pub_time&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;,</span><br><span class="line">             &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;start_time&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;,</span><br><span class="line">           &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">          &quot;end_time&quot; : &#123;</span><br><span class="line">                 &quot;type&quot; : &quot;date&quot;,</span><br><span class="line">           &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4logstash创建模板文件"><a href="#4logstash创建模板文件" class="headerlink" title="4logstash创建模板文件"></a>4logstash创建模板文件</h3><p>Logstash的工作是从MySQL中读取数据，向ES中创建索引，这里需要提前创建mapping的模板文件以便logstash使用。</p>
<p>在logstach的config目录创建xc_course_template.json，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;doc&quot; : &#123;</span><br><span class="line">         &quot;properties&quot; : &#123;</span><br><span class="line">            &quot;charge&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;description&quot; : &#123;</span><br><span class="line">               &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">               &quot;search_analyzer&quot; : &quot;ik_smart&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;end_time&quot; : &#123;</span><br><span class="line">               &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;expires&quot; : &#123;</span><br><span class="line">               &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;grade&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;id&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;mt&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;name&quot; : &#123;</span><br><span class="line">               &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">               &quot;search_analyzer&quot; : &quot;ik_smart&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;pic&quot; : &#123;</span><br><span class="line">               &quot;index&quot; : false,</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;price&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;price_old&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;pub_time&quot; : &#123;</span><br><span class="line">               &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;qq&quot; : &#123;</span><br><span class="line">               &quot;index&quot; : false,</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;st&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;start_time&quot; : &#123;</span><br><span class="line">               &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;status&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;studymodel&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;teachmode&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;teachplan&quot; : &#123;</span><br><span class="line">               &quot;analyzer&quot; : &quot;ik_max_word&quot;,</span><br><span class="line">               &quot;search_analyzer&quot; : &quot;ik_smart&quot;,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;users&quot; : &#123;</span><br><span class="line">               &quot;index&quot; : false,</span><br><span class="line">               &quot;type&quot; : &quot;text&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;valid&quot; : &#123;</span><br><span class="line">               &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;template&quot; : &quot;xc_course&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5logstash配置mysql-conf"><a href="#5logstash配置mysql-conf" class="headerlink" title="5logstash配置mysql.conf"></a>5logstash配置mysql.conf</h3><p>1、ES采用UTC时区问题</p>
<p>ES采用UTC 时区，比北京时间早8小时，所以ES读取数据时让最后更新时间加8小时</p>
<p>where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)</p>
<p>2、logstash每个执行完成会在/config/logstash_metadata记录执行时间下次以此时间为基准进行增量同步数据到索引库。</p>
<h3 id="6启动"><a href="#6启动" class="headerlink" title="6启动"></a>6启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\logstash.bat -f ..\config\mysql.conf</span><br></pre></td></tr></table></figure>
<p>7后端代码</p>
<p>7.1Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/search/course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsCourseController</span>  &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EsCourseService esCourseService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/list/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> QueryResponseResult&lt;CoursePub&gt; <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable(&quot;page&quot;)</span> <span class="type">int</span> page, <span class="meta">@PathVariable(&quot;size&quot;)</span> <span class="type">int</span> size, CourseSearchParam courseSearchParam)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> esCourseService.list(page,size,courseSearchParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class EsCourseService &#123;</span><br><span class="line">    @Value(&quot;$&#123;heima.course.source_field&#125;&quot;)</span><br><span class="line">    private String source_field;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    //课程搜索</span><br><span class="line">    public QueryResponseResult&lt;CoursePub&gt; list(int page, int size, CourseSearchParam courseSearchParam) &#123;</span><br><span class="line">        if (courseSearchParam == null) &#123;</span><br><span class="line">            courseSearchParam = new CourseSearchParam();</span><br><span class="line">        &#125;</span><br><span class="line">        //1创建搜索请求对象</span><br><span class="line">        SearchRequest searchRequest = new SearchRequest(&quot;xc_course&quot;);</span><br><span class="line"></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        //过虑源字段</span><br><span class="line">        String[] source_field_array = source_field.split(&quot;,&quot;);</span><br><span class="line">        searchSourceBuilder.fetchSource(source_field_array, new String[]&#123;&#125;);</span><br><span class="line">        //创建布尔查询对象</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        //搜索条件</span><br><span class="line">        //根据关键字搜索</span><br><span class="line">        if (StringUtils.isNotEmpty(courseSearchParam.getKeyword())) &#123;</span><br><span class="line">            MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(courseSearchParam.getKeyword(), &quot;name&quot;, &quot;description&quot;, &quot;teachplan&quot;)</span><br><span class="line">                    .minimumShouldMatch(&quot;70%&quot;)</span><br><span class="line">                    .field(&quot;name&quot;, 10);</span><br><span class="line">            boolQueryBuilder.must(multiMatchQueryBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isNotEmpty(courseSearchParam.getMt())) &#123;</span><br><span class="line">            //根据一级分类</span><br><span class="line">            boolQueryBuilder.filter(QueryBuilders.termQuery(&quot;mt&quot;, courseSearchParam.getMt()));</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isNotEmpty(courseSearchParam.getSt())) &#123;</span><br><span class="line">            //根据二级分类</span><br><span class="line">            boolQueryBuilder.filter(QueryBuilders.termQuery(&quot;st&quot;, courseSearchParam.getSt()));</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isNotEmpty(courseSearchParam.getGrade())) &#123;</span><br><span class="line">            //根据难度等级</span><br><span class="line">            boolQueryBuilder.filter(QueryBuilders.termQuery(&quot;grade&quot;, courseSearchParam.getGrade()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //设置boolQueryBuilder到searchSourceBuilder</span><br><span class="line">        searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line">        //设置分页参数</span><br><span class="line">        if (page &lt;= 0) &#123;</span><br><span class="line">            page = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (size &lt;= 0) &#123;</span><br><span class="line">            size = 12;</span><br><span class="line">        &#125;</span><br><span class="line">        //起始记录下标</span><br><span class="line">        int from = (page - 1) * size;</span><br><span class="line">        searchSourceBuilder.from(from);</span><br><span class="line">        searchSourceBuilder.size(size);</span><br><span class="line"></span><br><span class="line">        //设置高亮</span><br><span class="line">        HighlightBuilder highlightBuilder = new HighlightBuilder();</span><br><span class="line">        highlightBuilder.preTags(&quot;&lt;font class=&#x27;eslight&#x27;&gt;&quot;);</span><br><span class="line">        highlightBuilder.postTags(&quot;&lt;/font&gt;&quot;);</span><br><span class="line">        //设置高亮字段</span><br><span class="line">//        &lt;font class=&#x27;eslight&#x27;&gt;node&lt;/font&gt;学习</span><br><span class="line">        highlightBuilder.fields().add(new HighlightBuilder.Field(&quot;name&quot;));</span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        QueryResult&lt;CoursePub&gt; queryResult = new QueryResult();</span><br><span class="line">        List&lt;CoursePub&gt; list = new ArrayList&lt;CoursePub&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            //2执行搜索</span><br><span class="line">            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            //3获取响应结果</span><br><span class="line">            SearchHits hits = searchResponse.getHits();</span><br><span class="line">            long totalHits=hits.getTotalHits().value;</span><br><span class="line">            //匹配的总记录数</span><br><span class="line">//            long totalHits = hits.totalHits;</span><br><span class="line">            queryResult.setTotal(totalHits);</span><br><span class="line">            SearchHit[] searchHits = hits.getHits();</span><br><span class="line">            for (SearchHit hit : searchHits) &#123;</span><br><span class="line">                CoursePub coursePub = new CoursePub();</span><br><span class="line">                //源文档</span><br><span class="line">                Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">                //取出id</span><br><span class="line">                String id = (String) sourceAsMap.get(&quot;id&quot;);</span><br><span class="line">                coursePub.setId(id);</span><br><span class="line">                //取出name</span><br><span class="line">                String name = (String) sourceAsMap.get(&quot;name&quot;);</span><br><span class="line">                //取出高亮字段name</span><br><span class="line">                Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">                if (highlightFields != null) &#123;</span><br><span class="line">                    HighlightField highlightFieldName = highlightFields.get(&quot;name&quot;);</span><br><span class="line">                    if (highlightFieldName != null) &#123;</span><br><span class="line">                        Text[] fragments = highlightFieldName.fragments();</span><br><span class="line">                        StringBuffer stringBuffer = new StringBuffer();</span><br><span class="line">                        for (Text text : fragments) &#123;</span><br><span class="line">                            stringBuffer.append(text);</span><br><span class="line">                        &#125;</span><br><span class="line">                        name = stringBuffer.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                coursePub.setName(name);</span><br><span class="line">                //图片</span><br><span class="line">                String pic = (String) sourceAsMap.get(&quot;pic&quot;);</span><br><span class="line">                coursePub.setPic(pic);</span><br><span class="line">                //价格</span><br><span class="line">                Double price = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (sourceAsMap.get(&quot;price&quot;) != null) &#123;</span><br><span class="line">                        price = (Double) sourceAsMap.get(&quot;price&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                coursePub.setPrice(price);</span><br><span class="line">                //旧价格</span><br><span class="line">                Double price_old = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (sourceAsMap.get(&quot;price_old&quot;) != null) &#123;</span><br><span class="line">                        price_old = (Double) sourceAsMap.get(&quot;price_old&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                coursePub.setPrice_old(price_old);</span><br><span class="line">                //将coursePub对象放入list</span><br><span class="line">                list.add(coursePub);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queryResult.setList(list);</span><br><span class="line">        QueryResponseResult&lt;CoursePub&gt; queryResponseResult = new QueryResponseResult&lt;CoursePub&gt;(CommonCode.SUCCESS, queryResult);</span><br><span class="line"></span><br><span class="line">        return queryResponseResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
